// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Shared.Repository;

#nullable disable

namespace Shared.Repository.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250617152304_AddPrintInvoiceSetting")]
    partial class AddPrintInvoiceSetting
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            MySqlModelBuilderExtensions.AutoIncrementColumns(modelBuilder);

            modelBuilder.Entity("Accounting.CoreOne.Models.Domain.FixedAssetMovementDetail", b =>
                {
                    b.Property<int>("FixedAssetMovementDetailId")
                        .HasColumnType("int")
                        .HasColumnOrder(1);

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnOrder(200);

                    b.Property<int>("FixedAssetId")
                        .HasColumnType("int")
                        .HasColumnOrder(3);

                    b.Property<int>("FixedAssetMovementHeaderId")
                        .HasColumnType("int")
                        .HasColumnOrder(2);

                    b.Property<bool?>("Hide")
                        .HasColumnType("tinyint(1)")
                        .HasColumnOrder(206);

                    b.Property<string>("IpAddressCreated")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnOrder(204);

                    b.Property<string>("IpAddressModified")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnOrder(205);

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnOrder(201);

                    b.Property<string>("RemarksAr")
                        .HasMaxLength(2000)
                        .HasColumnType("varchar(2000)")
                        .HasColumnOrder(4);

                    b.Property<string>("RemarksEn")
                        .HasMaxLength(2000)
                        .HasColumnType("varchar(2000)")
                        .HasColumnOrder(5);

                    b.Property<string>("UserNameCreated")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnOrder(202);

                    b.Property<string>("UserNameModified")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnOrder(203);

                    b.HasKey("FixedAssetMovementDetailId");

                    b.HasIndex("FixedAssetId");

                    b.HasIndex("FixedAssetMovementHeaderId");

                    b.ToTable("FixedAssetMovementDetails");
                });

            modelBuilder.Entity("Accounting.CoreOne.Models.Domain.FixedAssetMovementHeader", b =>
                {
                    b.Property<int>("FixedAssetMovementHeaderId")
                        .HasColumnType("int")
                        .HasColumnOrder(1);

                    b.Property<int?>("ArchiveHeaderId")
                        .HasColumnType("int")
                        .HasColumnOrder(13);

                    b.Property<int>("CostCenterToId")
                        .HasColumnType("int")
                        .HasColumnOrder(9);

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnOrder(200);

                    b.Property<int>("DocumentCode")
                        .HasColumnType("int")
                        .HasColumnOrder(3);

                    b.Property<DateTime>("DocumentDate")
                        .HasColumnType("Date")
                        .HasColumnOrder(5);

                    b.Property<string>("DocumentReference")
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)")
                        .HasColumnOrder(7);

                    b.Property<DateTime>("EntryDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnOrder(6);

                    b.Property<bool?>("Hide")
                        .HasColumnType("tinyint(1)")
                        .HasColumnOrder(206);

                    b.Property<string>("IpAddressCreated")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnOrder(204);

                    b.Property<string>("IpAddressModified")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnOrder(205);

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnOrder(201);

                    b.Property<DateTime>("MovementDate")
                        .HasColumnType("Date")
                        .HasColumnOrder(10);

                    b.Property<string>("Prefix")
                        .HasMaxLength(10)
                        .HasColumnType("varchar(10)")
                        .HasColumnOrder(2);

                    b.Property<string>("RemarksAr")
                        .HasMaxLength(2000)
                        .HasColumnType("varchar(2000)")
                        .HasColumnOrder(11);

                    b.Property<string>("RemarksEn")
                        .HasMaxLength(2000)
                        .HasColumnType("varchar(2000)")
                        .HasColumnOrder(12);

                    b.Property<int>("StoreId")
                        .HasColumnType("int")
                        .HasColumnOrder(8);

                    b.Property<string>("Suffix")
                        .HasMaxLength(10)
                        .HasColumnType("varchar(10)")
                        .HasColumnOrder(4);

                    b.Property<string>("UserNameCreated")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnOrder(202);

                    b.Property<string>("UserNameModified")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnOrder(203);

                    b.HasKey("FixedAssetMovementHeaderId");

                    b.HasIndex("ArchiveHeaderId");

                    b.HasIndex("CostCenterToId");

                    b.HasIndex("StoreId");

                    b.ToTable("FixedAssetMovementHeaders");
                });

            modelBuilder.Entity("Accounting.CoreOne.Models.Domain.FixedAssetVoucherDetail", b =>
                {
                    b.Property<int>("FixedAssetVoucherDetailId")
                        .HasColumnType("int")
                        .HasColumnOrder(1);

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnOrder(200);

                    b.Property<decimal?>("DetailValue")
                        .HasColumnType("decimal(65,30)")
                        .HasColumnOrder(6);

                    b.Property<int>("FixedAssetId")
                        .HasColumnType("int")
                        .HasColumnOrder(3);

                    b.Property<int>("FixedAssetVoucherHeaderId")
                        .HasColumnType("int")
                        .HasColumnOrder(2);

                    b.Property<bool?>("Hide")
                        .HasColumnType("tinyint(1)")
                        .HasColumnOrder(206);

                    b.Property<string>("IpAddressCreated")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnOrder(204);

                    b.Property<string>("IpAddressModified")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnOrder(205);

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnOrder(201);

                    b.Property<string>("RemarksAr")
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)")
                        .HasColumnOrder(4);

                    b.Property<string>("RemarksEn")
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)")
                        .HasColumnOrder(5);

                    b.Property<string>("UserNameCreated")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnOrder(202);

                    b.Property<string>("UserNameModified")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnOrder(203);

                    b.HasKey("FixedAssetVoucherDetailId");

                    b.HasIndex("FixedAssetId");

                    b.HasIndex("FixedAssetVoucherHeaderId");

                    b.ToTable("FixedAssetVoucherDetails");
                });

            modelBuilder.Entity("Accounting.CoreOne.Models.Domain.FixedAssetVoucherDetailPayment", b =>
                {
                    b.Property<int>("FixedAssetVoucherDetailPaymentId")
                        .HasColumnType("int")
                        .HasColumnOrder(1);

                    b.Property<int>("AccountId")
                        .HasColumnType("int")
                        .HasColumnOrder(4);

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnOrder(200);

                    b.Property<decimal>("CreditValue")
                        .HasColumnType("decimal(18,6)")
                        .HasColumnOrder(8);

                    b.Property<decimal>("CreditValueAccount")
                        .HasColumnType("decimal(18,6)")
                        .HasColumnOrder(10);

                    b.Property<short>("CurrencyId")
                        .HasColumnType("smallint")
                        .HasColumnOrder(5);

                    b.Property<decimal>("CurrencyRate")
                        .HasColumnType("decimal(18,6)")
                        .HasColumnOrder(6);

                    b.Property<decimal>("DebitValue")
                        .HasColumnType("decimal(18,6)")
                        .HasColumnOrder(7);

                    b.Property<decimal>("DebitValueAccount")
                        .HasColumnType("decimal(18,6)")
                        .HasColumnOrder(9);

                    b.Property<int>("FixedAssetVoucherDetailId")
                        .HasColumnType("int")
                        .HasColumnOrder(2);

                    b.Property<bool?>("Hide")
                        .HasColumnType("tinyint(1)")
                        .HasColumnOrder(206);

                    b.Property<string>("IpAddressCreated")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnOrder(204);

                    b.Property<string>("IpAddressModified")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnOrder(205);

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnOrder(201);

                    b.Property<int?>("PaymentMethodId")
                        .HasColumnType("int")
                        .HasColumnOrder(3);

                    b.Property<string>("UserNameCreated")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnOrder(202);

                    b.Property<string>("UserNameModified")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnOrder(203);

                    b.HasKey("FixedAssetVoucherDetailPaymentId");

                    b.HasIndex("AccountId");

                    b.HasIndex("CurrencyId");

                    b.HasIndex("FixedAssetVoucherDetailId");

                    b.HasIndex("PaymentMethodId");

                    b.ToTable("FixedAssetVoucherDetailPayments");
                });

            modelBuilder.Entity("Accounting.CoreOne.Models.Domain.FixedAssetVoucherHeader", b =>
                {
                    b.Property<int>("FixedAssetVoucherHeaderId")
                        .HasColumnType("int")
                        .HasColumnOrder(1);

                    b.Property<int?>("ArchiveHeaderId")
                        .HasColumnType("int")
                        .HasColumnOrder(16);

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnOrder(200);

                    b.Property<int>("DocumentCode")
                        .HasColumnType("int")
                        .HasColumnOrder(3);

                    b.Property<DateTime>("DocumentDate")
                        .HasColumnType("Date")
                        .HasColumnOrder(9);

                    b.Property<string>("DocumentReference")
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)")
                        .HasColumnOrder(6);

                    b.Property<DateTime>("EntryDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnOrder(8);

                    b.Property<string>("FixedAssetReference")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnOrder(11);

                    b.Property<byte>("FixedAssetVoucherTypeId")
                        .HasColumnType("tinyint unsigned")
                        .HasColumnOrder(5);

                    b.Property<bool?>("Hide")
                        .HasColumnType("tinyint(1)")
                        .HasColumnOrder(206);

                    b.Property<string>("IpAddressCreated")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnOrder(204);

                    b.Property<string>("IpAddressModified")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnOrder(205);

                    b.Property<int?>("JournalHeaderId")
                        .HasColumnType("int")
                        .HasColumnOrder(15);

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnOrder(201);

                    b.Property<string>("PeerReference")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnOrder(10);

                    b.Property<string>("Prefix")
                        .HasMaxLength(10)
                        .HasColumnType("varchar(10)")
                        .HasColumnOrder(2);

                    b.Property<string>("RemarksAr")
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)")
                        .HasColumnOrder(13);

                    b.Property<string>("RemarksEn")
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)")
                        .HasColumnOrder(14);

                    b.Property<int?>("SellerId")
                        .HasColumnType("int")
                        .HasColumnOrder(12);

                    b.Property<int>("StoreId")
                        .HasColumnType("int")
                        .HasColumnOrder(7);

                    b.Property<string>("Suffix")
                        .HasMaxLength(10)
                        .HasColumnType("varchar(10)")
                        .HasColumnOrder(4);

                    b.Property<string>("UserNameCreated")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnOrder(202);

                    b.Property<string>("UserNameModified")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnOrder(203);

                    b.HasKey("FixedAssetVoucherHeaderId");

                    b.HasIndex("ArchiveHeaderId");

                    b.HasIndex("FixedAssetVoucherTypeId");

                    b.HasIndex("JournalHeaderId");

                    b.HasIndex("SellerId");

                    b.HasIndex("StoreId");

                    b.ToTable("FixedAssetVoucherHeaders");
                });

            modelBuilder.Entity("Accounting.CoreOne.Models.Domain.PaymentVoucherDetail", b =>
                {
                    b.Property<int>("PaymentVoucherDetailId")
                        .HasColumnType("int")
                        .HasColumnOrder(1);

                    b.Property<int>("AccountId")
                        .HasColumnType("int")
                        .HasColumnOrder(4);

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnOrder(200);

                    b.Property<decimal>("CreditValue")
                        .HasColumnType("decimal(30,15)")
                        .HasColumnOrder(8);

                    b.Property<decimal>("CreditValueAccount")
                        .HasColumnType("decimal(30,15)")
                        .HasColumnOrder(10);

                    b.Property<short>("CurrencyId")
                        .HasColumnType("smallint")
                        .HasColumnOrder(5);

                    b.Property<decimal>("CurrencyRate")
                        .HasColumnType("decimal(30,15)")
                        .HasColumnOrder(6);

                    b.Property<decimal>("DebitValue")
                        .HasColumnType("decimal(30,15)")
                        .HasColumnOrder(7);

                    b.Property<decimal>("DebitValueAccount")
                        .HasColumnType("decimal(30,15)")
                        .HasColumnOrder(9);

                    b.Property<bool?>("Hide")
                        .HasColumnType("tinyint(1)")
                        .HasColumnOrder(206);

                    b.Property<string>("IpAddressCreated")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnOrder(204);

                    b.Property<string>("IpAddressModified")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnOrder(205);

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnOrder(201);

                    b.Property<int?>("PaymentMethodId")
                        .HasColumnType("int")
                        .HasColumnOrder(3);

                    b.Property<int>("PaymentVoucherHeaderId")
                        .HasColumnType("int")
                        .HasColumnOrder(2);

                    b.Property<string>("RemarksAr")
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)")
                        .HasColumnOrder(11);

                    b.Property<string>("RemarksEn")
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)")
                        .HasColumnOrder(12);

                    b.Property<string>("UserNameCreated")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnOrder(202);

                    b.Property<string>("UserNameModified")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnOrder(203);

                    b.HasKey("PaymentVoucherDetailId");

                    b.HasIndex("AccountId");

                    b.HasIndex("CurrencyId");

                    b.HasIndex("PaymentMethodId");

                    b.HasIndex("PaymentVoucherHeaderId");

                    b.ToTable("PaymentVoucherDetails");
                });

            modelBuilder.Entity("Accounting.CoreOne.Models.Domain.PaymentVoucherHeader", b =>
                {
                    b.Property<int>("PaymentVoucherHeaderId")
                        .HasColumnType("int")
                        .HasColumnOrder(1);

                    b.Property<int?>("ArchiveHeaderId")
                        .HasColumnType("int")
                        .HasColumnOrder(20);

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnOrder(200);

                    b.Property<DateTime>("DocumentDate")
                        .HasColumnType("Date")
                        .HasColumnOrder(9);

                    b.Property<string>("DocumentReference")
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)")
                        .HasColumnOrder(5);

                    b.Property<DateTime>("EntryDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnOrder(8);

                    b.Property<bool?>("Hide")
                        .HasColumnType("tinyint(1)")
                        .HasColumnOrder(206);

                    b.Property<string>("IpAddressCreated")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnOrder(204);

                    b.Property<string>("IpAddressModified")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnOrder(205);

                    b.Property<int?>("JournalHeaderId")
                        .HasColumnType("int")
                        .HasColumnOrder(19);

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnOrder(201);

                    b.Property<string>("PaymentReference")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnOrder(11);

                    b.Property<int>("PaymentVoucherCode")
                        .HasColumnType("int")
                        .HasColumnOrder(3);

                    b.Property<string>("PeerReference")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnOrder(10);

                    b.Property<string>("Prefix")
                        .HasMaxLength(10)
                        .HasColumnType("varchar(10)")
                        .HasColumnOrder(2);

                    b.Property<string>("RemarksAr")
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)")
                        .HasColumnOrder(17);

                    b.Property<string>("RemarksEn")
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)")
                        .HasColumnOrder(18);

                    b.Property<int?>("SellerId")
                        .HasColumnType("int")
                        .HasColumnOrder(12);

                    b.Property<int>("StoreId")
                        .HasColumnType("int")
                        .HasColumnOrder(6);

                    b.Property<string>("Suffix")
                        .HasMaxLength(10)
                        .HasColumnType("varchar(10)")
                        .HasColumnOrder(4);

                    b.Property<int?>("SupplierId")
                        .HasColumnType("int")
                        .HasColumnOrder(7);

                    b.Property<decimal>("TotalCreditValue")
                        .HasColumnType("decimal(30,15)")
                        .HasColumnOrder(15);

                    b.Property<decimal>("TotalCreditValueAccount")
                        .HasColumnType("decimal(30,15)")
                        .HasColumnOrder(16);

                    b.Property<decimal>("TotalDebitValue")
                        .HasColumnType("decimal(30,15)")
                        .HasColumnOrder(13);

                    b.Property<decimal>("TotalDebitValueAccount")
                        .HasColumnType("decimal(30,15)")
                        .HasColumnOrder(14);

                    b.Property<string>("UserNameCreated")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnOrder(202);

                    b.Property<string>("UserNameModified")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnOrder(203);

                    b.HasKey("PaymentVoucherHeaderId");

                    b.HasIndex("ArchiveHeaderId");

                    b.HasIndex("JournalHeaderId");

                    b.HasIndex("SellerId");

                    b.HasIndex("StoreId");

                    b.HasIndex("SupplierId");

                    b.ToTable("PaymentVoucherHeaders");
                });

            modelBuilder.Entity("Accounting.CoreOne.Models.Domain.PaymentVoucherInvoice", b =>
                {
                    b.Property<int>("PaymentVoucherInvoiceId")
                        .HasColumnType("int")
                        .HasColumnOrder(1);

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnOrder(200);

                    b.Property<bool?>("Hide")
                        .HasColumnType("tinyint(1)")
                        .HasColumnOrder(206);

                    b.Property<DateTime>("InvoiceDate")
                        .HasColumnType("Date")
                        .HasColumnOrder(4);

                    b.Property<decimal>("InvoiceDueValue")
                        .HasColumnType("decimal(30,15)")
                        .HasColumnOrder(7);

                    b.Property<int>("InvoiceId")
                        .HasColumnType("int")
                        .HasColumnOrder(3);

                    b.Property<decimal>("InvoiceInstallmentValue")
                        .HasColumnType("decimal(30,15)")
                        .HasColumnOrder(8);

                    b.Property<decimal>("InvoicePaidValue")
                        .HasColumnType("decimal(30,15)")
                        .HasColumnOrder(6);

                    b.Property<decimal>("InvoiceTotalValue")
                        .HasColumnType("decimal(30,15)")
                        .HasColumnOrder(5);

                    b.Property<string>("IpAddressCreated")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnOrder(204);

                    b.Property<string>("IpAddressModified")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnOrder(205);

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnOrder(201);

                    b.Property<int>("PaymentVoucherHeaderId")
                        .HasColumnType("int")
                        .HasColumnOrder(2);

                    b.Property<string>("UserNameCreated")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnOrder(202);

                    b.Property<string>("UserNameModified")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnOrder(203);

                    b.HasKey("PaymentVoucherInvoiceId");

                    b.HasIndex("PaymentVoucherHeaderId");

                    b.ToTable("PaymentVoucherInvoices");
                });

            modelBuilder.Entity("Accounting.CoreOne.Models.Domain.ReceiptVoucherDetail", b =>
                {
                    b.Property<int>("ReceiptVoucherDetailId")
                        .HasColumnType("int")
                        .HasColumnOrder(1);

                    b.Property<int>("AccountId")
                        .HasColumnType("int")
                        .HasColumnOrder(4);

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnOrder(200);

                    b.Property<decimal>("CreditValue")
                        .HasColumnType("decimal(30,15)")
                        .HasColumnOrder(8);

                    b.Property<decimal>("CreditValueAccount")
                        .HasColumnType("decimal(30,15)")
                        .HasColumnOrder(10);

                    b.Property<short>("CurrencyId")
                        .HasColumnType("smallint")
                        .HasColumnOrder(5);

                    b.Property<decimal>("CurrencyRate")
                        .HasColumnType("decimal(30,15)")
                        .HasColumnOrder(6);

                    b.Property<decimal>("DebitValue")
                        .HasColumnType("decimal(30,15)")
                        .HasColumnOrder(7);

                    b.Property<decimal>("DebitValueAccount")
                        .HasColumnType("decimal(30,15)")
                        .HasColumnOrder(9);

                    b.Property<bool?>("Hide")
                        .HasColumnType("tinyint(1)")
                        .HasColumnOrder(206);

                    b.Property<string>("IpAddressCreated")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnOrder(204);

                    b.Property<string>("IpAddressModified")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnOrder(205);

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnOrder(201);

                    b.Property<int?>("PaymentMethodId")
                        .HasColumnType("int")
                        .HasColumnOrder(3);

                    b.Property<int>("ReceiptVoucherHeaderId")
                        .HasColumnType("int")
                        .HasColumnOrder(2);

                    b.Property<string>("RemarksAr")
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)")
                        .HasColumnOrder(11);

                    b.Property<string>("RemarksEn")
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)")
                        .HasColumnOrder(12);

                    b.Property<string>("UserNameCreated")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnOrder(202);

                    b.Property<string>("UserNameModified")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnOrder(203);

                    b.HasKey("ReceiptVoucherDetailId");

                    b.HasIndex("AccountId");

                    b.HasIndex("CurrencyId");

                    b.HasIndex("PaymentMethodId");

                    b.HasIndex("ReceiptVoucherHeaderId");

                    b.ToTable("ReceiptVoucherDetails");
                });

            modelBuilder.Entity("Accounting.CoreOne.Models.Domain.ReceiptVoucherHeader", b =>
                {
                    b.Property<int>("ReceiptVoucherHeaderId")
                        .HasColumnType("int")
                        .HasColumnOrder(1);

                    b.Property<int?>("ArchiveHeaderId")
                        .HasColumnType("int")
                        .HasColumnOrder(20);

                    b.Property<int?>("ClientId")
                        .HasColumnType("int")
                        .HasColumnOrder(7);

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnOrder(200);

                    b.Property<DateTime>("DocumentDate")
                        .HasColumnType("Date")
                        .HasColumnOrder(9);

                    b.Property<string>("DocumentReference")
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)")
                        .HasColumnOrder(5);

                    b.Property<DateTime>("EntryDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnOrder(8);

                    b.Property<bool?>("Hide")
                        .HasColumnType("tinyint(1)")
                        .HasColumnOrder(206);

                    b.Property<string>("IpAddressCreated")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnOrder(204);

                    b.Property<string>("IpAddressModified")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnOrder(205);

                    b.Property<int?>("JournalHeaderId")
                        .HasColumnType("int")
                        .HasColumnOrder(19);

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnOrder(201);

                    b.Property<string>("PaymentReference")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnOrder(11);

                    b.Property<string>("PeerReference")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnOrder(10);

                    b.Property<string>("Prefix")
                        .HasMaxLength(10)
                        .HasColumnType("varchar(10)")
                        .HasColumnOrder(2);

                    b.Property<int>("ReceiptVoucherCode")
                        .HasColumnType("int")
                        .HasColumnOrder(3);

                    b.Property<string>("RemarksAr")
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)")
                        .HasColumnOrder(17);

                    b.Property<string>("RemarksEn")
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)")
                        .HasColumnOrder(18);

                    b.Property<int?>("SellerId")
                        .HasColumnType("int")
                        .HasColumnOrder(12);

                    b.Property<int>("StoreId")
                        .HasColumnType("int")
                        .HasColumnOrder(6);

                    b.Property<string>("Suffix")
                        .HasMaxLength(10)
                        .HasColumnType("varchar(10)")
                        .HasColumnOrder(4);

                    b.Property<decimal>("TotalCreditValue")
                        .HasColumnType("decimal(30,15)")
                        .HasColumnOrder(15);

                    b.Property<decimal>("TotalCreditValueAccount")
                        .HasColumnType("decimal(30,15)")
                        .HasColumnOrder(16);

                    b.Property<decimal>("TotalDebitValue")
                        .HasColumnType("decimal(30,15)")
                        .HasColumnOrder(13);

                    b.Property<decimal>("TotalDebitValueAccount")
                        .HasColumnType("decimal(30,15)")
                        .HasColumnOrder(14);

                    b.Property<string>("UserNameCreated")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnOrder(202);

                    b.Property<string>("UserNameModified")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnOrder(203);

                    b.HasKey("ReceiptVoucherHeaderId");

                    b.HasIndex("ArchiveHeaderId");

                    b.HasIndex("ClientId");

                    b.HasIndex("JournalHeaderId");

                    b.HasIndex("SellerId");

                    b.HasIndex("StoreId");

                    b.ToTable("ReceiptVoucherHeaders");
                });

            modelBuilder.Entity("Accounting.CoreOne.Models.Domain.ReceiptVoucherInvoice", b =>
                {
                    b.Property<int>("ReceiptVoucherInvoiceId")
                        .HasColumnType("int")
                        .HasColumnOrder(1);

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnOrder(200);

                    b.Property<bool?>("Hide")
                        .HasColumnType("tinyint(1)")
                        .HasColumnOrder(206);

                    b.Property<DateTime>("InvoiceDate")
                        .HasColumnType("Date")
                        .HasColumnOrder(4);

                    b.Property<decimal>("InvoiceDueValue")
                        .HasColumnType("decimal(30,15)")
                        .HasColumnOrder(7);

                    b.Property<int>("InvoiceId")
                        .HasColumnType("int")
                        .HasColumnOrder(3);

                    b.Property<decimal>("InvoiceInstallmentValue")
                        .HasColumnType("decimal(30,15)")
                        .HasColumnOrder(8);

                    b.Property<decimal>("InvoicePaidValue")
                        .HasColumnType("decimal(30,15)")
                        .HasColumnOrder(6);

                    b.Property<decimal>("InvoiceTotalValue")
                        .HasColumnType("decimal(30,15)")
                        .HasColumnOrder(5);

                    b.Property<string>("IpAddressCreated")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnOrder(204);

                    b.Property<string>("IpAddressModified")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnOrder(205);

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnOrder(201);

                    b.Property<int>("ReceiptVoucherHeaderId")
                        .HasColumnType("int")
                        .HasColumnOrder(2);

                    b.Property<string>("UserNameCreated")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnOrder(202);

                    b.Property<string>("UserNameModified")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnOrder(203);

                    b.HasKey("ReceiptVoucherInvoiceId");

                    b.HasIndex("ReceiptVoucherHeaderId");

                    b.ToTable("ReceiptVoucherInvoices");
                });

            modelBuilder.Entity("Compound.CoreOne.Models.Domain.InvoiceSettlement.PurchaseInvoiceSettlement", b =>
                {
                    b.Property<int>("PurchaseInvoiceSettlementId")
                        .HasColumnType("int")
                        .HasColumnOrder(1);

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnOrder(200);

                    b.Property<bool?>("Hide")
                        .HasColumnType("tinyint(1)")
                        .HasColumnOrder(206);

                    b.Property<string>("IpAddressCreated")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnOrder(204);

                    b.Property<string>("IpAddressModified")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnOrder(205);

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnOrder(201);

                    b.Property<int>("PaymentVoucherHeaderId")
                        .HasColumnType("int")
                        .HasColumnOrder(3);

                    b.Property<int>("PurchaseInvoiceHeaderId")
                        .HasColumnType("int")
                        .HasColumnOrder(2);

                    b.Property<string>("RemarksAr")
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)")
                        .HasColumnOrder(5);

                    b.Property<string>("RemarksEn")
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)")
                        .HasColumnOrder(6);

                    b.Property<decimal>("SettleValue")
                        .HasColumnType("decimal(30,15)")
                        .HasColumnOrder(4);

                    b.Property<string>("UserNameCreated")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnOrder(202);

                    b.Property<string>("UserNameModified")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnOrder(203);

                    b.HasKey("PurchaseInvoiceSettlementId");

                    b.HasIndex("PaymentVoucherHeaderId");

                    b.HasIndex("PurchaseInvoiceHeaderId");

                    b.ToTable("PurchaseInvoiceSettlements");
                });

            modelBuilder.Entity("Compound.CoreOne.Models.Domain.InvoiceSettlement.SalesInvoiceSettlement", b =>
                {
                    b.Property<int>("SalesInvoiceSettlementId")
                        .HasColumnType("int")
                        .HasColumnOrder(1);

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnOrder(200);

                    b.Property<bool?>("Hide")
                        .HasColumnType("tinyint(1)")
                        .HasColumnOrder(206);

                    b.Property<string>("IpAddressCreated")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnOrder(204);

                    b.Property<string>("IpAddressModified")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnOrder(205);

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnOrder(201);

                    b.Property<int>("ReceiptVoucherHeaderId")
                        .HasColumnType("int")
                        .HasColumnOrder(3);

                    b.Property<string>("RemarksAr")
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)")
                        .HasColumnOrder(5);

                    b.Property<string>("RemarksEn")
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)")
                        .HasColumnOrder(6);

                    b.Property<int>("SalesInvoiceHeaderId")
                        .HasColumnType("int")
                        .HasColumnOrder(2);

                    b.Property<decimal>("SettleValue")
                        .HasColumnType("decimal(30,15)")
                        .HasColumnOrder(4);

                    b.Property<string>("UserNameCreated")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnOrder(202);

                    b.Property<string>("UserNameModified")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnOrder(203);

                    b.HasKey("SalesInvoiceSettlementId");

                    b.HasIndex("ReceiptVoucherHeaderId");

                    b.HasIndex("SalesInvoiceHeaderId");

                    b.ToTable("SalesInvoiceSettlements");
                });

            modelBuilder.Entity("Inventory.CoreOne.Models.Domain.InternalTransferDetail", b =>
                {
                    b.Property<int>("InternalTransferDetailId")
                        .HasColumnType("int")
                        .HasColumnOrder(1);

                    b.Property<string>("BarCode")
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)")
                        .HasColumnOrder(5);

                    b.Property<string>("BatchNumber")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnOrder(14);

                    b.Property<decimal>("ConsumerPrice")
                        .HasColumnType("decimal(30,15)")
                        .HasColumnOrder(8);

                    b.Property<decimal>("ConsumerValue")
                        .HasColumnType("decimal(30,15)")
                        .HasColumnOrder(9);

                    b.Property<decimal>("CostPackage")
                        .HasColumnType("decimal(30,15)")
                        .HasColumnOrder(11);

                    b.Property<decimal>("CostPrice")
                        .HasColumnType("decimal(30,15)")
                        .HasColumnOrder(10);

                    b.Property<decimal>("CostValue")
                        .HasColumnType("decimal(30,15)")
                        .HasColumnOrder(12);

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnOrder(200);

                    b.Property<DateTime?>("ExpireDate")
                        .HasColumnType("Date")
                        .HasColumnOrder(13);

                    b.Property<bool?>("Hide")
                        .HasColumnType("tinyint(1)")
                        .HasColumnOrder(206);

                    b.Property<int>("InternalTransferHeaderId")
                        .HasColumnType("int")
                        .HasColumnOrder(2);

                    b.Property<string>("IpAddressCreated")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnOrder(204);

                    b.Property<string>("IpAddressModified")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnOrder(205);

                    b.Property<int>("ItemId")
                        .HasColumnType("int")
                        .HasColumnOrder(3);

                    b.Property<int>("ItemPackageId")
                        .HasColumnType("int")
                        .HasColumnOrder(4);

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnOrder(201);

                    b.Property<decimal>("Packing")
                        .HasColumnType("decimal(30,15)")
                        .HasColumnOrder(6);

                    b.Property<decimal>("Quantity")
                        .HasColumnType("decimal(30,15)")
                        .HasColumnOrder(7);

                    b.Property<string>("UserNameCreated")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnOrder(202);

                    b.Property<string>("UserNameModified")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnOrder(203);

                    b.HasKey("InternalTransferDetailId");

                    b.HasIndex("InternalTransferHeaderId");

                    b.HasIndex("ItemId");

                    b.HasIndex("ItemPackageId");

                    b.ToTable("InternalTransferDetails");
                });

            modelBuilder.Entity("Inventory.CoreOne.Models.Domain.InternalTransferHeader", b =>
                {
                    b.Property<int>("InternalTransferId")
                        .HasColumnType("int")
                        .HasColumnOrder(1);

                    b.Property<int?>("ArchiveHeaderId")
                        .HasColumnType("int")
                        .HasColumnOrder(20);

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnOrder(200);

                    b.Property<DateTime>("DocumentDate")
                        .HasColumnType("Date")
                        .HasColumnOrder(6);

                    b.Property<string>("DocumentReference")
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)")
                        .HasColumnOrder(5);

                    b.Property<DateTime>("EntryDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnOrder(7);

                    b.Property<int>("FromStoreId")
                        .HasColumnType("int")
                        .HasColumnOrder(8);

                    b.Property<bool?>("Hide")
                        .HasColumnType("tinyint(1)")
                        .HasColumnOrder(206);

                    b.Property<int>("InternalTransferCode")
                        .HasColumnType("int")
                        .HasColumnOrder(3);

                    b.Property<string>("IpAddressCreated")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnOrder(204);

                    b.Property<string>("IpAddressModified")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnOrder(205);

                    b.Property<bool>("IsClosed")
                        .HasColumnType("tinyint(1)")
                        .HasColumnOrder(19);

                    b.Property<bool>("IsReturned")
                        .HasColumnType("tinyint(1)")
                        .HasColumnOrder(15);

                    b.Property<short?>("MenuCode")
                        .HasColumnType("smallint")
                        .HasColumnOrder(17);

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnOrder(201);

                    b.Property<string>("Prefix")
                        .HasMaxLength(10)
                        .HasColumnType("varchar(10)")
                        .HasColumnOrder(2);

                    b.Property<string>("Reference")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnOrder(10);

                    b.Property<int?>("ReferenceId")
                        .HasColumnType("int")
                        .HasColumnOrder(18);

                    b.Property<string>("RemarksAr")
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)")
                        .HasColumnOrder(13);

                    b.Property<string>("RemarksEn")
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)")
                        .HasColumnOrder(14);

                    b.Property<string>("ReturnReason")
                        .HasMaxLength(1000)
                        .HasColumnType("varchar(1000)")
                        .HasColumnOrder(16);

                    b.Property<string>("Suffix")
                        .HasMaxLength(10)
                        .HasColumnType("varchar(10)")
                        .HasColumnOrder(4);

                    b.Property<int>("ToStoreId")
                        .HasColumnType("int")
                        .HasColumnOrder(9);

                    b.Property<decimal>("TotalConsumerValue")
                        .HasColumnType("decimal(30,15)")
                        .HasColumnOrder(11);

                    b.Property<decimal>("TotalCostValue")
                        .HasColumnType("decimal(30,15)")
                        .HasColumnOrder(12);

                    b.Property<string>("UserNameCreated")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnOrder(202);

                    b.Property<string>("UserNameModified")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnOrder(203);

                    b.HasKey("InternalTransferId");

                    b.HasIndex("ArchiveHeaderId");

                    b.HasIndex("FromStoreId");

                    b.HasIndex("MenuCode");

                    b.HasIndex("ToStoreId");

                    b.ToTable("InternalTransferHeaders");
                });

            modelBuilder.Entity("Inventory.CoreOne.Models.Domain.InternalTransferReceiveDetail", b =>
                {
                    b.Property<int>("InternalTransferReceiveDetailId")
                        .HasColumnType("int")
                        .HasColumnOrder(1);

                    b.Property<string>("BarCode")
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)")
                        .HasColumnOrder(5);

                    b.Property<string>("BatchNumber")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnOrder(14);

                    b.Property<decimal>("ConsumerPrice")
                        .HasColumnType("decimal(30,15)")
                        .HasColumnOrder(8);

                    b.Property<decimal>("ConsumerValue")
                        .HasColumnType("decimal(30,15)")
                        .HasColumnOrder(9);

                    b.Property<decimal>("CostPackage")
                        .HasColumnType("decimal(30,15)")
                        .HasColumnOrder(11);

                    b.Property<decimal>("CostPrice")
                        .HasColumnType("decimal(30,15)")
                        .HasColumnOrder(10);

                    b.Property<decimal>("CostValue")
                        .HasColumnType("decimal(30,15)")
                        .HasColumnOrder(12);

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnOrder(200);

                    b.Property<DateTime?>("ExpireDate")
                        .HasColumnType("Date")
                        .HasColumnOrder(13);

                    b.Property<bool?>("Hide")
                        .HasColumnType("tinyint(1)")
                        .HasColumnOrder(206);

                    b.Property<int>("InternalTransferReceiveHeaderId")
                        .HasColumnType("int")
                        .HasColumnOrder(2);

                    b.Property<string>("IpAddressCreated")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnOrder(204);

                    b.Property<string>("IpAddressModified")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnOrder(205);

                    b.Property<int>("ItemId")
                        .HasColumnType("int")
                        .HasColumnOrder(3);

                    b.Property<int>("ItemPackageId")
                        .HasColumnType("int")
                        .HasColumnOrder(4);

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnOrder(201);

                    b.Property<decimal>("Packing")
                        .HasColumnType("decimal(30,15)")
                        .HasColumnOrder(6);

                    b.Property<decimal>("Quantity")
                        .HasColumnType("decimal(30,15)")
                        .HasColumnOrder(7);

                    b.Property<string>("UserNameCreated")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnOrder(202);

                    b.Property<string>("UserNameModified")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnOrder(203);

                    b.HasKey("InternalTransferReceiveDetailId");

                    b.HasIndex("InternalTransferReceiveHeaderId");

                    b.HasIndex("ItemId");

                    b.HasIndex("ItemPackageId");

                    b.ToTable("InternalTransferReceiveDetails");
                });

            modelBuilder.Entity("Inventory.CoreOne.Models.Domain.InternalTransferReceiveHeader", b =>
                {
                    b.Property<int>("InternalTransferReceiveHeaderId")
                        .HasColumnType("int")
                        .HasColumnOrder(1);

                    b.Property<int?>("ArchiveHeaderId")
                        .HasColumnType("int")
                        .HasColumnOrder(19);

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnOrder(200);

                    b.Property<DateTime>("DocumentDate")
                        .HasColumnType("Date")
                        .HasColumnOrder(7);

                    b.Property<string>("DocumentReference")
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)")
                        .HasColumnOrder(5);

                    b.Property<DateTime>("EntryDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnOrder(8);

                    b.Property<int>("FromStoreId")
                        .HasColumnType("int")
                        .HasColumnOrder(9);

                    b.Property<bool?>("Hide")
                        .HasColumnType("tinyint(1)")
                        .HasColumnOrder(206);

                    b.Property<int>("InternalTransferHeaderId")
                        .HasColumnType("int")
                        .HasColumnOrder(6);

                    b.Property<int>("InternalTransferReceiveCode")
                        .HasColumnType("int")
                        .HasColumnOrder(3);

                    b.Property<string>("IpAddressCreated")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnOrder(204);

                    b.Property<string>("IpAddressModified")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnOrder(205);

                    b.Property<bool>("IsClosed")
                        .HasColumnType("tinyint(1)")
                        .HasColumnOrder(18);

                    b.Property<short?>("MenuCode")
                        .HasColumnType("smallint")
                        .HasColumnOrder(16);

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnOrder(201);

                    b.Property<string>("Prefix")
                        .HasMaxLength(10)
                        .HasColumnType("varchar(10)")
                        .HasColumnOrder(2);

                    b.Property<string>("Reference")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnOrder(11);

                    b.Property<int?>("ReferenceId")
                        .HasColumnType("int")
                        .HasColumnOrder(17);

                    b.Property<string>("RemarksAr")
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)")
                        .HasColumnOrder(14);

                    b.Property<string>("RemarksEn")
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)")
                        .HasColumnOrder(15);

                    b.Property<string>("Suffix")
                        .HasMaxLength(10)
                        .HasColumnType("varchar(10)")
                        .HasColumnOrder(4);

                    b.Property<int>("ToStoreId")
                        .HasColumnType("int")
                        .HasColumnOrder(10);

                    b.Property<decimal>("TotalConsumerValue")
                        .HasColumnType("decimal(30,15)")
                        .HasColumnOrder(12);

                    b.Property<decimal>("TotalCostValue")
                        .HasColumnType("decimal(30,15)")
                        .HasColumnOrder(13);

                    b.Property<string>("UserNameCreated")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnOrder(202);

                    b.Property<string>("UserNameModified")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnOrder(203);

                    b.HasKey("InternalTransferReceiveHeaderId");

                    b.HasIndex("ArchiveHeaderId");

                    b.HasIndex("FromStoreId");

                    b.HasIndex("InternalTransferHeaderId");

                    b.HasIndex("MenuCode");

                    b.HasIndex("ToStoreId");

                    b.ToTable("InternalTransferReceiveHeaders");
                });

            modelBuilder.Entity("Inventory.CoreOne.Models.Domain.InventoryInDetail", b =>
                {
                    b.Property<int>("InventoryInDetailId")
                        .HasColumnType("int")
                        .HasColumnOrder(1);

                    b.Property<string>("BarCode")
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)")
                        .HasColumnOrder(5);

                    b.Property<string>("BatchNumber")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnOrder(14);

                    b.Property<decimal>("ConsumerPrice")
                        .HasColumnType("decimal(30,15)")
                        .HasColumnOrder(8);

                    b.Property<decimal>("ConsumerValue")
                        .HasColumnType("decimal(30,15)")
                        .HasColumnOrder(9);

                    b.Property<decimal>("CostPackage")
                        .HasColumnType("decimal(30,15)")
                        .HasColumnOrder(11);

                    b.Property<decimal>("CostPrice")
                        .HasColumnType("decimal(30,15)")
                        .HasColumnOrder(10);

                    b.Property<decimal>("CostValue")
                        .HasColumnType("decimal(30,15)")
                        .HasColumnOrder(12);

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnOrder(200);

                    b.Property<DateTime?>("ExpireDate")
                        .HasColumnType("Date")
                        .HasColumnOrder(13);

                    b.Property<bool?>("Hide")
                        .HasColumnType("tinyint(1)")
                        .HasColumnOrder(206);

                    b.Property<int>("InventoryInHeaderId")
                        .HasColumnType("int")
                        .HasColumnOrder(2);

                    b.Property<string>("IpAddressCreated")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnOrder(204);

                    b.Property<string>("IpAddressModified")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnOrder(205);

                    b.Property<bool?>("IsCostCenterDistributed")
                        .HasColumnType("tinyint(1)")
                        .HasColumnOrder(16);

                    b.Property<bool?>("IsLinkedToCostCenters")
                        .HasColumnType("tinyint(1)")
                        .HasColumnOrder(15);

                    b.Property<int>("ItemId")
                        .HasColumnType("int")
                        .HasColumnOrder(3);

                    b.Property<int>("ItemPackageId")
                        .HasColumnType("int")
                        .HasColumnOrder(4);

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnOrder(201);

                    b.Property<decimal>("Packing")
                        .HasColumnType("decimal(30,15)")
                        .HasColumnOrder(6);

                    b.Property<decimal>("Quantity")
                        .HasColumnType("decimal(30,15)")
                        .HasColumnOrder(7);

                    b.Property<string>("UserNameCreated")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnOrder(202);

                    b.Property<string>("UserNameModified")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnOrder(203);

                    b.HasKey("InventoryInDetailId");

                    b.HasIndex("InventoryInHeaderId");

                    b.HasIndex("ItemId");

                    b.HasIndex("ItemPackageId");

                    b.ToTable("InventoryInDetails");
                });

            modelBuilder.Entity("Inventory.CoreOne.Models.Domain.InventoryInHeader", b =>
                {
                    b.Property<int>("InventoryInHeaderId")
                        .HasColumnType("int")
                        .HasColumnOrder(1);

                    b.Property<int?>("ArchiveHeaderId")
                        .HasColumnType("int")
                        .HasColumnOrder(15);

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnOrder(200);

                    b.Property<DateTime>("DocumentDate")
                        .HasColumnType("Date")
                        .HasColumnOrder(7);

                    b.Property<string>("DocumentReference")
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)")
                        .HasColumnOrder(5);

                    b.Property<DateTime>("EntryDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnOrder(8);

                    b.Property<bool?>("Hide")
                        .HasColumnType("tinyint(1)")
                        .HasColumnOrder(206);

                    b.Property<int>("InventoryInCode")
                        .HasColumnType("int")
                        .HasColumnOrder(3);

                    b.Property<string>("IpAddressCreated")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnOrder(204);

                    b.Property<string>("IpAddressModified")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnOrder(205);

                    b.Property<bool>("IsClosed")
                        .HasColumnType("tinyint(1)")
                        .HasColumnOrder(14);

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnOrder(201);

                    b.Property<string>("Prefix")
                        .HasMaxLength(10)
                        .HasColumnType("varchar(10)")
                        .HasColumnOrder(2);

                    b.Property<string>("Reference")
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)")
                        .HasColumnOrder(9);

                    b.Property<string>("RemarksAr")
                        .HasMaxLength(300)
                        .HasColumnType("varchar(300)")
                        .HasColumnOrder(12);

                    b.Property<string>("RemarksEn")
                        .HasMaxLength(300)
                        .HasColumnType("varchar(300)")
                        .HasColumnOrder(13);

                    b.Property<int>("StoreId")
                        .HasColumnType("int")
                        .HasColumnOrder(6);

                    b.Property<string>("Suffix")
                        .HasMaxLength(10)
                        .HasColumnType("varchar(10)")
                        .HasColumnOrder(4);

                    b.Property<decimal>("TotalConsumerValue")
                        .HasColumnType("decimal(30,15)")
                        .HasColumnOrder(10);

                    b.Property<decimal>("TotalCostValue")
                        .HasColumnType("decimal(30,15)")
                        .HasColumnOrder(11);

                    b.Property<string>("UserNameCreated")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnOrder(202);

                    b.Property<string>("UserNameModified")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnOrder(203);

                    b.HasKey("InventoryInHeaderId");

                    b.HasIndex("ArchiveHeaderId");

                    b.HasIndex("StoreId");

                    b.ToTable("InventoryInHeaders");
                });

            modelBuilder.Entity("Inventory.CoreOne.Models.Domain.InventoryOutDetail", b =>
                {
                    b.Property<int>("InventoryOutDetailId")
                        .HasColumnType("int")
                        .HasColumnOrder(1);

                    b.Property<string>("BarCode")
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)")
                        .HasColumnOrder(5);

                    b.Property<string>("BatchNumber")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnOrder(14);

                    b.Property<decimal>("ConsumerPrice")
                        .HasColumnType("decimal(30,15)")
                        .HasColumnOrder(8);

                    b.Property<decimal>("ConsumerValue")
                        .HasColumnType("decimal(30,15)")
                        .HasColumnOrder(9);

                    b.Property<decimal>("CostPackage")
                        .HasColumnType("decimal(30,15)")
                        .HasColumnOrder(11);

                    b.Property<decimal>("CostPrice")
                        .HasColumnType("decimal(30,15)")
                        .HasColumnOrder(10);

                    b.Property<decimal>("CostValue")
                        .HasColumnType("decimal(30,15)")
                        .HasColumnOrder(12);

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnOrder(200);

                    b.Property<DateTime?>("ExpireDate")
                        .HasColumnType("Date")
                        .HasColumnOrder(13);

                    b.Property<bool?>("Hide")
                        .HasColumnType("tinyint(1)")
                        .HasColumnOrder(206);

                    b.Property<int>("InventoryOutHeaderId")
                        .HasColumnType("int")
                        .HasColumnOrder(2);

                    b.Property<string>("IpAddressCreated")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnOrder(204);

                    b.Property<string>("IpAddressModified")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnOrder(205);

                    b.Property<bool?>("IsCostCenterDistributed")
                        .HasColumnType("tinyint(1)")
                        .HasColumnOrder(16);

                    b.Property<bool?>("IsLinkedToCostCenters")
                        .HasColumnType("tinyint(1)")
                        .HasColumnOrder(15);

                    b.Property<int>("ItemId")
                        .HasColumnType("int")
                        .HasColumnOrder(3);

                    b.Property<int>("ItemPackageId")
                        .HasColumnType("int")
                        .HasColumnOrder(4);

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnOrder(201);

                    b.Property<decimal>("Packing")
                        .HasColumnType("decimal(30,15)")
                        .HasColumnOrder(6);

                    b.Property<decimal>("Quantity")
                        .HasColumnType("decimal(30,15)")
                        .HasColumnOrder(7);

                    b.Property<string>("UserNameCreated")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnOrder(202);

                    b.Property<string>("UserNameModified")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnOrder(203);

                    b.HasKey("InventoryOutDetailId");

                    b.HasIndex("InventoryOutHeaderId");

                    b.HasIndex("ItemId");

                    b.HasIndex("ItemPackageId");

                    b.ToTable("InventoryOutDetails");
                });

            modelBuilder.Entity("Inventory.CoreOne.Models.Domain.InventoryOutHeader", b =>
                {
                    b.Property<int>("InventoryOutHeaderId")
                        .HasColumnType("int")
                        .HasColumnOrder(1);

                    b.Property<int?>("ArchiveHeaderId")
                        .HasColumnType("int")
                        .HasColumnOrder(15);

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnOrder(200);

                    b.Property<DateTime>("DocumentDate")
                        .HasColumnType("Date")
                        .HasColumnOrder(7);

                    b.Property<string>("DocumentReference")
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)")
                        .HasColumnOrder(5);

                    b.Property<DateTime>("EntryDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnOrder(8);

                    b.Property<bool?>("Hide")
                        .HasColumnType("tinyint(1)")
                        .HasColumnOrder(206);

                    b.Property<int>("InventoryOutCode")
                        .HasColumnType("int")
                        .HasColumnOrder(3);

                    b.Property<string>("IpAddressCreated")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnOrder(204);

                    b.Property<string>("IpAddressModified")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnOrder(205);

                    b.Property<bool>("IsClosed")
                        .HasColumnType("tinyint(1)")
                        .HasColumnOrder(14);

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnOrder(201);

                    b.Property<string>("Prefix")
                        .HasMaxLength(10)
                        .HasColumnType("varchar(10)")
                        .HasColumnOrder(2);

                    b.Property<string>("Reference")
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)")
                        .HasColumnOrder(9);

                    b.Property<string>("RemarksAr")
                        .HasMaxLength(300)
                        .HasColumnType("varchar(300)")
                        .HasColumnOrder(12);

                    b.Property<string>("RemarksEn")
                        .HasMaxLength(300)
                        .HasColumnType("varchar(300)")
                        .HasColumnOrder(13);

                    b.Property<int>("StoreId")
                        .HasColumnType("int")
                        .HasColumnOrder(6);

                    b.Property<string>("Suffix")
                        .HasMaxLength(10)
                        .HasColumnType("varchar(10)")
                        .HasColumnOrder(4);

                    b.Property<decimal>("TotalConsumerValue")
                        .HasColumnType("decimal(30,15)")
                        .HasColumnOrder(10);

                    b.Property<decimal>("TotalCostValue")
                        .HasColumnType("decimal(30,15)")
                        .HasColumnOrder(11);

                    b.Property<string>("UserNameCreated")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnOrder(202);

                    b.Property<string>("UserNameModified")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnOrder(203);

                    b.HasKey("InventoryOutHeaderId");

                    b.HasIndex("ArchiveHeaderId");

                    b.HasIndex("StoreId");

                    b.ToTable("InventoryOutHeaders");
                });

            modelBuilder.Entity("Inventory.CoreOne.Models.Domain.ItemImportExcelHistory", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int")
                        .HasColumnOrder(1);

                    b.Property<int?>("ArchiveHeaderId")
                        .HasColumnType("int")
                        .HasColumnOrder(3);

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnOrder(200);

                    b.Property<bool?>("Hide")
                        .HasColumnType("tinyint(1)")
                        .HasColumnOrder(206);

                    b.Property<string>("IpAddressCreated")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnOrder(204);

                    b.Property<string>("IpAddressModified")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnOrder(205);

                    b.Property<int>("ItemCount")
                        .HasColumnType("int")
                        .HasColumnOrder(2);

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnOrder(201);

                    b.Property<string>("UserNameCreated")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnOrder(202);

                    b.Property<string>("UserNameModified")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnOrder(203);

                    b.HasKey("Id");

                    b.HasIndex("ArchiveHeaderId");

                    b.ToTable("ItemImportExcelHistories");
                });

            modelBuilder.Entity("Inventory.CoreOne.Models.Domain.StockTakingCarryOverDetail", b =>
                {
                    b.Property<int>("StockTakingCarryOverDetailId")
                        .HasColumnType("int")
                        .HasColumnOrder(1);

                    b.Property<string>("BarCode")
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)")
                        .HasColumnOrder(5);

                    b.Property<string>("BatchNumber")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnOrder(20);

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnOrder(200);

                    b.Property<decimal>("CurrentConsumerPrice")
                        .HasColumnType("decimal(30,15)")
                        .HasColumnOrder(10);

                    b.Property<decimal>("CurrentConsumerValue")
                        .HasColumnType("decimal(30,15)")
                        .HasColumnOrder(12);

                    b.Property<decimal>("CurrentCostPackage")
                        .HasColumnType("decimal(30,15)")
                        .HasColumnOrder(16);

                    b.Property<decimal>("CurrentCostPrice")
                        .HasColumnType("decimal(30,15)")
                        .HasColumnOrder(14);

                    b.Property<decimal>("CurrentCostValue")
                        .HasColumnType("decimal(30,15)")
                        .HasColumnOrder(18);

                    b.Property<decimal>("CurrentQuantity")
                        .HasColumnType("decimal(30,15)")
                        .HasColumnOrder(8);

                    b.Property<DateTime?>("ExpireDate")
                        .HasColumnType("Date")
                        .HasColumnOrder(19);

                    b.Property<bool?>("Hide")
                        .HasColumnType("tinyint(1)")
                        .HasColumnOrder(206);

                    b.Property<decimal>("InQuantity")
                        .HasColumnType("decimal(30,15)")
                        .HasColumnOrder(23);

                    b.Property<string>("IpAddressCreated")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnOrder(204);

                    b.Property<string>("IpAddressModified")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnOrder(205);

                    b.Property<int>("ItemId")
                        .HasColumnType("int")
                        .HasColumnOrder(3);

                    b.Property<int>("ItemPackageId")
                        .HasColumnType("int")
                        .HasColumnOrder(4);

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnOrder(201);

                    b.Property<decimal>("OldOpenQuantity")
                        .HasColumnType("decimal(30,15)")
                        .HasColumnOrder(22);

                    b.Property<decimal>("OpenQuantity")
                        .HasColumnType("decimal(30,15)")
                        .HasColumnOrder(21);

                    b.Property<decimal>("OutQuantity")
                        .HasColumnType("decimal(30,15)")
                        .HasColumnOrder(24);

                    b.Property<decimal>("Packing")
                        .HasColumnType("decimal(30,15)")
                        .HasColumnOrder(6);

                    b.Property<int>("StockTakingCarryOverHeaderId")
                        .HasColumnType("int")
                        .HasColumnOrder(2);

                    b.Property<decimal>("StockTakingConsumerPrice")
                        .HasColumnType("decimal(30,15)")
                        .HasColumnOrder(9);

                    b.Property<decimal>("StockTakingConsumerValue")
                        .HasColumnType("decimal(30,15)")
                        .HasColumnOrder(11);

                    b.Property<decimal>("StockTakingCostPackage")
                        .HasColumnType("decimal(30,15)")
                        .HasColumnOrder(15);

                    b.Property<decimal>("StockTakingCostPrice")
                        .HasColumnType("decimal(30,15)")
                        .HasColumnOrder(13);

                    b.Property<decimal>("StockTakingCostValue")
                        .HasColumnType("decimal(30,15)")
                        .HasColumnOrder(17);

                    b.Property<decimal>("StockTakingQuantity")
                        .HasColumnType("decimal(30,15)")
                        .HasColumnOrder(7);

                    b.Property<string>("UserNameCreated")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnOrder(202);

                    b.Property<string>("UserNameModified")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnOrder(203);

                    b.HasKey("StockTakingCarryOverDetailId");

                    b.HasIndex("ItemId");

                    b.HasIndex("ItemPackageId");

                    b.HasIndex("StockTakingCarryOverHeaderId");

                    b.ToTable("StockTakingCarryOverDetails");
                });

            modelBuilder.Entity("Inventory.CoreOne.Models.Domain.StockTakingCarryOverEffectDetail", b =>
                {
                    b.Property<int>("StockTakingCarryOverEffectDetailId")
                        .HasColumnType("int")
                        .HasColumnOrder(1);

                    b.Property<string>("BatchNumber")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnOrder(6);

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnOrder(200);

                    b.Property<DateTime?>("ExpireDate")
                        .HasColumnType("Date")
                        .HasColumnOrder(5);

                    b.Property<bool?>("Hide")
                        .HasColumnType("tinyint(1)")
                        .HasColumnOrder(206);

                    b.Property<decimal>("InQuantity")
                        .HasColumnType("decimal(30,15)")
                        .HasColumnOrder(9);

                    b.Property<string>("IpAddressCreated")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnOrder(204);

                    b.Property<string>("IpAddressModified")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnOrder(205);

                    b.Property<int>("ItemId")
                        .HasColumnType("int")
                        .HasColumnOrder(3);

                    b.Property<int>("ItemPackageId")
                        .HasColumnType("int")
                        .HasColumnOrder(4);

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnOrder(201);

                    b.Property<decimal>("OldOpenQuantity")
                        .HasColumnType("decimal(30,15)")
                        .HasColumnOrder(8);

                    b.Property<decimal>("OpenQuantity")
                        .HasColumnType("decimal(30,15)")
                        .HasColumnOrder(7);

                    b.Property<decimal>("OutQuantity")
                        .HasColumnType("decimal(30,15)")
                        .HasColumnOrder(10);

                    b.Property<int>("StockTakingCarryOverHeaderId")
                        .HasColumnType("int")
                        .HasColumnOrder(2);

                    b.Property<string>("UserNameCreated")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnOrder(202);

                    b.Property<string>("UserNameModified")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnOrder(203);

                    b.HasKey("StockTakingCarryOverEffectDetailId");

                    b.HasIndex("ItemId");

                    b.HasIndex("ItemPackageId");

                    b.HasIndex("StockTakingCarryOverHeaderId");

                    b.ToTable("StockTakingCarryOverEffectDetails");
                });

            modelBuilder.Entity("Inventory.CoreOne.Models.Domain.StockTakingCarryOverHeader", b =>
                {
                    b.Property<int>("StockTakingCarryOverHeaderId")
                        .HasColumnType("int")
                        .HasColumnOrder(1);

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnOrder(200);

                    b.Property<DateTime>("DocumentDate")
                        .HasColumnType("Date")
                        .HasColumnOrder(12);

                    b.Property<string>("DocumentReference")
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)")
                        .HasColumnOrder(7);

                    b.Property<DateTime>("EntryDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnOrder(13);

                    b.Property<bool?>("Hide")
                        .HasColumnType("tinyint(1)")
                        .HasColumnOrder(206);

                    b.Property<string>("IpAddressCreated")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnOrder(204);

                    b.Property<string>("IpAddressModified")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnOrder(205);

                    b.Property<bool>("IsAllItemsAffected")
                        .HasColumnType("tinyint(1)")
                        .HasColumnOrder(11);

                    b.Property<bool>("IsOpenBalance")
                        .HasColumnType("tinyint(1)")
                        .HasColumnOrder(10);

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnOrder(201);

                    b.Property<string>("Prefix")
                        .HasMaxLength(10)
                        .HasColumnType("varchar(10)")
                        .HasColumnOrder(4);

                    b.Property<string>("Reference")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnOrder(14);

                    b.Property<string>("RemarksAr")
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)")
                        .HasColumnOrder(19);

                    b.Property<string>("RemarksEn")
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)")
                        .HasColumnOrder(20);

                    b.Property<int>("StockTakingCarryOverCode")
                        .HasColumnType("int")
                        .HasColumnOrder(5);

                    b.Property<string>("StockTakingCarryOverNameAr")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnOrder(8);

                    b.Property<string>("StockTakingCarryOverNameEn")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnOrder(9);

                    b.Property<string>("StockTakingList")
                        .HasMaxLength(10000)
                        .HasColumnType("varchar(10000)")
                        .HasColumnOrder(2);

                    b.Property<int>("StoreId")
                        .HasColumnType("int")
                        .HasColumnOrder(3);

                    b.Property<string>("Suffix")
                        .HasMaxLength(10)
                        .HasColumnType("varchar(10)")
                        .HasColumnOrder(6);

                    b.Property<decimal>("TotalCurrentBalanceConsumerValue")
                        .HasColumnType("decimal(30,15)")
                        .HasColumnOrder(15);

                    b.Property<decimal>("TotalCurrentBalanceCostValue")
                        .HasColumnType("decimal(30,15)")
                        .HasColumnOrder(17);

                    b.Property<decimal>("TotalStockTakingConsumerValue")
                        .HasColumnType("decimal(30,15)")
                        .HasColumnOrder(16);

                    b.Property<decimal>("TotalStockTakingCostValue")
                        .HasColumnType("decimal(30,15)")
                        .HasColumnOrder(18);

                    b.Property<string>("UserNameCreated")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnOrder(202);

                    b.Property<string>("UserNameModified")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnOrder(203);

                    b.HasKey("StockTakingCarryOverHeaderId");

                    b.HasIndex("StoreId");

                    b.ToTable("StockTakingCarryOverHeaders");
                });

            modelBuilder.Entity("Inventory.CoreOne.Models.Domain.StockTakingDetail", b =>
                {
                    b.Property<int>("StockTakingDetailId")
                        .HasColumnType("int")
                        .HasColumnOrder(1);

                    b.Property<string>("BarCode")
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)")
                        .HasColumnOrder(5);

                    b.Property<string>("BatchNumber")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnOrder(14);

                    b.Property<decimal>("ConsumerPrice")
                        .HasColumnType("decimal(30,15)")
                        .HasColumnOrder(8);

                    b.Property<decimal>("ConsumerValue")
                        .HasColumnType("decimal(30,15)")
                        .HasColumnOrder(9);

                    b.Property<decimal>("CostPackage")
                        .HasColumnType("decimal(30,15)")
                        .HasColumnOrder(11);

                    b.Property<decimal>("CostPrice")
                        .HasColumnType("decimal(30,15)")
                        .HasColumnOrder(10);

                    b.Property<decimal>("CostValue")
                        .HasColumnType("decimal(30,15)")
                        .HasColumnOrder(12);

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnOrder(200);

                    b.Property<DateTime?>("ExpireDate")
                        .HasColumnType("Date")
                        .HasColumnOrder(13);

                    b.Property<bool?>("Hide")
                        .HasColumnType("tinyint(1)")
                        .HasColumnOrder(206);

                    b.Property<string>("IpAddressCreated")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnOrder(204);

                    b.Property<string>("IpAddressModified")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnOrder(205);

                    b.Property<int>("ItemId")
                        .HasColumnType("int")
                        .HasColumnOrder(3);

                    b.Property<int>("ItemPackageId")
                        .HasColumnType("int")
                        .HasColumnOrder(4);

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnOrder(201);

                    b.Property<decimal>("Packing")
                        .HasColumnType("decimal(30,15)")
                        .HasColumnOrder(6);

                    b.Property<decimal>("Quantity")
                        .HasColumnType("decimal(30,15)")
                        .HasColumnOrder(7);

                    b.Property<int>("StockTakingHeaderId")
                        .HasColumnType("int")
                        .HasColumnOrder(2);

                    b.Property<string>("UserNameCreated")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnOrder(202);

                    b.Property<string>("UserNameModified")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnOrder(203);

                    b.HasKey("StockTakingDetailId");

                    b.HasIndex("ItemId");

                    b.HasIndex("ItemPackageId");

                    b.HasIndex("StockTakingHeaderId");

                    b.ToTable("StockTakingDetails");
                });

            modelBuilder.Entity("Inventory.CoreOne.Models.Domain.StockTakingHeader", b =>
                {
                    b.Property<int>("StockTakingHeaderId")
                        .HasColumnType("int")
                        .HasColumnOrder(1);

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnOrder(200);

                    b.Property<string>("DocumentReference")
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)")
                        .HasColumnOrder(5);

                    b.Property<DateTime>("EntryDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnOrder(11);

                    b.Property<bool?>("Hide")
                        .HasColumnType("tinyint(1)")
                        .HasColumnOrder(206);

                    b.Property<string>("IpAddressCreated")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnOrder(204);

                    b.Property<string>("IpAddressModified")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnOrder(205);

                    b.Property<bool>("IsCarriedOver")
                        .HasColumnType("tinyint(1)")
                        .HasColumnOrder(19);

                    b.Property<bool>("IsClosed")
                        .HasColumnType("tinyint(1)")
                        .HasColumnOrder(17);

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)")
                        .HasColumnOrder(18);

                    b.Property<bool>("IsOpenBalance")
                        .HasColumnType("tinyint(1)")
                        .HasColumnOrder(9);

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnOrder(201);

                    b.Property<string>("Prefix")
                        .HasMaxLength(10)
                        .HasColumnType("varchar(10)")
                        .HasColumnOrder(2);

                    b.Property<string>("Reference")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnOrder(12);

                    b.Property<string>("RemarksAr")
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)")
                        .HasColumnOrder(15);

                    b.Property<string>("RemarksEn")
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)")
                        .HasColumnOrder(16);

                    b.Property<DateTime>("StockDate")
                        .HasColumnType("Date")
                        .HasColumnOrder(10);

                    b.Property<int>("StockTakingCode")
                        .HasColumnType("int")
                        .HasColumnOrder(3);

                    b.Property<string>("StockTakingNameAr")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnOrder(7);

                    b.Property<string>("StockTakingNameEn")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnOrder(8);

                    b.Property<int>("StoreId")
                        .HasColumnType("int")
                        .HasColumnOrder(6);

                    b.Property<string>("Suffix")
                        .HasMaxLength(10)
                        .HasColumnType("varchar(10)")
                        .HasColumnOrder(4);

                    b.Property<decimal>("TotalConsumerValue")
                        .HasColumnType("decimal(30,15)")
                        .HasColumnOrder(13);

                    b.Property<decimal>("TotalCostValue")
                        .HasColumnType("decimal(30,15)")
                        .HasColumnOrder(14);

                    b.Property<string>("UserNameCreated")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnOrder(202);

                    b.Property<string>("UserNameModified")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnOrder(203);

                    b.HasKey("StockTakingHeaderId");

                    b.HasIndex("StoreId");

                    b.ToTable("StockTakingHeaders");
                });

            modelBuilder.Entity("Purchases.CoreOne.Models.Domain.InvoiceStockIn", b =>
                {
                    b.Property<int>("InvoiceStockInId")
                        .HasColumnType("int")
                        .HasColumnOrder(1);

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnOrder(200);

                    b.Property<bool?>("Hide")
                        .HasColumnType("tinyint(1)")
                        .HasColumnOrder(206);

                    b.Property<string>("IpAddressCreated")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnOrder(204);

                    b.Property<string>("IpAddressModified")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnOrder(205);

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnOrder(201);

                    b.Property<int>("PurchaseInvoiceHeaderId")
                        .HasColumnType("int")
                        .HasColumnOrder(2);

                    b.Property<int>("StockInHeaderId")
                        .HasColumnType("int")
                        .HasColumnOrder(3);

                    b.Property<string>("UserNameCreated")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnOrder(202);

                    b.Property<string>("UserNameModified")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnOrder(203);

                    b.HasKey("InvoiceStockInId");

                    b.HasIndex("PurchaseInvoiceHeaderId");

                    b.HasIndex("StockInHeaderId");

                    b.ToTable("InvoiceStockIns");
                });

            modelBuilder.Entity("Purchases.CoreOne.Models.Domain.InvoiceStockInReturn", b =>
                {
                    b.Property<int>("InvoiceStockInReturnId")
                        .HasColumnType("int")
                        .HasColumnOrder(1);

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnOrder(200);

                    b.Property<bool?>("Hide")
                        .HasColumnType("tinyint(1)")
                        .HasColumnOrder(206);

                    b.Property<string>("IpAddressCreated")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnOrder(204);

                    b.Property<string>("IpAddressModified")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnOrder(205);

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnOrder(201);

                    b.Property<int>("PurchaseInvoiceReturnHeaderId")
                        .HasColumnType("int")
                        .HasColumnOrder(3);

                    b.Property<int>("StockInReturnHeaderId")
                        .HasColumnType("int")
                        .HasColumnOrder(2);

                    b.Property<string>("UserNameCreated")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnOrder(202);

                    b.Property<string>("UserNameModified")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnOrder(203);

                    b.HasKey("InvoiceStockInReturnId");

                    b.HasIndex("PurchaseInvoiceReturnHeaderId");

                    b.HasIndex("StockInReturnHeaderId");

                    b.ToTable("InvoiceStockInReturns");
                });

            modelBuilder.Entity("Purchases.CoreOne.Models.Domain.ProductRequestDetail", b =>
                {
                    b.Property<int>("ProductRequestDetailId")
                        .HasColumnType("int")
                        .HasColumnOrder(1);

                    b.Property<string>("BarCode")
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)")
                        .HasColumnOrder(7);

                    b.Property<decimal>("ConsumerPrice")
                        .HasColumnType("decimal(30,15)")
                        .HasColumnOrder(10);

                    b.Property<decimal>("ConsumerValue")
                        .HasColumnType("decimal(30,15)")
                        .HasColumnOrder(11);

                    b.Property<int?>("CostCenterId")
                        .HasColumnType("int")
                        .HasColumnOrder(3);

                    b.Property<decimal>("CostPackage")
                        .HasColumnType("decimal(30,15)")
                        .HasColumnOrder(13);

                    b.Property<decimal>("CostPrice")
                        .HasColumnType("decimal(30,15)")
                        .HasColumnOrder(12);

                    b.Property<decimal>("CostValue")
                        .HasColumnType("decimal(30,15)")
                        .HasColumnOrder(14);

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnOrder(200);

                    b.Property<bool?>("Hide")
                        .HasColumnType("tinyint(1)")
                        .HasColumnOrder(206);

                    b.Property<string>("IpAddressCreated")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnOrder(204);

                    b.Property<string>("IpAddressModified")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnOrder(205);

                    b.Property<bool>("IsItemVatInclusive")
                        .HasColumnType("tinyint(1)")
                        .HasColumnOrder(6);

                    b.Property<int>("ItemId")
                        .HasColumnType("int")
                        .HasColumnOrder(4);

                    b.Property<string>("ItemNote")
                        .HasMaxLength(2000)
                        .HasColumnType("varchar(2000)")
                        .HasColumnOrder(16);

                    b.Property<int>("ItemPackageId")
                        .HasColumnType("int")
                        .HasColumnOrder(5);

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnOrder(201);

                    b.Property<string>("Notes")
                        .HasMaxLength(2000)
                        .HasColumnType("varchar(2000)")
                        .HasColumnOrder(15);

                    b.Property<decimal>("Packing")
                        .HasColumnType("decimal(30,15)")
                        .HasColumnOrder(8);

                    b.Property<int>("ProductRequestHeaderId")
                        .HasColumnType("int")
                        .HasColumnOrder(2);

                    b.Property<decimal>("Quantity")
                        .HasColumnType("decimal(30,15)")
                        .HasColumnOrder(9);

                    b.Property<string>("UserNameCreated")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnOrder(202);

                    b.Property<string>("UserNameModified")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnOrder(203);

                    b.HasKey("ProductRequestDetailId");

                    b.HasIndex("CostCenterId");

                    b.HasIndex("ItemId");

                    b.HasIndex("ItemPackageId");

                    b.HasIndex("ProductRequestHeaderId");

                    b.ToTable("ProductRequestDetails");
                });

            modelBuilder.Entity("Purchases.CoreOne.Models.Domain.ProductRequestHeader", b =>
                {
                    b.Property<int>("ProductRequestHeaderId")
                        .HasColumnType("int")
                        .HasColumnOrder(1);

                    b.Property<int?>("ArchiveHeaderId")
                        .HasColumnType("int")
                        .HasColumnOrder(15);

                    b.Property<decimal>("ConsumerValue")
                        .HasColumnType("decimal(30,15)")
                        .HasColumnOrder(10);

                    b.Property<decimal>("CostValue")
                        .HasColumnType("decimal(30,15)")
                        .HasColumnOrder(11);

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnOrder(200);

                    b.Property<int>("DocumentCode")
                        .HasColumnType("int")
                        .HasColumnOrder(3);

                    b.Property<DateTime>("DocumentDate")
                        .HasColumnType("Date")
                        .HasColumnOrder(7);

                    b.Property<string>("DocumentReference")
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)")
                        .HasColumnOrder(5);

                    b.Property<DateTime>("EntryDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnOrder(8);

                    b.Property<bool?>("Hide")
                        .HasColumnType("tinyint(1)")
                        .HasColumnOrder(206);

                    b.Property<string>("IpAddressCreated")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnOrder(204);

                    b.Property<string>("IpAddressModified")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnOrder(205);

                    b.Property<bool>("IsClosed")
                        .HasColumnType("tinyint(1)")
                        .HasColumnOrder(14);

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnOrder(201);

                    b.Property<string>("Prefix")
                        .HasMaxLength(10)
                        .HasColumnType("varchar(10)")
                        .HasColumnOrder(2);

                    b.Property<string>("Reference")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnOrder(9);

                    b.Property<string>("RemarksAr")
                        .HasMaxLength(2000)
                        .HasColumnType("varchar(2000)")
                        .HasColumnOrder(12);

                    b.Property<string>("RemarksEn")
                        .HasMaxLength(2000)
                        .HasColumnType("varchar(2000)")
                        .HasColumnOrder(13);

                    b.Property<int>("StoreId")
                        .HasColumnType("int")
                        .HasColumnOrder(6);

                    b.Property<string>("Suffix")
                        .HasMaxLength(10)
                        .HasColumnType("varchar(10)")
                        .HasColumnOrder(4);

                    b.Property<string>("UserNameCreated")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnOrder(202);

                    b.Property<string>("UserNameModified")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnOrder(203);

                    b.HasKey("ProductRequestHeaderId");

                    b.HasIndex("ArchiveHeaderId");

                    b.HasIndex("StoreId");

                    b.ToTable("ProductRequestHeaders");
                });

            modelBuilder.Entity("Purchases.CoreOne.Models.Domain.ProductRequestPriceDetail", b =>
                {
                    b.Property<int>("ProductRequestPriceDetailId")
                        .HasColumnType("int")
                        .HasColumnOrder(1);

                    b.Property<string>("BarCode")
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)")
                        .HasColumnOrder(7);

                    b.Property<decimal>("ConsumerPrice")
                        .HasColumnType("decimal(30,15)")
                        .HasColumnOrder(23);

                    b.Property<int?>("CostCenterId")
                        .HasColumnType("int")
                        .HasColumnOrder(3);

                    b.Property<decimal>("CostPackage")
                        .HasColumnType("decimal(30,15)")
                        .HasColumnOrder(25);

                    b.Property<decimal>("CostPrice")
                        .HasColumnType("decimal(30,15)")
                        .HasColumnOrder(24);

                    b.Property<decimal>("CostValue")
                        .HasColumnType("decimal(30,15)")
                        .HasColumnOrder(26);

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnOrder(200);

                    b.Property<decimal>("GrossValue")
                        .HasColumnType("decimal(30,15)")
                        .HasColumnOrder(16);

                    b.Property<decimal>("HeaderDiscountValue")
                        .HasColumnType("decimal(30,15)")
                        .HasColumnOrder(15);

                    b.Property<bool?>("Hide")
                        .HasColumnType("tinyint(1)")
                        .HasColumnOrder(206);

                    b.Property<string>("IpAddressCreated")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnOrder(204);

                    b.Property<string>("IpAddressModified")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnOrder(205);

                    b.Property<bool>("IsItemVatInclusive")
                        .HasColumnType("tinyint(1)")
                        .HasColumnOrder(6);

                    b.Property<decimal>("ItemDiscountPercent")
                        .HasColumnType("decimal(30,15)")
                        .HasColumnOrder(12);

                    b.Property<decimal>("ItemDiscountValue")
                        .HasColumnType("decimal(30,15)")
                        .HasColumnOrder(13);

                    b.Property<int>("ItemId")
                        .HasColumnType("int")
                        .HasColumnOrder(4);

                    b.Property<string>("ItemNote")
                        .HasMaxLength(2000)
                        .HasColumnType("varchar(2000)")
                        .HasColumnOrder(28);

                    b.Property<int>("ItemPackageId")
                        .HasColumnType("int")
                        .HasColumnOrder(5);

                    b.Property<decimal>("LastPurchasePrice")
                        .HasColumnType("decimal(30,15)")
                        .HasColumnOrder(27);

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnOrder(201);

                    b.Property<decimal>("NetValue")
                        .HasColumnType("decimal(30,15)")
                        .HasColumnOrder(21);

                    b.Property<string>("Notes")
                        .HasMaxLength(2000)
                        .HasColumnType("varchar(2000)")
                        .HasColumnOrder(22);

                    b.Property<decimal>("OtherTaxValue")
                        .HasColumnType("decimal(30,15)")
                        .HasColumnOrder(20);

                    b.Property<decimal>("Packing")
                        .HasColumnType("decimal(30,15)")
                        .HasColumnOrder(8);

                    b.Property<int>("ProductRequestPriceHeaderId")
                        .HasColumnType("int")
                        .HasColumnOrder(2);

                    b.Property<decimal>("Quantity")
                        .HasColumnType("decimal(30,15)")
                        .HasColumnOrder(9);

                    b.Property<decimal>("RequestedPrice")
                        .HasColumnType("decimal(30,15)")
                        .HasColumnOrder(10);

                    b.Property<decimal>("SubNetValue")
                        .HasColumnType("decimal(30,15)")
                        .HasColumnOrder(19);

                    b.Property<decimal>("TotalValue")
                        .HasColumnType("decimal(30,15)")
                        .HasColumnOrder(11);

                    b.Property<decimal>("TotalValueAfterDiscount")
                        .HasColumnType("decimal(30,15)")
                        .HasColumnOrder(14);

                    b.Property<string>("UserNameCreated")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnOrder(202);

                    b.Property<string>("UserNameModified")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnOrder(203);

                    b.Property<decimal>("VatPercent")
                        .HasColumnType("decimal(30,15)")
                        .HasColumnOrder(17);

                    b.Property<decimal>("VatValue")
                        .HasColumnType("decimal(30,15)")
                        .HasColumnOrder(18);

                    b.HasKey("ProductRequestPriceDetailId");

                    b.HasIndex("CostCenterId");

                    b.HasIndex("ItemId");

                    b.HasIndex("ItemPackageId");

                    b.HasIndex("ProductRequestPriceHeaderId");

                    b.ToTable("ProductRequestPriceDetails");
                });

            modelBuilder.Entity("Purchases.CoreOne.Models.Domain.ProductRequestPriceDetailTax", b =>
                {
                    b.Property<int>("ProductRequestPriceDetailTaxId")
                        .HasColumnType("int")
                        .HasColumnOrder(1);

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnOrder(200);

                    b.Property<int>("DebitAccountId")
                        .HasColumnType("int")
                        .HasColumnOrder(5);

                    b.Property<bool?>("Hide")
                        .HasColumnType("tinyint(1)")
                        .HasColumnOrder(206);

                    b.Property<string>("IpAddressCreated")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnOrder(204);

                    b.Property<string>("IpAddressModified")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnOrder(205);

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnOrder(201);

                    b.Property<int>("ProductRequestPriceDetailId")
                        .HasColumnType("int")
                        .HasColumnOrder(2);

                    b.Property<bool>("TaxAfterVatInclusive")
                        .HasColumnType("tinyint(1)")
                        .HasColumnOrder(4);

                    b.Property<int>("TaxId")
                        .HasColumnType("int")
                        .HasColumnOrder(3);

                    b.Property<decimal>("TaxPercent")
                        .HasColumnType("decimal(30,15)")
                        .HasColumnOrder(6);

                    b.Property<decimal>("TaxValue")
                        .HasColumnType("decimal(30,15)")
                        .HasColumnOrder(7);

                    b.Property<string>("UserNameCreated")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnOrder(202);

                    b.Property<string>("UserNameModified")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnOrder(203);

                    b.HasKey("ProductRequestPriceDetailTaxId");

                    b.HasIndex("DebitAccountId");

                    b.HasIndex("ProductRequestPriceDetailId");

                    b.HasIndex("TaxId");

                    b.ToTable("ProductRequestPriceDetailTaxes");
                });

            modelBuilder.Entity("Purchases.CoreOne.Models.Domain.ProductRequestPriceHeader", b =>
                {
                    b.Property<int>("ProductRequestPriceHeaderId")
                        .HasColumnType("int")
                        .HasColumnOrder(1);

                    b.Property<decimal>("AdditionalDiscountValue")
                        .HasColumnType("decimal(30,15)")
                        .HasColumnOrder(21);

                    b.Property<int?>("ArchiveHeaderId")
                        .HasColumnType("int")
                        .HasColumnOrder(28);

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnOrder(200);

                    b.Property<decimal>("DiscountPercent")
                        .HasColumnType("decimal(30,15)")
                        .HasColumnOrder(13);

                    b.Property<decimal>("DiscountValue")
                        .HasColumnType("decimal(30,15)")
                        .HasColumnOrder(14);

                    b.Property<int>("DocumentCode")
                        .HasColumnType("int")
                        .HasColumnOrder(3);

                    b.Property<DateTime>("DocumentDate")
                        .HasColumnType("Date")
                        .HasColumnOrder(10);

                    b.Property<string>("DocumentReference")
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)")
                        .HasColumnOrder(7);

                    b.Property<DateTime>("EntryDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnOrder(11);

                    b.Property<decimal>("GrossValue")
                        .HasColumnType("decimal(30,15)")
                        .HasColumnOrder(16);

                    b.Property<bool?>("Hide")
                        .HasColumnType("tinyint(1)")
                        .HasColumnOrder(206);

                    b.Property<string>("IpAddressCreated")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnOrder(204);

                    b.Property<string>("IpAddressModified")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnOrder(205);

                    b.Property<bool>("IsClosed")
                        .HasColumnType("tinyint(1)")
                        .HasColumnOrder(27);

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnOrder(201);

                    b.Property<decimal>("NetValue")
                        .HasColumnType("decimal(30,15)")
                        .HasColumnOrder(22);

                    b.Property<decimal>("NetValueBeforeAdditionalDiscount")
                        .HasColumnType("decimal(30,15)")
                        .HasColumnOrder(20);

                    b.Property<decimal>("OtherTaxValue")
                        .HasColumnType("decimal(30,15)")
                        .HasColumnOrder(19);

                    b.Property<string>("Prefix")
                        .HasMaxLength(10)
                        .HasColumnType("varchar(10)")
                        .HasColumnOrder(2);

                    b.Property<int?>("ProductRequestHeaderId")
                        .HasColumnType("int")
                        .HasColumnOrder(5);

                    b.Property<string>("Reference")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnOrder(24);

                    b.Property<string>("RemarksAr")
                        .HasMaxLength(2000)
                        .HasColumnType("varchar(2000)")
                        .HasColumnOrder(25);

                    b.Property<string>("RemarksEn")
                        .HasMaxLength(2000)
                        .HasColumnType("varchar(2000)")
                        .HasColumnOrder(26);

                    b.Property<int>("StoreId")
                        .HasColumnType("int")
                        .HasColumnOrder(8);

                    b.Property<decimal>("SubNetValue")
                        .HasColumnType("decimal(30,15)")
                        .HasColumnOrder(18);

                    b.Property<string>("Suffix")
                        .HasMaxLength(10)
                        .HasColumnType("varchar(10)")
                        .HasColumnOrder(4);

                    b.Property<int>("SupplierId")
                        .HasColumnType("int")
                        .HasColumnOrder(6);

                    b.Property<byte>("TaxTypeId")
                        .HasColumnType("tinyint unsigned")
                        .HasColumnOrder(9);

                    b.Property<decimal>("TotalCostValue")
                        .HasColumnType("decimal(30,15)")
                        .HasColumnOrder(23);

                    b.Property<decimal>("TotalItemDiscount")
                        .HasColumnType("decimal(30,15)")
                        .HasColumnOrder(15);

                    b.Property<decimal>("TotalValue")
                        .HasColumnType("decimal(30,15)")
                        .HasColumnOrder(12);

                    b.Property<string>("UserNameCreated")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnOrder(202);

                    b.Property<string>("UserNameModified")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnOrder(203);

                    b.Property<decimal>("VatValue")
                        .HasColumnType("decimal(30,15)")
                        .HasColumnOrder(17);

                    b.HasKey("ProductRequestPriceHeaderId");

                    b.HasIndex("ArchiveHeaderId");

                    b.HasIndex("ProductRequestHeaderId");

                    b.HasIndex("StoreId");

                    b.HasIndex("SupplierId");

                    b.HasIndex("TaxTypeId");

                    b.ToTable("ProductRequestPriceHeaders");
                });

            modelBuilder.Entity("Purchases.CoreOne.Models.Domain.PurchaseInvoiceDetail", b =>
                {
                    b.Property<int>("PurchaseInvoiceDetailId")
                        .HasColumnType("int")
                        .HasColumnOrder(1);

                    b.Property<string>("BarCode")
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)")
                        .HasColumnOrder(7);

                    b.Property<string>("BatchNumber")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnOrder(10);

                    b.Property<decimal>("BonusQuantity")
                        .HasColumnType("decimal(30,15)")
                        .HasColumnOrder(12);

                    b.Property<decimal>("ConsumerPrice")
                        .HasColumnType("decimal(30,15)")
                        .HasColumnOrder(28);

                    b.Property<int?>("CostCenterId")
                        .HasColumnType("int")
                        .HasColumnOrder(3);

                    b.Property<decimal>("CostPackage")
                        .HasColumnType("decimal(30,15)")
                        .HasColumnOrder(30);

                    b.Property<decimal>("CostPrice")
                        .HasColumnType("decimal(30,15)")
                        .HasColumnOrder(29);

                    b.Property<decimal>("CostValue")
                        .HasColumnType("decimal(30,15)")
                        .HasColumnOrder(31);

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnOrder(200);

                    b.Property<DateTime?>("ExpireDate")
                        .HasColumnType("Date")
                        .HasColumnOrder(9);

                    b.Property<decimal>("GrossValue")
                        .HasColumnType("decimal(30,15)")
                        .HasColumnOrder(19);

                    b.Property<decimal>("HeaderDiscountValue")
                        .HasColumnType("decimal(30,15)")
                        .HasColumnOrder(18);

                    b.Property<bool?>("Hide")
                        .HasColumnType("tinyint(1)")
                        .HasColumnOrder(206);

                    b.Property<string>("IpAddressCreated")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnOrder(204);

                    b.Property<string>("IpAddressModified")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnOrder(205);

                    b.Property<bool>("IsItemVatInclusive")
                        .HasColumnType("tinyint(1)")
                        .HasColumnOrder(6);

                    b.Property<decimal>("ItemDiscountPercent")
                        .HasColumnType("decimal(30,15)")
                        .HasColumnOrder(15);

                    b.Property<decimal>("ItemDiscountValue")
                        .HasColumnType("decimal(30,15)")
                        .HasColumnOrder(16);

                    b.Property<decimal>("ItemExpensePercent")
                        .HasColumnType("decimal(30,15)")
                        .HasColumnOrder(25);

                    b.Property<decimal>("ItemExpenseValue")
                        .HasColumnType("decimal(30,15)")
                        .HasColumnOrder(26);

                    b.Property<int>("ItemId")
                        .HasColumnType("int")
                        .HasColumnOrder(4);

                    b.Property<string>("ItemNote")
                        .HasMaxLength(2000)
                        .HasColumnType("varchar(2000)")
                        .HasColumnOrder(33);

                    b.Property<int>("ItemPackageId")
                        .HasColumnType("int")
                        .HasColumnOrder(5);

                    b.Property<decimal>("LastPurchasePrice")
                        .HasColumnType("decimal(30,15)")
                        .HasColumnOrder(32);

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnOrder(201);

                    b.Property<decimal>("NetValue")
                        .HasColumnType("decimal(30,15)")
                        .HasColumnOrder(24);

                    b.Property<string>("Notes")
                        .HasMaxLength(2000)
                        .HasColumnType("varchar(2000)")
                        .HasColumnOrder(27);

                    b.Property<decimal>("OtherTaxValue")
                        .HasColumnType("decimal(30,15)")
                        .HasColumnOrder(23);

                    b.Property<decimal>("Packing")
                        .HasColumnType("decimal(30,15)")
                        .HasColumnOrder(8);

                    b.Property<int>("PurchaseInvoiceHeaderId")
                        .HasColumnType("int")
                        .HasColumnOrder(2);

                    b.Property<decimal>("PurchasePrice")
                        .HasColumnType("decimal(30,15)")
                        .HasColumnOrder(13);

                    b.Property<decimal>("Quantity")
                        .HasColumnType("decimal(30,15)")
                        .HasColumnOrder(11);

                    b.Property<decimal>("SubNetValue")
                        .HasColumnType("decimal(30,15)")
                        .HasColumnOrder(22);

                    b.Property<decimal>("TotalValue")
                        .HasColumnType("decimal(30,15)")
                        .HasColumnOrder(14);

                    b.Property<decimal>("TotalValueAfterDiscount")
                        .HasColumnType("decimal(30,15)")
                        .HasColumnOrder(17);

                    b.Property<string>("UserNameCreated")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnOrder(202);

                    b.Property<string>("UserNameModified")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnOrder(203);

                    b.Property<decimal>("VatPercent")
                        .HasColumnType("decimal(30,15)")
                        .HasColumnOrder(20);

                    b.Property<int>("VatTaxId")
                        .HasColumnType("int")
                        .HasColumnOrder(35);

                    b.Property<byte>("VatTaxTypeId")
                        .HasColumnType("tinyint unsigned")
                        .HasColumnOrder(34);

                    b.Property<decimal>("VatValue")
                        .HasColumnType("decimal(30,15)")
                        .HasColumnOrder(21);

                    b.HasKey("PurchaseInvoiceDetailId");

                    b.HasIndex("ItemId");

                    b.HasIndex("ItemPackageId");

                    b.HasIndex("PurchaseInvoiceHeaderId");

                    b.HasIndex("VatTaxId");

                    b.HasIndex("VatTaxTypeId");

                    b.ToTable("PurchaseInvoiceDetails");
                });

            modelBuilder.Entity("Purchases.CoreOne.Models.Domain.PurchaseInvoiceDetailTax", b =>
                {
                    b.Property<int>("PurchaseInvoiceDetailTaxId")
                        .HasColumnType("int")
                        .HasColumnOrder(1);

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnOrder(200);

                    b.Property<int>("DebitAccountId")
                        .HasColumnType("int")
                        .HasColumnOrder(6);

                    b.Property<bool?>("Hide")
                        .HasColumnType("tinyint(1)")
                        .HasColumnOrder(206);

                    b.Property<string>("IpAddressCreated")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnOrder(204);

                    b.Property<string>("IpAddressModified")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnOrder(205);

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnOrder(201);

                    b.Property<int>("PurchaseInvoiceDetailId")
                        .HasColumnType("int")
                        .HasColumnOrder(2);

                    b.Property<bool>("TaxAfterVatInclusive")
                        .HasColumnType("tinyint(1)")
                        .HasColumnOrder(5);

                    b.Property<int>("TaxId")
                        .HasColumnType("int")
                        .HasColumnOrder(4);

                    b.Property<decimal>("TaxPercent")
                        .HasColumnType("decimal(30,15)")
                        .HasColumnOrder(7);

                    b.Property<byte>("TaxTypeId")
                        .HasColumnType("tinyint unsigned")
                        .HasColumnOrder(3);

                    b.Property<decimal>("TaxValue")
                        .HasColumnType("decimal(30,15)")
                        .HasColumnOrder(8);

                    b.Property<string>("UserNameCreated")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnOrder(202);

                    b.Property<string>("UserNameModified")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnOrder(203);

                    b.HasKey("PurchaseInvoiceDetailTaxId");

                    b.HasIndex("DebitAccountId");

                    b.HasIndex("PurchaseInvoiceDetailId");

                    b.HasIndex("TaxId");

                    b.HasIndex("TaxTypeId");

                    b.ToTable("PurchaseInvoiceDetailTaxes");
                });

            modelBuilder.Entity("Purchases.CoreOne.Models.Domain.PurchaseInvoiceExpense", b =>
                {
                    b.Property<int>("PurchaseInvoiceExpenseId")
                        .HasColumnType("int")
                        .HasColumnOrder(1);

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnOrder(200);

                    b.Property<decimal>("ExpenseValue")
                        .HasColumnType("decimal(30,15)")
                        .HasColumnOrder(4);

                    b.Property<bool?>("Hide")
                        .HasColumnType("tinyint(1)")
                        .HasColumnOrder(206);

                    b.Property<int>("InvoiceExpenseTypeId")
                        .HasColumnType("int")
                        .HasColumnOrder(3);

                    b.Property<string>("IpAddressCreated")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnOrder(204);

                    b.Property<string>("IpAddressModified")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnOrder(205);

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnOrder(201);

                    b.Property<int>("PurchaseInvoiceHeaderId")
                        .HasColumnType("int")
                        .HasColumnOrder(2);

                    b.Property<string>("RemarksAr")
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)")
                        .HasColumnOrder(5);

                    b.Property<string>("RemarksEn")
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)")
                        .HasColumnOrder(6);

                    b.Property<string>("UserNameCreated")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnOrder(202);

                    b.Property<string>("UserNameModified")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnOrder(203);

                    b.HasKey("PurchaseInvoiceExpenseId");

                    b.HasIndex("InvoiceExpenseTypeId");

                    b.HasIndex("PurchaseInvoiceHeaderId");

                    b.ToTable("PurchaseInvoiceExpenses");
                });

            modelBuilder.Entity("Purchases.CoreOne.Models.Domain.PurchaseInvoiceHeader", b =>
                {
                    b.Property<int>("PurchaseInvoiceHeaderId")
                        .HasColumnType("int")
                        .HasColumnOrder(1);

                    b.Property<decimal>("AdditionalDiscountValue")
                        .HasColumnType("decimal(30,15)")
                        .HasColumnOrder(24);

                    b.Property<int?>("ArchiveHeaderId")
                        .HasColumnType("int")
                        .HasColumnOrder(46);

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnOrder(200);

                    b.Property<int>("CreditAccountId")
                        .HasColumnType("int")
                        .HasColumnOrder(29);

                    b.Property<int>("CreditLimitDays")
                        .HasColumnType("int")
                        .HasColumnOrder(42);

                    b.Property<decimal>("CreditLimitValues")
                        .HasColumnType("decimal(30,15)")
                        .HasColumnOrder(43);

                    b.Property<bool>("CreditPayment")
                        .HasColumnType("tinyint(1)")
                        .HasColumnOrder(13);

                    b.Property<int>("DebitAccountId")
                        .HasColumnType("int")
                        .HasColumnOrder(28);

                    b.Property<int>("DebitLimitDays")
                        .HasColumnType("int")
                        .HasColumnOrder(44);

                    b.Property<decimal>("DiscountPercent")
                        .HasColumnType("decimal(30,15)")
                        .HasColumnOrder(16);

                    b.Property<decimal>("DiscountValue")
                        .HasColumnType("decimal(30,15)")
                        .HasColumnOrder(17);

                    b.Property<int>("DocumentCode")
                        .HasColumnType("int")
                        .HasColumnOrder(3);

                    b.Property<DateTime>("DocumentDate")
                        .HasColumnType("Date")
                        .HasColumnOrder(9);

                    b.Property<string>("DocumentReference")
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)")
                        .HasColumnOrder(6);

                    b.Property<DateTime?>("DueDate")
                        .HasColumnType("Date")
                        .HasColumnOrder(45);

                    b.Property<DateTime>("EntryDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnOrder(10);

                    b.Property<decimal>("GrossValue")
                        .HasColumnType("decimal(30,15)")
                        .HasColumnOrder(19);

                    b.Property<bool>("HasSettlement")
                        .HasColumnType("tinyint(1)")
                        .HasColumnOrder(37);

                    b.Property<bool?>("Hide")
                        .HasColumnType("tinyint(1)")
                        .HasColumnOrder(206);

                    b.Property<byte>("InvoiceTypeId")
                        .HasColumnType("tinyint unsigned")
                        .HasColumnOrder(40);

                    b.Property<string>("IpAddressCreated")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnOrder(204);

                    b.Property<string>("IpAddressModified")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnOrder(205);

                    b.Property<bool>("IsBlocked")
                        .HasColumnType("tinyint(1)")
                        .HasColumnOrder(36);

                    b.Property<bool>("IsClosed")
                        .HasColumnType("tinyint(1)")
                        .HasColumnOrder(34);

                    b.Property<bool>("IsDirectInvoice")
                        .HasColumnType("tinyint(1)")
                        .HasColumnOrder(12);

                    b.Property<bool>("IsEnded")
                        .HasColumnType("tinyint(1)")
                        .HasColumnOrder(35);

                    b.Property<bool>("IsOnTheWay")
                        .HasColumnType("tinyint(1)")
                        .HasColumnOrder(33);

                    b.Property<bool>("IsSettlementCompleted")
                        .HasColumnType("tinyint(1)")
                        .HasColumnOrder(38);

                    b.Property<int>("JournalHeaderId")
                        .HasColumnType("int")
                        .HasColumnOrder(30);

                    b.Property<short?>("MenuCode")
                        .HasColumnType("smallint")
                        .HasColumnOrder(39);

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnOrder(201);

                    b.Property<decimal>("NetValue")
                        .HasColumnType("decimal(30,15)")
                        .HasColumnOrder(25);

                    b.Property<decimal>("NetValueBeforeAdditionalDiscount")
                        .HasColumnType("decimal(30,15)")
                        .HasColumnOrder(23);

                    b.Property<decimal>("OtherTaxValue")
                        .HasColumnType("decimal(30,15)")
                        .HasColumnOrder(22);

                    b.Property<string>("Prefix")
                        .HasMaxLength(10)
                        .HasColumnType("varchar(10)")
                        .HasColumnOrder(2);

                    b.Property<int>("PurchaseOrderHeaderId")
                        .HasColumnType("int")
                        .HasColumnOrder(5);

                    b.Property<string>("Reference")
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)")
                        .HasColumnOrder(11);

                    b.Property<string>("RemarksAr")
                        .HasMaxLength(2000)
                        .HasColumnType("varchar(2000)")
                        .HasColumnOrder(31);

                    b.Property<string>("RemarksEn")
                        .HasMaxLength(2000)
                        .HasColumnType("varchar(2000)")
                        .HasColumnOrder(32);

                    b.Property<int>("StoreId")
                        .HasColumnType("int")
                        .HasColumnOrder(8);

                    b.Property<decimal>("SubNetValue")
                        .HasColumnType("decimal(30,15)")
                        .HasColumnOrder(21);

                    b.Property<string>("Suffix")
                        .HasMaxLength(10)
                        .HasColumnType("varchar(10)")
                        .HasColumnOrder(4);

                    b.Property<decimal>("SupplierBalance")
                        .HasColumnType("decimal(30,15)")
                        .HasColumnOrder(41);

                    b.Property<int>("SupplierId")
                        .HasColumnType("int")
                        .HasColumnOrder(7);

                    b.Property<byte>("TaxTypeId")
                        .HasColumnType("tinyint unsigned")
                        .HasColumnOrder(14);

                    b.Property<decimal>("TotalCostValue")
                        .HasColumnType("decimal(30,15)")
                        .HasColumnOrder(27);

                    b.Property<decimal>("TotalInvoiceExpense")
                        .HasColumnType("decimal(30,15)")
                        .HasColumnOrder(26);

                    b.Property<decimal>("TotalItemDiscount")
                        .HasColumnType("decimal(30,15)")
                        .HasColumnOrder(18);

                    b.Property<decimal>("TotalValue")
                        .HasColumnType("decimal(30,15)")
                        .HasColumnOrder(15);

                    b.Property<string>("UserNameCreated")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnOrder(202);

                    b.Property<string>("UserNameModified")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnOrder(203);

                    b.Property<decimal>("VatValue")
                        .HasColumnType("decimal(30,15)")
                        .HasColumnOrder(20);

                    b.HasKey("PurchaseInvoiceHeaderId");

                    b.HasIndex("ArchiveHeaderId");

                    b.HasIndex("CreditAccountId");

                    b.HasIndex("DebitAccountId");

                    b.HasIndex("InvoiceTypeId");

                    b.HasIndex("JournalHeaderId");

                    b.HasIndex("MenuCode");

                    b.HasIndex("PurchaseOrderHeaderId");

                    b.HasIndex("StoreId");

                    b.HasIndex("SupplierId");

                    b.HasIndex("TaxTypeId");

                    b.ToTable("PurchaseInvoiceHeaders");
                });

            modelBuilder.Entity("Purchases.CoreOne.Models.Domain.PurchaseInvoiceReturnDetail", b =>
                {
                    b.Property<int>("PurchaseInvoiceReturnDetailId")
                        .HasColumnType("int")
                        .HasColumnOrder(1);

                    b.Property<string>("BarCode")
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)")
                        .HasColumnOrder(7);

                    b.Property<string>("BatchNumber")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnOrder(10);

                    b.Property<decimal>("BonusQuantity")
                        .HasColumnType("decimal(30,15)")
                        .HasColumnOrder(12);

                    b.Property<decimal>("ConsumerPrice")
                        .HasColumnType("decimal(30,15)")
                        .HasColumnOrder(26);

                    b.Property<int?>("CostCenterId")
                        .HasColumnType("int")
                        .HasColumnOrder(3);

                    b.Property<decimal>("CostPackage")
                        .HasColumnType("decimal(30,15)")
                        .HasColumnOrder(28);

                    b.Property<decimal>("CostPrice")
                        .HasColumnType("decimal(30,15)")
                        .HasColumnOrder(27);

                    b.Property<decimal>("CostValue")
                        .HasColumnType("decimal(30,15)")
                        .HasColumnOrder(29);

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnOrder(200);

                    b.Property<DateTime?>("ExpireDate")
                        .HasColumnType("Date")
                        .HasColumnOrder(9);

                    b.Property<decimal>("GrossValue")
                        .HasColumnType("decimal(30,15)")
                        .HasColumnOrder(19);

                    b.Property<decimal>("HeaderDiscountValue")
                        .HasColumnType("decimal(30,15)")
                        .HasColumnOrder(18);

                    b.Property<bool?>("Hide")
                        .HasColumnType("tinyint(1)")
                        .HasColumnOrder(206);

                    b.Property<string>("IpAddressCreated")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnOrder(204);

                    b.Property<string>("IpAddressModified")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnOrder(205);

                    b.Property<bool>("IsItemVatInclusive")
                        .HasColumnType("tinyint(1)")
                        .HasColumnOrder(6);

                    b.Property<decimal>("ItemDiscountPercent")
                        .HasColumnType("decimal(30,15)")
                        .HasColumnOrder(15);

                    b.Property<decimal>("ItemDiscountValue")
                        .HasColumnType("decimal(30,15)")
                        .HasColumnOrder(16);

                    b.Property<int>("ItemId")
                        .HasColumnType("int")
                        .HasColumnOrder(4);

                    b.Property<string>("ItemNote")
                        .HasMaxLength(2000)
                        .HasColumnType("varchar(2000)")
                        .HasColumnOrder(31);

                    b.Property<int>("ItemPackageId")
                        .HasColumnType("int")
                        .HasColumnOrder(5);

                    b.Property<decimal>("LastPurchasePrice")
                        .HasColumnType("decimal(30,15)")
                        .HasColumnOrder(30);

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnOrder(201);

                    b.Property<decimal>("NetValue")
                        .HasColumnType("decimal(30,15)")
                        .HasColumnOrder(24);

                    b.Property<string>("Notes")
                        .HasMaxLength(2000)
                        .HasColumnType("varchar(2000)")
                        .HasColumnOrder(25);

                    b.Property<decimal>("OtherTaxValue")
                        .HasColumnType("decimal(30,15)")
                        .HasColumnOrder(23);

                    b.Property<decimal>("Packing")
                        .HasColumnType("decimal(30,15)")
                        .HasColumnOrder(8);

                    b.Property<int>("PurchaseInvoiceReturnHeaderId")
                        .HasColumnType("int")
                        .HasColumnOrder(2);

                    b.Property<decimal>("PurchasePrice")
                        .HasColumnType("decimal(30,15)")
                        .HasColumnOrder(13);

                    b.Property<decimal>("Quantity")
                        .HasColumnType("decimal(30,15)")
                        .HasColumnOrder(11);

                    b.Property<decimal>("SubNetValue")
                        .HasColumnType("decimal(30,15)")
                        .HasColumnOrder(22);

                    b.Property<decimal>("TotalValue")
                        .HasColumnType("decimal(30,15)")
                        .HasColumnOrder(14);

                    b.Property<decimal>("TotalValueAfterDiscount")
                        .HasColumnType("decimal(30,15)")
                        .HasColumnOrder(17);

                    b.Property<string>("UserNameCreated")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnOrder(202);

                    b.Property<string>("UserNameModified")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnOrder(203);

                    b.Property<decimal>("VatPercent")
                        .HasColumnType("decimal(30,15)")
                        .HasColumnOrder(20);

                    b.Property<int>("VatTaxId")
                        .HasColumnType("int")
                        .HasColumnOrder(33);

                    b.Property<byte>("VatTaxTypeId")
                        .HasColumnType("tinyint unsigned")
                        .HasColumnOrder(32);

                    b.Property<decimal>("VatValue")
                        .HasColumnType("decimal(30,15)")
                        .HasColumnOrder(21);

                    b.HasKey("PurchaseInvoiceReturnDetailId");

                    b.HasIndex("ItemId");

                    b.HasIndex("ItemPackageId");

                    b.HasIndex("PurchaseInvoiceReturnHeaderId");

                    b.HasIndex("VatTaxId");

                    b.HasIndex("VatTaxTypeId");

                    b.ToTable("PurchaseInvoiceReturnDetails");
                });

            modelBuilder.Entity("Purchases.CoreOne.Models.Domain.PurchaseInvoiceReturnDetailTax", b =>
                {
                    b.Property<int>("PurchaseInvoiceReturnDetailTaxId")
                        .HasColumnType("int")
                        .HasColumnOrder(1);

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnOrder(200);

                    b.Property<int>("CreditAccountId")
                        .HasColumnType("int")
                        .HasColumnOrder(6);

                    b.Property<bool?>("Hide")
                        .HasColumnType("tinyint(1)")
                        .HasColumnOrder(206);

                    b.Property<string>("IpAddressCreated")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnOrder(204);

                    b.Property<string>("IpAddressModified")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnOrder(205);

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnOrder(201);

                    b.Property<int>("PurchaseInvoiceReturnDetailId")
                        .HasColumnType("int")
                        .HasColumnOrder(2);

                    b.Property<bool>("TaxAfterVatInclusive")
                        .HasColumnType("tinyint(1)")
                        .HasColumnOrder(5);

                    b.Property<int>("TaxId")
                        .HasColumnType("int")
                        .HasColumnOrder(4);

                    b.Property<decimal>("TaxPercent")
                        .HasColumnType("decimal(30,15)")
                        .HasColumnOrder(7);

                    b.Property<byte>("TaxTypeId")
                        .HasColumnType("tinyint unsigned")
                        .HasColumnOrder(3);

                    b.Property<decimal>("TaxValue")
                        .HasColumnType("decimal(30,15)")
                        .HasColumnOrder(8);

                    b.Property<string>("UserNameCreated")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnOrder(202);

                    b.Property<string>("UserNameModified")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnOrder(203);

                    b.HasKey("PurchaseInvoiceReturnDetailTaxId");

                    b.HasIndex("CreditAccountId");

                    b.HasIndex("PurchaseInvoiceReturnDetailId");

                    b.HasIndex("TaxId");

                    b.HasIndex("TaxTypeId");

                    b.ToTable("PurchaseInvoiceReturnDetailTaxes");
                });

            modelBuilder.Entity("Purchases.CoreOne.Models.Domain.PurchaseInvoiceReturnHeader", b =>
                {
                    b.Property<int>("PurchaseInvoiceReturnHeaderId")
                        .HasColumnType("int")
                        .HasColumnOrder(1);

                    b.Property<decimal>("AdditionalDiscountValue")
                        .HasColumnType("decimal(30,15)")
                        .HasColumnOrder(24);

                    b.Property<int?>("ArchiveHeaderId")
                        .HasColumnType("int")
                        .HasColumnOrder(37);

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnOrder(200);

                    b.Property<int>("CreditAccountId")
                        .HasColumnType("int")
                        .HasColumnOrder(28);

                    b.Property<bool>("CreditPayment")
                        .HasColumnType("tinyint(1)")
                        .HasColumnOrder(13);

                    b.Property<int>("DebitAccountId")
                        .HasColumnType("int")
                        .HasColumnOrder(27);

                    b.Property<decimal>("DiscountPercent")
                        .HasColumnType("decimal(30,15)")
                        .HasColumnOrder(16);

                    b.Property<decimal>("DiscountValue")
                        .HasColumnType("decimal(30,15)")
                        .HasColumnOrder(17);

                    b.Property<int>("DocumentCode")
                        .HasColumnType("int")
                        .HasColumnOrder(3);

                    b.Property<DateTime>("DocumentDate")
                        .HasColumnType("Date")
                        .HasColumnOrder(9);

                    b.Property<string>("DocumentReference")
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)")
                        .HasColumnOrder(6);

                    b.Property<DateTime>("EntryDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnOrder(10);

                    b.Property<decimal>("GrossValue")
                        .HasColumnType("decimal(30,15)")
                        .HasColumnOrder(19);

                    b.Property<bool?>("Hide")
                        .HasColumnType("tinyint(1)")
                        .HasColumnOrder(206);

                    b.Property<string>("IpAddressCreated")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnOrder(204);

                    b.Property<string>("IpAddressModified")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnOrder(205);

                    b.Property<bool>("IsBlocked")
                        .HasColumnType("tinyint(1)")
                        .HasColumnOrder(35);

                    b.Property<bool>("IsClosed")
                        .HasColumnType("tinyint(1)")
                        .HasColumnOrder(33);

                    b.Property<bool>("IsDirectInvoice")
                        .HasColumnType("tinyint(1)")
                        .HasColumnOrder(12);

                    b.Property<bool>("IsEnded")
                        .HasColumnType("tinyint(1)")
                        .HasColumnOrder(34);

                    b.Property<bool>("IsOnTheWay")
                        .HasColumnType("tinyint(1)")
                        .HasColumnOrder(32);

                    b.Property<int>("JournalHeaderId")
                        .HasColumnType("int")
                        .HasColumnOrder(29);

                    b.Property<short?>("MenuCode")
                        .HasColumnType("smallint")
                        .HasColumnOrder(36);

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnOrder(201);

                    b.Property<decimal>("NetValue")
                        .HasColumnType("decimal(30,15)")
                        .HasColumnOrder(25);

                    b.Property<decimal>("NetValueBeforeAdditionalDiscount")
                        .HasColumnType("decimal(30,15)")
                        .HasColumnOrder(23);

                    b.Property<decimal>("OtherTaxValue")
                        .HasColumnType("decimal(30,15)")
                        .HasColumnOrder(22);

                    b.Property<string>("Prefix")
                        .HasMaxLength(10)
                        .HasColumnType("varchar(10)")
                        .HasColumnOrder(2);

                    b.Property<int>("PurchaseInvoiceHeaderId")
                        .HasColumnType("int")
                        .HasColumnOrder(5);

                    b.Property<string>("Reference")
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)")
                        .HasColumnOrder(11);

                    b.Property<string>("RemarksAr")
                        .HasMaxLength(2000)
                        .HasColumnType("varchar(2000)")
                        .HasColumnOrder(30);

                    b.Property<string>("RemarksEn")
                        .HasMaxLength(2000)
                        .HasColumnType("varchar(2000)")
                        .HasColumnOrder(31);

                    b.Property<int>("StoreId")
                        .HasColumnType("int")
                        .HasColumnOrder(8);

                    b.Property<decimal>("SubNetValue")
                        .HasColumnType("decimal(30,15)")
                        .HasColumnOrder(21);

                    b.Property<string>("Suffix")
                        .HasMaxLength(10)
                        .HasColumnType("varchar(10)")
                        .HasColumnOrder(4);

                    b.Property<int>("SupplierId")
                        .HasColumnType("int")
                        .HasColumnOrder(7);

                    b.Property<byte>("TaxTypeId")
                        .HasColumnType("tinyint unsigned")
                        .HasColumnOrder(14);

                    b.Property<decimal>("TotalCostValue")
                        .HasColumnType("decimal(30,15)")
                        .HasColumnOrder(26);

                    b.Property<decimal>("TotalItemDiscount")
                        .HasColumnType("decimal(30,15)")
                        .HasColumnOrder(18);

                    b.Property<decimal>("TotalValue")
                        .HasColumnType("decimal(30,15)")
                        .HasColumnOrder(15);

                    b.Property<string>("UserNameCreated")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnOrder(202);

                    b.Property<string>("UserNameModified")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnOrder(203);

                    b.Property<decimal>("VatValue")
                        .HasColumnType("decimal(30,15)")
                        .HasColumnOrder(20);

                    b.HasKey("PurchaseInvoiceReturnHeaderId");

                    b.HasIndex("ArchiveHeaderId");

                    b.HasIndex("CreditAccountId");

                    b.HasIndex("DebitAccountId");

                    b.HasIndex("JournalHeaderId");

                    b.HasIndex("MenuCode");

                    b.HasIndex("PurchaseInvoiceHeaderId");

                    b.HasIndex("StoreId");

                    b.HasIndex("SupplierId");

                    b.HasIndex("TaxTypeId");

                    b.ToTable("PurchaseInvoiceReturnHeaders");
                });

            modelBuilder.Entity("Purchases.CoreOne.Models.Domain.PurchaseOrderDetail", b =>
                {
                    b.Property<int>("PurchaseOrderDetailId")
                        .HasColumnType("int")
                        .HasColumnOrder(1);

                    b.Property<string>("BarCode")
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)")
                        .HasColumnOrder(7);

                    b.Property<decimal>("BonusQuantity")
                        .HasColumnType("decimal(30,15)")
                        .HasColumnOrder(10);

                    b.Property<decimal>("ConsumerPrice")
                        .HasColumnType("decimal(30,15)")
                        .HasColumnOrder(24);

                    b.Property<int?>("CostCenterId")
                        .HasColumnType("int")
                        .HasColumnOrder(3);

                    b.Property<decimal>("CostPackage")
                        .HasColumnType("decimal(30,15)")
                        .HasColumnOrder(26);

                    b.Property<decimal>("CostPrice")
                        .HasColumnType("decimal(30,15)")
                        .HasColumnOrder(25);

                    b.Property<decimal>("CostValue")
                        .HasColumnType("decimal(30,15)")
                        .HasColumnOrder(27);

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnOrder(200);

                    b.Property<decimal>("GrossValue")
                        .HasColumnType("decimal(30,15)")
                        .HasColumnOrder(17);

                    b.Property<decimal>("HeaderDiscountValue")
                        .HasColumnType("decimal(30,15)")
                        .HasColumnOrder(16);

                    b.Property<bool?>("Hide")
                        .HasColumnType("tinyint(1)")
                        .HasColumnOrder(206);

                    b.Property<string>("IpAddressCreated")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnOrder(204);

                    b.Property<string>("IpAddressModified")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnOrder(205);

                    b.Property<bool>("IsItemVatInclusive")
                        .HasColumnType("tinyint(1)")
                        .HasColumnOrder(6);

                    b.Property<decimal>("ItemDiscountPercent")
                        .HasColumnType("decimal(30,15)")
                        .HasColumnOrder(13);

                    b.Property<decimal>("ItemDiscountValue")
                        .HasColumnType("decimal(30,15)")
                        .HasColumnOrder(14);

                    b.Property<int>("ItemId")
                        .HasColumnType("int")
                        .HasColumnOrder(4);

                    b.Property<string>("ItemNote")
                        .HasMaxLength(2000)
                        .HasColumnType("varchar(2000)")
                        .HasColumnOrder(29);

                    b.Property<int>("ItemPackageId")
                        .HasColumnType("int")
                        .HasColumnOrder(5);

                    b.Property<decimal>("LastPurchasePrice")
                        .HasColumnType("decimal(30,15)")
                        .HasColumnOrder(28);

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnOrder(201);

                    b.Property<decimal>("NetValue")
                        .HasColumnType("decimal(30,15)")
                        .HasColumnOrder(22);

                    b.Property<string>("Notes")
                        .HasMaxLength(2000)
                        .HasColumnType("varchar(2000)")
                        .HasColumnOrder(23);

                    b.Property<decimal>("OtherTaxValue")
                        .HasColumnType("decimal(30,15)")
                        .HasColumnOrder(21);

                    b.Property<decimal>("Packing")
                        .HasColumnType("decimal(30,15)")
                        .HasColumnOrder(8);

                    b.Property<int>("PurchaseOrderHeaderId")
                        .HasColumnType("int")
                        .HasColumnOrder(2);

                    b.Property<decimal>("PurchasePrice")
                        .HasColumnType("decimal(30,15)")
                        .HasColumnOrder(11);

                    b.Property<decimal>("Quantity")
                        .HasColumnType("decimal(30,15)")
                        .HasColumnOrder(9);

                    b.Property<decimal>("SubNetValue")
                        .HasColumnType("decimal(30,15)")
                        .HasColumnOrder(20);

                    b.Property<decimal>("TotalValue")
                        .HasColumnType("decimal(30,15)")
                        .HasColumnOrder(12);

                    b.Property<decimal>("TotalValueAfterDiscount")
                        .HasColumnType("decimal(30,15)")
                        .HasColumnOrder(15);

                    b.Property<string>("UserNameCreated")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnOrder(202);

                    b.Property<string>("UserNameModified")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnOrder(203);

                    b.Property<decimal>("VatPercent")
                        .HasColumnType("decimal(30,15)")
                        .HasColumnOrder(18);

                    b.Property<decimal>("VatValue")
                        .HasColumnType("decimal(30,15)")
                        .HasColumnOrder(19);

                    b.HasKey("PurchaseOrderDetailId");

                    b.HasIndex("CostCenterId");

                    b.HasIndex("ItemId");

                    b.HasIndex("ItemPackageId");

                    b.HasIndex("PurchaseOrderHeaderId");

                    b.ToTable("PurchaseOrderDetails");
                });

            modelBuilder.Entity("Purchases.CoreOne.Models.Domain.PurchaseOrderDetailTax", b =>
                {
                    b.Property<int>("PurchaseOrderDetailTaxId")
                        .HasColumnType("int")
                        .HasColumnOrder(1);

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnOrder(200);

                    b.Property<int>("DebitAccountId")
                        .HasColumnType("int")
                        .HasColumnOrder(5);

                    b.Property<bool?>("Hide")
                        .HasColumnType("tinyint(1)")
                        .HasColumnOrder(206);

                    b.Property<string>("IpAddressCreated")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnOrder(204);

                    b.Property<string>("IpAddressModified")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnOrder(205);

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnOrder(201);

                    b.Property<int>("PurchaseOrderDetailId")
                        .HasColumnType("int")
                        .HasColumnOrder(2);

                    b.Property<bool>("TaxAfterVatInclusive")
                        .HasColumnType("tinyint(1)")
                        .HasColumnOrder(4);

                    b.Property<int>("TaxId")
                        .HasColumnType("int")
                        .HasColumnOrder(3);

                    b.Property<decimal>("TaxPercent")
                        .HasColumnType("decimal(30,15)")
                        .HasColumnOrder(6);

                    b.Property<decimal>("TaxValue")
                        .HasColumnType("decimal(30,15)")
                        .HasColumnOrder(7);

                    b.Property<string>("UserNameCreated")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnOrder(202);

                    b.Property<string>("UserNameModified")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnOrder(203);

                    b.HasKey("PurchaseOrderDetailTaxId");

                    b.HasIndex("DebitAccountId");

                    b.HasIndex("PurchaseOrderDetailId");

                    b.HasIndex("TaxId");

                    b.ToTable("PurchaseOrderDetailTaxes");
                });

            modelBuilder.Entity("Purchases.CoreOne.Models.Domain.PurchaseOrderHeader", b =>
                {
                    b.Property<int>("PurchaseOrderHeaderId")
                        .HasColumnType("int")
                        .HasColumnOrder(1);

                    b.Property<decimal>("AdditionalDiscountValue")
                        .HasColumnType("decimal(30,15)")
                        .HasColumnOrder(27);

                    b.Property<int?>("ArchiveHeaderId")
                        .HasColumnType("int")
                        .HasColumnOrder(37);

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnOrder(200);

                    b.Property<bool>("CreditPayment")
                        .HasColumnType("tinyint(1)")
                        .HasColumnOrder(13);

                    b.Property<DateTime?>("DeliveryDate")
                        .HasColumnType("Date")
                        .HasColumnOrder(17);

                    b.Property<decimal>("DiscountPercent")
                        .HasColumnType("decimal(30,15)")
                        .HasColumnOrder(19);

                    b.Property<decimal>("DiscountValue")
                        .HasColumnType("decimal(30,15)")
                        .HasColumnOrder(20);

                    b.Property<int>("DocumentCode")
                        .HasColumnType("int")
                        .HasColumnOrder(3);

                    b.Property<DateTime>("DocumentDate")
                        .HasColumnType("Date")
                        .HasColumnOrder(6);

                    b.Property<string>("DocumentReference")
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)")
                        .HasColumnOrder(8);

                    b.Property<int>("DocumentStatusId")
                        .HasColumnType("int")
                        .HasColumnOrder(36);

                    b.Property<DateTime?>("DueDate")
                        .HasColumnType("Date")
                        .HasColumnOrder(15);

                    b.Property<DateTime>("EntryDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnOrder(7);

                    b.Property<decimal>("GrossValue")
                        .HasColumnType("decimal(30,15)")
                        .HasColumnOrder(22);

                    b.Property<bool?>("Hide")
                        .HasColumnType("tinyint(1)")
                        .HasColumnOrder(206);

                    b.Property<string>("IpAddressCreated")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnOrder(204);

                    b.Property<string>("IpAddressModified")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnOrder(205);

                    b.Property<bool>("IsBlocked")
                        .HasColumnType("tinyint(1)")
                        .HasColumnOrder(35);

                    b.Property<bool>("IsCancelled")
                        .HasColumnType("tinyint(1)")
                        .HasColumnOrder(33);

                    b.Property<bool>("IsClosed")
                        .HasColumnType("tinyint(1)")
                        .HasColumnOrder(32);

                    b.Property<bool>("IsEnded")
                        .HasColumnType("tinyint(1)")
                        .HasColumnOrder(34);

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnOrder(201);

                    b.Property<decimal>("NetValue")
                        .HasColumnType("decimal(30,15)")
                        .HasColumnOrder(28);

                    b.Property<decimal>("NetValueBeforeAdditionalDiscount")
                        .HasColumnType("decimal(30,15)")
                        .HasColumnOrder(26);

                    b.Property<decimal>("OtherTaxValue")
                        .HasColumnType("decimal(30,15)")
                        .HasColumnOrder(25);

                    b.Property<int?>("PaymentPeriodDays")
                        .HasColumnType("int")
                        .HasColumnOrder(14);

                    b.Property<string>("Prefix")
                        .HasMaxLength(10)
                        .HasColumnType("varchar(10)")
                        .HasColumnOrder(2);

                    b.Property<string>("Reference")
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)")
                        .HasColumnOrder(12);

                    b.Property<string>("RemarksAr")
                        .HasMaxLength(2000)
                        .HasColumnType("varchar(2000)")
                        .HasColumnOrder(30);

                    b.Property<string>("RemarksEn")
                        .HasMaxLength(2000)
                        .HasColumnType("varchar(2000)")
                        .HasColumnOrder(31);

                    b.Property<int?>("ShipmentTypeId")
                        .HasColumnType("int")
                        .HasColumnOrder(16);

                    b.Property<int>("StoreId")
                        .HasColumnType("int")
                        .HasColumnOrder(10);

                    b.Property<decimal>("SubNetValue")
                        .HasColumnType("decimal(30,15)")
                        .HasColumnOrder(24);

                    b.Property<string>("Suffix")
                        .HasMaxLength(10)
                        .HasColumnType("varchar(10)")
                        .HasColumnOrder(4);

                    b.Property<int>("SupplierId")
                        .HasColumnType("int")
                        .HasColumnOrder(9);

                    b.Property<int?>("SupplierQuotationHeaderId")
                        .HasColumnType("int")
                        .HasColumnOrder(5);

                    b.Property<byte>("TaxTypeId")
                        .HasColumnType("tinyint unsigned")
                        .HasColumnOrder(11);

                    b.Property<decimal>("TotalCostValue")
                        .HasColumnType("decimal(30,15)")
                        .HasColumnOrder(29);

                    b.Property<decimal>("TotalItemDiscount")
                        .HasColumnType("decimal(30,15)")
                        .HasColumnOrder(21);

                    b.Property<decimal>("TotalValue")
                        .HasColumnType("decimal(30,15)")
                        .HasColumnOrder(18);

                    b.Property<string>("UserNameCreated")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnOrder(202);

                    b.Property<string>("UserNameModified")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnOrder(203);

                    b.Property<decimal>("VatValue")
                        .HasColumnType("decimal(30,15)")
                        .HasColumnOrder(23);

                    b.HasKey("PurchaseOrderHeaderId");

                    b.HasIndex("ArchiveHeaderId");

                    b.HasIndex("DocumentStatusId");

                    b.HasIndex("ShipmentTypeId");

                    b.HasIndex("StoreId");

                    b.HasIndex("SupplierId");

                    b.HasIndex("SupplierQuotationHeaderId");

                    b.HasIndex("TaxTypeId");

                    b.ToTable("PurchaseOrderHeaders");
                });

            modelBuilder.Entity("Purchases.CoreOne.Models.Domain.StockInDetail", b =>
                {
                    b.Property<int>("StockInDetailId")
                        .HasColumnType("int")
                        .HasColumnOrder(1);

                    b.Property<string>("BarCode")
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)")
                        .HasColumnOrder(7);

                    b.Property<string>("BatchNumber")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnOrder(10);

                    b.Property<decimal>("BonusQuantity")
                        .HasColumnType("decimal(30,15)")
                        .HasColumnOrder(12);

                    b.Property<decimal>("ConsumerPrice")
                        .HasColumnType("decimal(30,15)")
                        .HasColumnOrder(26);

                    b.Property<int?>("CostCenterId")
                        .HasColumnType("int")
                        .HasColumnOrder(3);

                    b.Property<decimal>("CostPackage")
                        .HasColumnType("decimal(30,15)")
                        .HasColumnOrder(28);

                    b.Property<decimal>("CostPrice")
                        .HasColumnType("decimal(30,15)")
                        .HasColumnOrder(27);

                    b.Property<decimal>("CostValue")
                        .HasColumnType("decimal(30,15)")
                        .HasColumnOrder(29);

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnOrder(200);

                    b.Property<DateTime?>("ExpireDate")
                        .HasColumnType("Date")
                        .HasColumnOrder(9);

                    b.Property<decimal>("GrossValue")
                        .HasColumnType("decimal(30,15)")
                        .HasColumnOrder(19);

                    b.Property<decimal>("HeaderDiscountValue")
                        .HasColumnType("decimal(30,15)")
                        .HasColumnOrder(18);

                    b.Property<bool?>("Hide")
                        .HasColumnType("tinyint(1)")
                        .HasColumnOrder(206);

                    b.Property<string>("IpAddressCreated")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnOrder(204);

                    b.Property<string>("IpAddressModified")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnOrder(205);

                    b.Property<bool>("IsItemVatInclusive")
                        .HasColumnType("tinyint(1)")
                        .HasColumnOrder(6);

                    b.Property<decimal>("ItemDiscountPercent")
                        .HasColumnType("decimal(30,15)")
                        .HasColumnOrder(15);

                    b.Property<decimal>("ItemDiscountValue")
                        .HasColumnType("decimal(30,15)")
                        .HasColumnOrder(16);

                    b.Property<int>("ItemId")
                        .HasColumnType("int")
                        .HasColumnOrder(4);

                    b.Property<string>("ItemNote")
                        .HasMaxLength(2000)
                        .HasColumnType("varchar(2000)")
                        .HasColumnOrder(31);

                    b.Property<int>("ItemPackageId")
                        .HasColumnType("int")
                        .HasColumnOrder(5);

                    b.Property<decimal>("LastPurchasePrice")
                        .HasColumnType("decimal(30,15)")
                        .HasColumnOrder(30);

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnOrder(201);

                    b.Property<decimal>("NetValue")
                        .HasColumnType("decimal(30,15)")
                        .HasColumnOrder(24);

                    b.Property<string>("Notes")
                        .HasMaxLength(2000)
                        .HasColumnType("varchar(2000)")
                        .HasColumnOrder(25);

                    b.Property<decimal>("OtherTaxValue")
                        .HasColumnType("decimal(30,15)")
                        .HasColumnOrder(23);

                    b.Property<decimal>("Packing")
                        .HasColumnType("decimal(30,15)")
                        .HasColumnOrder(8);

                    b.Property<decimal>("PurchasePrice")
                        .HasColumnType("decimal(30,15)")
                        .HasColumnOrder(13);

                    b.Property<decimal>("Quantity")
                        .HasColumnType("decimal(30,15)")
                        .HasColumnOrder(11);

                    b.Property<int>("StockInHeaderId")
                        .HasColumnType("int")
                        .HasColumnOrder(2);

                    b.Property<decimal>("SubNetValue")
                        .HasColumnType("decimal(30,15)")
                        .HasColumnOrder(22);

                    b.Property<decimal>("TotalValue")
                        .HasColumnType("decimal(30,15)")
                        .HasColumnOrder(14);

                    b.Property<decimal>("TotalValueAfterDiscount")
                        .HasColumnType("decimal(30,15)")
                        .HasColumnOrder(17);

                    b.Property<string>("UserNameCreated")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnOrder(202);

                    b.Property<string>("UserNameModified")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnOrder(203);

                    b.Property<decimal>("VatPercent")
                        .HasColumnType("decimal(30,15)")
                        .HasColumnOrder(20);

                    b.Property<decimal>("VatValue")
                        .HasColumnType("decimal(30,15)")
                        .HasColumnOrder(21);

                    b.HasKey("StockInDetailId");

                    b.HasIndex("ItemId");

                    b.HasIndex("ItemPackageId");

                    b.HasIndex("StockInHeaderId");

                    b.ToTable("StockInDetails");
                });

            modelBuilder.Entity("Purchases.CoreOne.Models.Domain.StockInDetailTax", b =>
                {
                    b.Property<int>("StockInDetailTaxId")
                        .HasColumnType("int")
                        .HasColumnOrder(1);

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnOrder(200);

                    b.Property<int>("DebitAccountId")
                        .HasColumnType("int")
                        .HasColumnOrder(5);

                    b.Property<bool?>("Hide")
                        .HasColumnType("tinyint(1)")
                        .HasColumnOrder(206);

                    b.Property<string>("IpAddressCreated")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnOrder(204);

                    b.Property<string>("IpAddressModified")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnOrder(205);

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnOrder(201);

                    b.Property<int>("StockInDetailId")
                        .HasColumnType("int")
                        .HasColumnOrder(2);

                    b.Property<bool>("TaxAfterVatInclusive")
                        .HasColumnType("tinyint(1)")
                        .HasColumnOrder(4);

                    b.Property<int>("TaxId")
                        .HasColumnType("int")
                        .HasColumnOrder(3);

                    b.Property<decimal>("TaxPercent")
                        .HasColumnType("decimal(30,15)")
                        .HasColumnOrder(6);

                    b.Property<decimal>("TaxValue")
                        .HasColumnType("decimal(30,15)")
                        .HasColumnOrder(7);

                    b.Property<string>("UserNameCreated")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnOrder(202);

                    b.Property<string>("UserNameModified")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnOrder(203);

                    b.HasKey("StockInDetailTaxId");

                    b.HasIndex("DebitAccountId");

                    b.HasIndex("StockInDetailId");

                    b.HasIndex("TaxId");

                    b.ToTable("StockInDetailTaxes");
                });

            modelBuilder.Entity("Purchases.CoreOne.Models.Domain.StockInHeader", b =>
                {
                    b.Property<int>("StockInHeaderId")
                        .HasColumnType("int")
                        .HasColumnOrder(1);

                    b.Property<decimal>("AdditionalDiscountValue")
                        .HasColumnType("decimal(30,15)")
                        .HasColumnOrder(23);

                    b.Property<int?>("ArchiveHeaderId")
                        .HasColumnType("int")
                        .HasColumnOrder(32);

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnOrder(200);

                    b.Property<decimal>("DiscountPercent")
                        .HasColumnType("decimal(30,15)")
                        .HasColumnOrder(15);

                    b.Property<decimal>("DiscountValue")
                        .HasColumnType("decimal(30,15)")
                        .HasColumnOrder(16);

                    b.Property<int>("DocumentCode")
                        .HasColumnType("int")
                        .HasColumnOrder(3);

                    b.Property<DateTime>("DocumentDate")
                        .HasColumnType("Date")
                        .HasColumnOrder(11);

                    b.Property<string>("DocumentReference")
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)")
                        .HasColumnOrder(5);

                    b.Property<DateTime>("EntryDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnOrder(12);

                    b.Property<decimal>("GrossValue")
                        .HasColumnType("decimal(30,15)")
                        .HasColumnOrder(18);

                    b.Property<bool?>("Hide")
                        .HasColumnType("tinyint(1)")
                        .HasColumnOrder(206);

                    b.Property<string>("IpAddressCreated")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnOrder(204);

                    b.Property<string>("IpAddressModified")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnOrder(205);

                    b.Property<bool>("IsBlocked")
                        .HasColumnType("tinyint(1)")
                        .HasColumnOrder(30);

                    b.Property<bool>("IsClosed")
                        .HasColumnType("tinyint(1)")
                        .HasColumnOrder(28);

                    b.Property<bool>("IsEnded")
                        .HasColumnType("tinyint(1)")
                        .HasColumnOrder(29);

                    b.Property<short?>("MenuCode")
                        .HasColumnType("smallint")
                        .HasColumnOrder(31);

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnOrder(201);

                    b.Property<decimal>("NetValue")
                        .HasColumnType("decimal(30,15)")
                        .HasColumnOrder(24);

                    b.Property<decimal>("NetValueBeforeAdditionalDiscount")
                        .HasColumnType("decimal(30,15)")
                        .HasColumnOrder(22);

                    b.Property<decimal>("OtherTaxValue")
                        .HasColumnType("decimal(30,15)")
                        .HasColumnOrder(21);

                    b.Property<string>("Prefix")
                        .HasMaxLength(10)
                        .HasColumnType("varchar(10)")
                        .HasColumnOrder(2);

                    b.Property<int?>("PurchaseInvoiceHeaderId")
                        .HasColumnType("int")
                        .HasColumnOrder(8);

                    b.Property<int?>("PurchaseOrderHeaderId")
                        .HasColumnType("int")
                        .HasColumnOrder(7);

                    b.Property<string>("Reference")
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)")
                        .HasColumnOrder(13);

                    b.Property<string>("RemarksAr")
                        .HasMaxLength(2000)
                        .HasColumnType("varchar(2000)")
                        .HasColumnOrder(26);

                    b.Property<string>("RemarksEn")
                        .HasMaxLength(2000)
                        .HasColumnType("varchar(2000)")
                        .HasColumnOrder(27);

                    b.Property<byte>("StockTypeId")
                        .HasColumnType("tinyint unsigned")
                        .HasColumnOrder(6);

                    b.Property<int>("StoreId")
                        .HasColumnType("int")
                        .HasColumnOrder(10);

                    b.Property<decimal>("SubNetValue")
                        .HasColumnType("decimal(30,15)")
                        .HasColumnOrder(20);

                    b.Property<string>("Suffix")
                        .HasMaxLength(10)
                        .HasColumnType("varchar(10)")
                        .HasColumnOrder(4);

                    b.Property<int>("SupplierId")
                        .HasColumnType("int")
                        .HasColumnOrder(9);

                    b.Property<decimal>("TotalCostValue")
                        .HasColumnType("decimal(30,15)")
                        .HasColumnOrder(25);

                    b.Property<decimal>("TotalItemDiscount")
                        .HasColumnType("decimal(30,15)")
                        .HasColumnOrder(17);

                    b.Property<decimal>("TotalValue")
                        .HasColumnType("decimal(30,15)")
                        .HasColumnOrder(14);

                    b.Property<string>("UserNameCreated")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnOrder(202);

                    b.Property<string>("UserNameModified")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnOrder(203);

                    b.Property<decimal>("VatValue")
                        .HasColumnType("decimal(30,15)")
                        .HasColumnOrder(19);

                    b.HasKey("StockInHeaderId");

                    b.HasIndex("ArchiveHeaderId");

                    b.HasIndex("MenuCode");

                    b.HasIndex("PurchaseInvoiceHeaderId");

                    b.HasIndex("PurchaseOrderHeaderId");

                    b.HasIndex("StockTypeId");

                    b.HasIndex("StoreId");

                    b.HasIndex("SupplierId");

                    b.ToTable("StockInHeaders");
                });

            modelBuilder.Entity("Purchases.CoreOne.Models.Domain.StockInReturnDetail", b =>
                {
                    b.Property<int>("StockInReturnDetailId")
                        .HasColumnType("int")
                        .HasColumnOrder(1);

                    b.Property<string>("BarCode")
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)")
                        .HasColumnOrder(7);

                    b.Property<string>("BatchNumber")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnOrder(10);

                    b.Property<decimal>("BonusQuantity")
                        .HasColumnType("decimal(30,15)")
                        .HasColumnOrder(12);

                    b.Property<decimal>("ConsumerPrice")
                        .HasColumnType("decimal(30,15)")
                        .HasColumnOrder(26);

                    b.Property<int?>("CostCenterId")
                        .HasColumnType("int")
                        .HasColumnOrder(3);

                    b.Property<decimal>("CostPackage")
                        .HasColumnType("decimal(30,15)")
                        .HasColumnOrder(28);

                    b.Property<decimal>("CostPrice")
                        .HasColumnType("decimal(30,15)")
                        .HasColumnOrder(27);

                    b.Property<decimal>("CostValue")
                        .HasColumnType("decimal(30,15)")
                        .HasColumnOrder(29);

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnOrder(200);

                    b.Property<DateTime?>("ExpireDate")
                        .HasColumnType("Date")
                        .HasColumnOrder(9);

                    b.Property<decimal>("GrossValue")
                        .HasColumnType("decimal(30,15)")
                        .HasColumnOrder(19);

                    b.Property<decimal>("HeaderDiscountValue")
                        .HasColumnType("decimal(30,15)")
                        .HasColumnOrder(18);

                    b.Property<bool?>("Hide")
                        .HasColumnType("tinyint(1)")
                        .HasColumnOrder(206);

                    b.Property<string>("IpAddressCreated")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnOrder(204);

                    b.Property<string>("IpAddressModified")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnOrder(205);

                    b.Property<bool>("IsItemVatInclusive")
                        .HasColumnType("tinyint(1)")
                        .HasColumnOrder(6);

                    b.Property<decimal>("ItemDiscountPercent")
                        .HasColumnType("decimal(30,15)")
                        .HasColumnOrder(15);

                    b.Property<decimal>("ItemDiscountValue")
                        .HasColumnType("decimal(30,15)")
                        .HasColumnOrder(16);

                    b.Property<int>("ItemId")
                        .HasColumnType("int")
                        .HasColumnOrder(4);

                    b.Property<string>("ItemNote")
                        .HasMaxLength(2000)
                        .HasColumnType("varchar(2000)")
                        .HasColumnOrder(31);

                    b.Property<int>("ItemPackageId")
                        .HasColumnType("int")
                        .HasColumnOrder(5);

                    b.Property<decimal>("LastPurchasePrice")
                        .HasColumnType("decimal(30,15)")
                        .HasColumnOrder(30);

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnOrder(201);

                    b.Property<decimal>("NetValue")
                        .HasColumnType("decimal(30,15)")
                        .HasColumnOrder(24);

                    b.Property<string>("Notes")
                        .HasMaxLength(2000)
                        .HasColumnType("varchar(2000)")
                        .HasColumnOrder(25);

                    b.Property<decimal>("OtherTaxValue")
                        .HasColumnType("decimal(30,15)")
                        .HasColumnOrder(23);

                    b.Property<decimal>("Packing")
                        .HasColumnType("decimal(30,15)")
                        .HasColumnOrder(8);

                    b.Property<decimal>("PurchasePrice")
                        .HasColumnType("decimal(30,15)")
                        .HasColumnOrder(13);

                    b.Property<decimal>("Quantity")
                        .HasColumnType("decimal(30,15)")
                        .HasColumnOrder(11);

                    b.Property<int>("StockInReturnHeaderId")
                        .HasColumnType("int")
                        .HasColumnOrder(2);

                    b.Property<decimal>("SubNetValue")
                        .HasColumnType("decimal(30,15)")
                        .HasColumnOrder(22);

                    b.Property<decimal>("TotalValue")
                        .HasColumnType("decimal(30,15)")
                        .HasColumnOrder(14);

                    b.Property<decimal>("TotalValueAfterDiscount")
                        .HasColumnType("decimal(30,15)")
                        .HasColumnOrder(17);

                    b.Property<string>("UserNameCreated")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnOrder(202);

                    b.Property<string>("UserNameModified")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnOrder(203);

                    b.Property<decimal>("VatPercent")
                        .HasColumnType("decimal(30,15)")
                        .HasColumnOrder(20);

                    b.Property<decimal>("VatValue")
                        .HasColumnType("decimal(30,15)")
                        .HasColumnOrder(21);

                    b.HasKey("StockInReturnDetailId");

                    b.HasIndex("ItemId");

                    b.HasIndex("ItemPackageId");

                    b.HasIndex("StockInReturnHeaderId");

                    b.ToTable("StockInReturnDetails");
                });

            modelBuilder.Entity("Purchases.CoreOne.Models.Domain.StockInReturnDetailTax", b =>
                {
                    b.Property<int>("StockInReturnDetailTaxId")
                        .HasColumnType("int")
                        .HasColumnOrder(1);

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnOrder(200);

                    b.Property<int>("CreditAccountId")
                        .HasColumnType("int")
                        .HasColumnOrder(5);

                    b.Property<bool?>("Hide")
                        .HasColumnType("tinyint(1)")
                        .HasColumnOrder(206);

                    b.Property<string>("IpAddressCreated")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnOrder(204);

                    b.Property<string>("IpAddressModified")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnOrder(205);

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnOrder(201);

                    b.Property<int>("StockInReturnDetailId")
                        .HasColumnType("int")
                        .HasColumnOrder(2);

                    b.Property<bool>("TaxAfterVatInclusive")
                        .HasColumnType("tinyint(1)")
                        .HasColumnOrder(4);

                    b.Property<int>("TaxId")
                        .HasColumnType("int")
                        .HasColumnOrder(3);

                    b.Property<decimal>("TaxPercent")
                        .HasColumnType("decimal(30,15)")
                        .HasColumnOrder(6);

                    b.Property<decimal>("TaxValue")
                        .HasColumnType("decimal(30,15)")
                        .HasColumnOrder(7);

                    b.Property<string>("UserNameCreated")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnOrder(202);

                    b.Property<string>("UserNameModified")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnOrder(203);

                    b.HasKey("StockInReturnDetailTaxId");

                    b.HasIndex("CreditAccountId");

                    b.HasIndex("StockInReturnDetailId");

                    b.HasIndex("TaxId");

                    b.ToTable("StockInReturnDetailTaxes");
                });

            modelBuilder.Entity("Purchases.CoreOne.Models.Domain.StockInReturnHeader", b =>
                {
                    b.Property<int>("StockInReturnHeaderId")
                        .HasColumnType("int")
                        .HasColumnOrder(1);

                    b.Property<decimal>("AdditionalDiscountValue")
                        .HasColumnType("decimal(30,15)")
                        .HasColumnOrder(23);

                    b.Property<int?>("ArchiveHeaderId")
                        .HasColumnType("int")
                        .HasColumnOrder(32);

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnOrder(200);

                    b.Property<decimal>("DiscountPercent")
                        .HasColumnType("decimal(30,15)")
                        .HasColumnOrder(15);

                    b.Property<decimal>("DiscountValue")
                        .HasColumnType("decimal(30,15)")
                        .HasColumnOrder(16);

                    b.Property<int>("DocumentCode")
                        .HasColumnType("int")
                        .HasColumnOrder(3);

                    b.Property<DateTime>("DocumentDate")
                        .HasColumnType("Date")
                        .HasColumnOrder(11);

                    b.Property<string>("DocumentReference")
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)")
                        .HasColumnOrder(5);

                    b.Property<DateTime>("EntryDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnOrder(12);

                    b.Property<decimal>("GrossValue")
                        .HasColumnType("decimal(30,15)")
                        .HasColumnOrder(18);

                    b.Property<bool?>("Hide")
                        .HasColumnType("tinyint(1)")
                        .HasColumnOrder(206);

                    b.Property<string>("IpAddressCreated")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnOrder(204);

                    b.Property<string>("IpAddressModified")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnOrder(205);

                    b.Property<bool>("IsBlocked")
                        .HasColumnType("tinyint(1)")
                        .HasColumnOrder(30);

                    b.Property<bool>("IsClosed")
                        .HasColumnType("tinyint(1)")
                        .HasColumnOrder(28);

                    b.Property<bool>("IsEnded")
                        .HasColumnType("tinyint(1)")
                        .HasColumnOrder(29);

                    b.Property<short?>("MenuCode")
                        .HasColumnType("smallint")
                        .HasColumnOrder(31);

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnOrder(201);

                    b.Property<decimal>("NetValue")
                        .HasColumnType("decimal(30,15)")
                        .HasColumnOrder(24);

                    b.Property<decimal>("NetValueBeforeAdditionalDiscount")
                        .HasColumnType("decimal(30,15)")
                        .HasColumnOrder(22);

                    b.Property<decimal>("OtherTaxValue")
                        .HasColumnType("decimal(30,15)")
                        .HasColumnOrder(21);

                    b.Property<string>("Prefix")
                        .HasMaxLength(10)
                        .HasColumnType("varchar(10)")
                        .HasColumnOrder(2);

                    b.Property<int?>("PurchaseInvoiceHeaderId")
                        .HasColumnType("int")
                        .HasColumnOrder(8);

                    b.Property<string>("Reference")
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)")
                        .HasColumnOrder(13);

                    b.Property<string>("RemarksAr")
                        .HasMaxLength(2000)
                        .HasColumnType("varchar(2000)")
                        .HasColumnOrder(26);

                    b.Property<string>("RemarksEn")
                        .HasMaxLength(2000)
                        .HasColumnType("varchar(2000)")
                        .HasColumnOrder(27);

                    b.Property<int?>("StockInHeaderId")
                        .HasColumnType("int")
                        .HasColumnOrder(7);

                    b.Property<byte>("StockTypeId")
                        .HasColumnType("tinyint unsigned")
                        .HasColumnOrder(6);

                    b.Property<int>("StoreId")
                        .HasColumnType("int")
                        .HasColumnOrder(10);

                    b.Property<decimal>("SubNetValue")
                        .HasColumnType("decimal(30,15)")
                        .HasColumnOrder(20);

                    b.Property<string>("Suffix")
                        .HasMaxLength(10)
                        .HasColumnType("varchar(10)")
                        .HasColumnOrder(4);

                    b.Property<int>("SupplierId")
                        .HasColumnType("int")
                        .HasColumnOrder(9);

                    b.Property<decimal>("TotalCostValue")
                        .HasColumnType("decimal(30,15)")
                        .HasColumnOrder(25);

                    b.Property<decimal>("TotalItemDiscount")
                        .HasColumnType("decimal(30,15)")
                        .HasColumnOrder(17);

                    b.Property<decimal>("TotalValue")
                        .HasColumnType("decimal(30,15)")
                        .HasColumnOrder(14);

                    b.Property<string>("UserNameCreated")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnOrder(202);

                    b.Property<string>("UserNameModified")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnOrder(203);

                    b.Property<decimal>("VatValue")
                        .HasColumnType("decimal(30,15)")
                        .HasColumnOrder(19);

                    b.HasKey("StockInReturnHeaderId");

                    b.HasIndex("ArchiveHeaderId");

                    b.HasIndex("MenuCode");

                    b.HasIndex("PurchaseInvoiceHeaderId");

                    b.HasIndex("StockInHeaderId");

                    b.HasIndex("StockTypeId");

                    b.HasIndex("StoreId");

                    b.HasIndex("SupplierId");

                    b.ToTable("StockInReturnHeaders");
                });

            modelBuilder.Entity("Purchases.CoreOne.Models.Domain.SupplierCreditMemo", b =>
                {
                    b.Property<int>("SupplierCreditMemoId")
                        .HasColumnType("int")
                        .HasColumnOrder(1);

                    b.Property<int?>("ArchiveHeaderId")
                        .HasColumnType("int")
                        .HasColumnOrder(19);

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnOrder(200);

                    b.Property<int>("CreditAccountId")
                        .HasColumnType("int")
                        .HasColumnOrder(13);

                    b.Property<int>("DebitAccountId")
                        .HasColumnType("int")
                        .HasColumnOrder(12);

                    b.Property<int>("DocumentCode")
                        .HasColumnType("int")
                        .HasColumnOrder(3);

                    b.Property<DateTime>("DocumentDate")
                        .HasColumnType("Date")
                        .HasColumnOrder(5);

                    b.Property<string>("DocumentReference")
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)")
                        .HasColumnOrder(7);

                    b.Property<DateTime>("EntryDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnOrder(6);

                    b.Property<bool?>("Hide")
                        .HasColumnType("tinyint(1)")
                        .HasColumnOrder(206);

                    b.Property<string>("IpAddressCreated")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnOrder(204);

                    b.Property<string>("IpAddressModified")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnOrder(205);

                    b.Property<bool>("IsClosed")
                        .HasColumnType("tinyint(1)")
                        .HasColumnOrder(18);

                    b.Property<int>("JournalHeaderId")
                        .HasColumnType("int")
                        .HasColumnOrder(15);

                    b.Property<decimal>("MemoValue")
                        .HasColumnType("decimal(30,15)")
                        .HasColumnOrder(14);

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnOrder(201);

                    b.Property<string>("Prefix")
                        .HasMaxLength(10)
                        .HasColumnType("varchar(10)")
                        .HasColumnOrder(2);

                    b.Property<int>("PurchaseInvoiceHeaderId")
                        .HasColumnType("int")
                        .HasColumnOrder(8);

                    b.Property<string>("Reference")
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)")
                        .HasColumnOrder(11);

                    b.Property<string>("RemarksAr")
                        .HasMaxLength(2000)
                        .HasColumnType("varchar(2000)")
                        .HasColumnOrder(16);

                    b.Property<string>("RemarksEn")
                        .HasMaxLength(2000)
                        .HasColumnType("varchar(2000)")
                        .HasColumnOrder(17);

                    b.Property<int>("StoreId")
                        .HasColumnType("int")
                        .HasColumnOrder(10);

                    b.Property<string>("Suffix")
                        .HasMaxLength(10)
                        .HasColumnType("varchar(10)")
                        .HasColumnOrder(4);

                    b.Property<int>("SupplierId")
                        .HasColumnType("int")
                        .HasColumnOrder(9);

                    b.Property<string>("UserNameCreated")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnOrder(202);

                    b.Property<string>("UserNameModified")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnOrder(203);

                    b.HasKey("SupplierCreditMemoId");

                    b.HasIndex("ArchiveHeaderId");

                    b.HasIndex("CreditAccountId");

                    b.HasIndex("DebitAccountId");

                    b.HasIndex("JournalHeaderId");

                    b.HasIndex("PurchaseInvoiceHeaderId");

                    b.HasIndex("StoreId");

                    b.HasIndex("SupplierId");

                    b.ToTable("SupplierCreditMemos");
                });

            modelBuilder.Entity("Purchases.CoreOne.Models.Domain.SupplierDebitMemo", b =>
                {
                    b.Property<int>("SupplierDebitMemoId")
                        .HasColumnType("int")
                        .HasColumnOrder(1);

                    b.Property<int?>("ArchiveHeaderId")
                        .HasColumnType("int")
                        .HasColumnOrder(19);

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnOrder(200);

                    b.Property<int>("CreditAccountId")
                        .HasColumnType("int")
                        .HasColumnOrder(13);

                    b.Property<int>("DebitAccountId")
                        .HasColumnType("int")
                        .HasColumnOrder(12);

                    b.Property<int>("DocumentCode")
                        .HasColumnType("int")
                        .HasColumnOrder(3);

                    b.Property<DateTime>("DocumentDate")
                        .HasColumnType("Date")
                        .HasColumnOrder(5);

                    b.Property<string>("DocumentReference")
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)")
                        .HasColumnOrder(7);

                    b.Property<DateTime>("EntryDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnOrder(6);

                    b.Property<bool?>("Hide")
                        .HasColumnType("tinyint(1)")
                        .HasColumnOrder(206);

                    b.Property<string>("IpAddressCreated")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnOrder(204);

                    b.Property<string>("IpAddressModified")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnOrder(205);

                    b.Property<bool>("IsClosed")
                        .HasColumnType("tinyint(1)")
                        .HasColumnOrder(18);

                    b.Property<int>("JournalHeaderId")
                        .HasColumnType("int")
                        .HasColumnOrder(15);

                    b.Property<decimal>("MemoValue")
                        .HasColumnType("decimal(30,15)")
                        .HasColumnOrder(14);

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnOrder(201);

                    b.Property<string>("Prefix")
                        .HasMaxLength(10)
                        .HasColumnType("varchar(10)")
                        .HasColumnOrder(2);

                    b.Property<int>("PurchaseInvoiceHeaderId")
                        .HasColumnType("int")
                        .HasColumnOrder(8);

                    b.Property<string>("Reference")
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)")
                        .HasColumnOrder(11);

                    b.Property<string>("RemarksAr")
                        .HasMaxLength(2000)
                        .HasColumnType("varchar(2000)")
                        .HasColumnOrder(16);

                    b.Property<string>("RemarksEn")
                        .HasMaxLength(2000)
                        .HasColumnType("varchar(2000)")
                        .HasColumnOrder(17);

                    b.Property<int>("StoreId")
                        .HasColumnType("int")
                        .HasColumnOrder(10);

                    b.Property<string>("Suffix")
                        .HasMaxLength(10)
                        .HasColumnType("varchar(10)")
                        .HasColumnOrder(4);

                    b.Property<int>("SupplierId")
                        .HasColumnType("int")
                        .HasColumnOrder(9);

                    b.Property<string>("UserNameCreated")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnOrder(202);

                    b.Property<string>("UserNameModified")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnOrder(203);

                    b.HasKey("SupplierDebitMemoId");

                    b.HasIndex("ArchiveHeaderId");

                    b.HasIndex("CreditAccountId");

                    b.HasIndex("DebitAccountId");

                    b.HasIndex("JournalHeaderId");

                    b.HasIndex("PurchaseInvoiceHeaderId");

                    b.HasIndex("StoreId");

                    b.HasIndex("SupplierId");

                    b.ToTable("SupplierDebitMemos");
                });

            modelBuilder.Entity("Purchases.CoreOne.Models.Domain.SupplierQuotationDetail", b =>
                {
                    b.Property<int>("SupplierQuotationDetailId")
                        .HasColumnType("int")
                        .HasColumnOrder(1);

                    b.Property<string>("BarCode")
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)")
                        .HasColumnOrder(7);

                    b.Property<decimal>("ConsumerPrice")
                        .HasColumnType("decimal(30,15)")
                        .HasColumnOrder(23);

                    b.Property<int?>("CostCenterId")
                        .HasColumnType("int")
                        .HasColumnOrder(3);

                    b.Property<decimal>("CostPackage")
                        .HasColumnType("decimal(30,15)")
                        .HasColumnOrder(25);

                    b.Property<decimal>("CostPrice")
                        .HasColumnType("decimal(30,15)")
                        .HasColumnOrder(24);

                    b.Property<decimal>("CostValue")
                        .HasColumnType("decimal(30,15)")
                        .HasColumnOrder(26);

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnOrder(200);

                    b.Property<decimal>("GrossValue")
                        .HasColumnType("decimal(30,15)")
                        .HasColumnOrder(16);

                    b.Property<decimal>("HeaderDiscountValue")
                        .HasColumnType("decimal(30,15)")
                        .HasColumnOrder(15);

                    b.Property<bool?>("Hide")
                        .HasColumnType("tinyint(1)")
                        .HasColumnOrder(206);

                    b.Property<string>("IpAddressCreated")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnOrder(204);

                    b.Property<string>("IpAddressModified")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnOrder(205);

                    b.Property<bool>("IsItemVatInclusive")
                        .HasColumnType("tinyint(1)")
                        .HasColumnOrder(6);

                    b.Property<decimal>("ItemDiscountPercent")
                        .HasColumnType("decimal(30,15)")
                        .HasColumnOrder(12);

                    b.Property<decimal>("ItemDiscountValue")
                        .HasColumnType("decimal(30,15)")
                        .HasColumnOrder(13);

                    b.Property<int>("ItemId")
                        .HasColumnType("int")
                        .HasColumnOrder(4);

                    b.Property<string>("ItemNote")
                        .HasMaxLength(2000)
                        .HasColumnType("varchar(2000)")
                        .HasColumnOrder(28);

                    b.Property<int>("ItemPackageId")
                        .HasColumnType("int")
                        .HasColumnOrder(5);

                    b.Property<decimal>("LastPurchasePrice")
                        .HasColumnType("decimal(30,15)")
                        .HasColumnOrder(27);

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnOrder(201);

                    b.Property<decimal>("NetValue")
                        .HasColumnType("decimal(30,15)")
                        .HasColumnOrder(21);

                    b.Property<string>("Notes")
                        .HasMaxLength(2000)
                        .HasColumnType("varchar(2000)")
                        .HasColumnOrder(22);

                    b.Property<decimal>("OtherTaxValue")
                        .HasColumnType("decimal(30,15)")
                        .HasColumnOrder(20);

                    b.Property<decimal>("Packing")
                        .HasColumnType("decimal(30,15)")
                        .HasColumnOrder(8);

                    b.Property<decimal>("Quantity")
                        .HasColumnType("decimal(30,15)")
                        .HasColumnOrder(9);

                    b.Property<decimal>("ReceivedPrice")
                        .HasColumnType("decimal(30,15)")
                        .HasColumnOrder(10);

                    b.Property<decimal>("SubNetValue")
                        .HasColumnType("decimal(30,15)")
                        .HasColumnOrder(19);

                    b.Property<int>("SupplierQuotationHeaderId")
                        .HasColumnType("int")
                        .HasColumnOrder(2);

                    b.Property<decimal>("TotalValue")
                        .HasColumnType("decimal(30,15)")
                        .HasColumnOrder(11);

                    b.Property<decimal>("TotalValueAfterDiscount")
                        .HasColumnType("decimal(30,15)")
                        .HasColumnOrder(14);

                    b.Property<string>("UserNameCreated")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnOrder(202);

                    b.Property<string>("UserNameModified")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnOrder(203);

                    b.Property<decimal>("VatPercent")
                        .HasColumnType("decimal(30,15)")
                        .HasColumnOrder(17);

                    b.Property<decimal>("VatValue")
                        .HasColumnType("decimal(30,15)")
                        .HasColumnOrder(18);

                    b.HasKey("SupplierQuotationDetailId");

                    b.HasIndex("CostCenterId");

                    b.HasIndex("ItemId");

                    b.HasIndex("ItemPackageId");

                    b.HasIndex("SupplierQuotationHeaderId");

                    b.ToTable("SupplierQuotationDetails");
                });

            modelBuilder.Entity("Purchases.CoreOne.Models.Domain.SupplierQuotationDetailTax", b =>
                {
                    b.Property<int>("SupplierQuotationDetailTaxId")
                        .HasColumnType("int")
                        .HasColumnOrder(1);

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnOrder(200);

                    b.Property<int>("DebitAccountId")
                        .HasColumnType("int")
                        .HasColumnOrder(5);

                    b.Property<bool?>("Hide")
                        .HasColumnType("tinyint(1)")
                        .HasColumnOrder(206);

                    b.Property<string>("IpAddressCreated")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnOrder(204);

                    b.Property<string>("IpAddressModified")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnOrder(205);

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnOrder(201);

                    b.Property<int>("SupplierQuotationDetailId")
                        .HasColumnType("int")
                        .HasColumnOrder(2);

                    b.Property<bool>("TaxAfterVatInclusive")
                        .HasColumnType("tinyint(1)")
                        .HasColumnOrder(4);

                    b.Property<int>("TaxId")
                        .HasColumnType("int")
                        .HasColumnOrder(3);

                    b.Property<decimal>("TaxPercent")
                        .HasColumnType("decimal(30,15)")
                        .HasColumnOrder(6);

                    b.Property<decimal>("TaxValue")
                        .HasColumnType("decimal(30,15)")
                        .HasColumnOrder(7);

                    b.Property<string>("UserNameCreated")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnOrder(202);

                    b.Property<string>("UserNameModified")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnOrder(203);

                    b.HasKey("SupplierQuotationDetailTaxId");

                    b.HasIndex("DebitAccountId");

                    b.HasIndex("SupplierQuotationDetailId");

                    b.HasIndex("TaxId");

                    b.ToTable("SupplierQuotationDetailTaxes");
                });

            modelBuilder.Entity("Purchases.CoreOne.Models.Domain.SupplierQuotationHeader", b =>
                {
                    b.Property<int>("SupplierQuotationHeaderId")
                        .HasColumnType("int")
                        .HasColumnOrder(1);

                    b.Property<decimal>("AdditionalDiscountValue")
                        .HasColumnType("decimal(30,15)")
                        .HasColumnOrder(22);

                    b.Property<int?>("ArchiveHeaderId")
                        .HasColumnType("int")
                        .HasColumnOrder(28);

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnOrder(200);

                    b.Property<decimal>("DiscountPercent")
                        .HasColumnType("decimal(30,15)")
                        .HasColumnOrder(14);

                    b.Property<decimal>("DiscountValue")
                        .HasColumnType("decimal(30,15)")
                        .HasColumnOrder(15);

                    b.Property<int>("DocumentCode")
                        .HasColumnType("int")
                        .HasColumnOrder(3);

                    b.Property<DateTime>("DocumentDate")
                        .HasColumnType("Date")
                        .HasColumnOrder(10);

                    b.Property<string>("DocumentReference")
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)")
                        .HasColumnOrder(7);

                    b.Property<DateTime>("EntryDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnOrder(11);

                    b.Property<decimal>("GrossValue")
                        .HasColumnType("decimal(30,15)")
                        .HasColumnOrder(17);

                    b.Property<bool?>("Hide")
                        .HasColumnType("tinyint(1)")
                        .HasColumnOrder(206);

                    b.Property<string>("IpAddressCreated")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnOrder(204);

                    b.Property<string>("IpAddressModified")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnOrder(205);

                    b.Property<bool>("IsClosed")
                        .HasColumnType("tinyint(1)")
                        .HasColumnOrder(27);

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnOrder(201);

                    b.Property<decimal>("NetValue")
                        .HasColumnType("decimal(30,15)")
                        .HasColumnOrder(23);

                    b.Property<decimal>("NetValueBeforeAdditionalDiscount")
                        .HasColumnType("decimal(30,15)")
                        .HasColumnOrder(21);

                    b.Property<decimal>("OtherTaxValue")
                        .HasColumnType("decimal(30,15)")
                        .HasColumnOrder(20);

                    b.Property<string>("Prefix")
                        .HasMaxLength(10)
                        .HasColumnType("varchar(10)")
                        .HasColumnOrder(2);

                    b.Property<int?>("ProductRequestPriceHeaderId")
                        .HasColumnType("int")
                        .HasColumnOrder(5);

                    b.Property<string>("Reference")
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)")
                        .HasColumnOrder(12);

                    b.Property<string>("RemarksAr")
                        .HasMaxLength(2000)
                        .HasColumnType("varchar(2000)")
                        .HasColumnOrder(25);

                    b.Property<string>("RemarksEn")
                        .HasMaxLength(2000)
                        .HasColumnType("varchar(2000)")
                        .HasColumnOrder(26);

                    b.Property<int>("StoreId")
                        .HasColumnType("int")
                        .HasColumnOrder(8);

                    b.Property<decimal>("SubNetValue")
                        .HasColumnType("decimal(30,15)")
                        .HasColumnOrder(19);

                    b.Property<string>("Suffix")
                        .HasMaxLength(10)
                        .HasColumnType("varchar(10)")
                        .HasColumnOrder(4);

                    b.Property<int>("SupplierId")
                        .HasColumnType("int")
                        .HasColumnOrder(6);

                    b.Property<byte>("TaxTypeId")
                        .HasColumnType("tinyint unsigned")
                        .HasColumnOrder(9);

                    b.Property<decimal>("TotalCostValue")
                        .HasColumnType("decimal(30,15)")
                        .HasColumnOrder(24);

                    b.Property<decimal>("TotalItemDiscount")
                        .HasColumnType("decimal(30,15)")
                        .HasColumnOrder(16);

                    b.Property<decimal>("TotalValue")
                        .HasColumnType("decimal(30,15)")
                        .HasColumnOrder(13);

                    b.Property<string>("UserNameCreated")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnOrder(202);

                    b.Property<string>("UserNameModified")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnOrder(203);

                    b.Property<decimal>("VatValue")
                        .HasColumnType("decimal(30,15)")
                        .HasColumnOrder(18);

                    b.HasKey("SupplierQuotationHeaderId");

                    b.HasIndex("ArchiveHeaderId");

                    b.HasIndex("ProductRequestPriceHeaderId");

                    b.HasIndex("StoreId");

                    b.HasIndex("SupplierId");

                    b.HasIndex("TaxTypeId");

                    b.ToTable("SupplierQuotationHeaders");
                });

            modelBuilder.Entity("Sales.CoreOne.Models.Domain.ClientCreditMemo", b =>
                {
                    b.Property<int>("ClientCreditMemoId")
                        .HasColumnType("int")
                        .HasColumnOrder(1);

                    b.Property<int?>("ArchiveHeaderId")
                        .HasColumnType("int")
                        .HasColumnOrder(20);

                    b.Property<int>("ClientId")
                        .HasColumnType("int")
                        .HasColumnOrder(9);

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnOrder(200);

                    b.Property<int>("CreditAccountId")
                        .HasColumnType("int")
                        .HasColumnOrder(14);

                    b.Property<int>("DebitAccountId")
                        .HasColumnType("int")
                        .HasColumnOrder(13);

                    b.Property<int>("DocumentCode")
                        .HasColumnType("int")
                        .HasColumnOrder(3);

                    b.Property<DateTime>("DocumentDate")
                        .HasColumnType("Date")
                        .HasColumnOrder(5);

                    b.Property<string>("DocumentReference")
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)")
                        .HasColumnOrder(7);

                    b.Property<DateTime>("EntryDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnOrder(6);

                    b.Property<bool?>("Hide")
                        .HasColumnType("tinyint(1)")
                        .HasColumnOrder(206);

                    b.Property<string>("IpAddressCreated")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnOrder(204);

                    b.Property<string>("IpAddressModified")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnOrder(205);

                    b.Property<bool>("IsClosed")
                        .HasColumnType("tinyint(1)")
                        .HasColumnOrder(19);

                    b.Property<int>("JournalHeaderId")
                        .HasColumnType("int")
                        .HasColumnOrder(16);

                    b.Property<decimal>("MemoValue")
                        .HasColumnType("decimal(30,15)")
                        .HasColumnOrder(15);

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnOrder(201);

                    b.Property<string>("Prefix")
                        .HasMaxLength(10)
                        .HasColumnType("varchar(10)")
                        .HasColumnOrder(2);

                    b.Property<string>("Reference")
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)")
                        .HasColumnOrder(12);

                    b.Property<string>("RemarksAr")
                        .HasMaxLength(2000)
                        .HasColumnType("varchar(2000)")
                        .HasColumnOrder(17);

                    b.Property<string>("RemarksEn")
                        .HasMaxLength(2000)
                        .HasColumnType("varchar(2000)")
                        .HasColumnOrder(18);

                    b.Property<int>("SalesInvoiceHeaderId")
                        .HasColumnType("int")
                        .HasColumnOrder(8);

                    b.Property<int?>("SellerId")
                        .HasColumnType("int")
                        .HasColumnOrder(10);

                    b.Property<int>("StoreId")
                        .HasColumnType("int")
                        .HasColumnOrder(11);

                    b.Property<string>("Suffix")
                        .HasMaxLength(10)
                        .HasColumnType("varchar(10)")
                        .HasColumnOrder(4);

                    b.Property<string>("UserNameCreated")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnOrder(202);

                    b.Property<string>("UserNameModified")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnOrder(203);

                    b.HasKey("ClientCreditMemoId");

                    b.HasIndex("ArchiveHeaderId");

                    b.HasIndex("ClientId");

                    b.HasIndex("CreditAccountId");

                    b.HasIndex("DebitAccountId");

                    b.HasIndex("JournalHeaderId");

                    b.HasIndex("SalesInvoiceHeaderId");

                    b.HasIndex("SellerId");

                    b.HasIndex("StoreId");

                    b.ToTable("ClientCreditMemos");
                });

            modelBuilder.Entity("Sales.CoreOne.Models.Domain.ClientDebitMemo", b =>
                {
                    b.Property<int>("ClientDebitMemoId")
                        .HasColumnType("int")
                        .HasColumnOrder(1);

                    b.Property<int?>("ArchiveHeaderId")
                        .HasColumnType("int")
                        .HasColumnOrder(20);

                    b.Property<int>("ClientId")
                        .HasColumnType("int")
                        .HasColumnOrder(9);

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnOrder(200);

                    b.Property<int>("CreditAccountId")
                        .HasColumnType("int")
                        .HasColumnOrder(14);

                    b.Property<int>("DebitAccountId")
                        .HasColumnType("int")
                        .HasColumnOrder(13);

                    b.Property<int>("DocumentCode")
                        .HasColumnType("int")
                        .HasColumnOrder(3);

                    b.Property<DateTime>("DocumentDate")
                        .HasColumnType("Date")
                        .HasColumnOrder(5);

                    b.Property<string>("DocumentReference")
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)")
                        .HasColumnOrder(7);

                    b.Property<DateTime>("EntryDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnOrder(6);

                    b.Property<bool?>("Hide")
                        .HasColumnType("tinyint(1)")
                        .HasColumnOrder(206);

                    b.Property<string>("IpAddressCreated")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnOrder(204);

                    b.Property<string>("IpAddressModified")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnOrder(205);

                    b.Property<bool>("IsClosed")
                        .HasColumnType("tinyint(1)")
                        .HasColumnOrder(19);

                    b.Property<int>("JournalHeaderId")
                        .HasColumnType("int")
                        .HasColumnOrder(16);

                    b.Property<decimal>("MemoValue")
                        .HasColumnType("decimal(30,15)")
                        .HasColumnOrder(15);

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnOrder(201);

                    b.Property<string>("Prefix")
                        .HasMaxLength(10)
                        .HasColumnType("varchar(10)")
                        .HasColumnOrder(2);

                    b.Property<string>("Reference")
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)")
                        .HasColumnOrder(12);

                    b.Property<string>("RemarksAr")
                        .HasMaxLength(2000)
                        .HasColumnType("varchar(2000)")
                        .HasColumnOrder(17);

                    b.Property<string>("RemarksEn")
                        .HasMaxLength(2000)
                        .HasColumnType("varchar(2000)")
                        .HasColumnOrder(18);

                    b.Property<int>("SalesInvoiceHeaderId")
                        .HasColumnType("int")
                        .HasColumnOrder(8);

                    b.Property<int?>("SellerId")
                        .HasColumnType("int")
                        .HasColumnOrder(10);

                    b.Property<int>("StoreId")
                        .HasColumnType("int")
                        .HasColumnOrder(11);

                    b.Property<string>("Suffix")
                        .HasMaxLength(10)
                        .HasColumnType("varchar(10)")
                        .HasColumnOrder(4);

                    b.Property<string>("UserNameCreated")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnOrder(202);

                    b.Property<string>("UserNameModified")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnOrder(203);

                    b.HasKey("ClientDebitMemoId");

                    b.HasIndex("ArchiveHeaderId");

                    b.HasIndex("ClientId");

                    b.HasIndex("CreditAccountId");

                    b.HasIndex("DebitAccountId");

                    b.HasIndex("JournalHeaderId");

                    b.HasIndex("SalesInvoiceHeaderId");

                    b.HasIndex("SellerId");

                    b.HasIndex("StoreId");

                    b.ToTable("ClientDebitMemos");
                });

            modelBuilder.Entity("Sales.CoreOne.Models.Domain.ClientPriceRequestDetail", b =>
                {
                    b.Property<int>("ClientPriceRequestDetailId")
                        .HasColumnType("int")
                        .HasColumnOrder(1);

                    b.Property<string>("BarCode")
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)")
                        .HasColumnOrder(7);

                    b.Property<int>("ClientPriceRequestHeaderId")
                        .HasColumnType("int")
                        .HasColumnOrder(2);

                    b.Property<decimal>("ConsumerPrice")
                        .HasColumnType("decimal(30,15)")
                        .HasColumnOrder(10);

                    b.Property<decimal>("ConsumerValue")
                        .HasColumnType("decimal(30,15)")
                        .HasColumnOrder(11);

                    b.Property<int?>("CostCenterId")
                        .HasColumnType("int")
                        .HasColumnOrder(6);

                    b.Property<decimal>("CostPackage")
                        .HasColumnType("decimal(30,15)")
                        .HasColumnOrder(13);

                    b.Property<decimal>("CostPrice")
                        .HasColumnType("decimal(30,15)")
                        .HasColumnOrder(12);

                    b.Property<decimal>("CostValue")
                        .HasColumnType("decimal(30,15)")
                        .HasColumnOrder(14);

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnOrder(200);

                    b.Property<bool?>("Hide")
                        .HasColumnType("tinyint(1)")
                        .HasColumnOrder(206);

                    b.Property<string>("IpAddressCreated")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnOrder(204);

                    b.Property<string>("IpAddressModified")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnOrder(205);

                    b.Property<bool>("IsItemVatInclusive")
                        .HasColumnType("tinyint(1)")
                        .HasColumnOrder(5);

                    b.Property<int>("ItemId")
                        .HasColumnType("int")
                        .HasColumnOrder(3);

                    b.Property<string>("ItemNote")
                        .HasMaxLength(2000)
                        .HasColumnType("varchar(2000)")
                        .HasColumnOrder(16);

                    b.Property<int>("ItemPackageId")
                        .HasColumnType("int")
                        .HasColumnOrder(4);

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnOrder(201);

                    b.Property<string>("Notes")
                        .HasMaxLength(2000)
                        .HasColumnType("varchar(2000)")
                        .HasColumnOrder(15);

                    b.Property<decimal>("Packing")
                        .HasColumnType("decimal(30,15)")
                        .HasColumnOrder(8);

                    b.Property<decimal>("Quantity")
                        .HasColumnType("decimal(30,15)")
                        .HasColumnOrder(9);

                    b.Property<string>("UserNameCreated")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnOrder(202);

                    b.Property<string>("UserNameModified")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnOrder(203);

                    b.HasKey("ClientPriceRequestDetailId");

                    b.HasIndex("ClientPriceRequestHeaderId");

                    b.HasIndex("CostCenterId");

                    b.HasIndex("ItemId");

                    b.HasIndex("ItemPackageId");

                    b.ToTable("ClientPriceRequestDetails");
                });

            modelBuilder.Entity("Sales.CoreOne.Models.Domain.ClientPriceRequestHeader", b =>
                {
                    b.Property<int>("ClientPriceRequestHeaderId")
                        .HasColumnType("int")
                        .HasColumnOrder(1);

                    b.Property<int?>("ArchiveHeaderId")
                        .HasColumnType("int")
                        .HasColumnOrder(17);

                    b.Property<int>("ClientId")
                        .HasColumnType("int")
                        .HasColumnOrder(7);

                    b.Property<decimal>("ConsumerValue")
                        .HasColumnType("decimal(30,15)")
                        .HasColumnOrder(12);

                    b.Property<decimal>("CostValue")
                        .HasColumnType("decimal(30,15)")
                        .HasColumnOrder(13);

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnOrder(200);

                    b.Property<int>("DocumentCode")
                        .HasColumnType("int")
                        .HasColumnOrder(3);

                    b.Property<DateTime>("DocumentDate")
                        .HasColumnType("Date")
                        .HasColumnOrder(9);

                    b.Property<string>("DocumentReference")
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)")
                        .HasColumnOrder(5);

                    b.Property<DateTime>("EntryDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnOrder(10);

                    b.Property<bool?>("Hide")
                        .HasColumnType("tinyint(1)")
                        .HasColumnOrder(206);

                    b.Property<string>("IpAddressCreated")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnOrder(204);

                    b.Property<string>("IpAddressModified")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnOrder(205);

                    b.Property<bool>("IsClosed")
                        .HasColumnType("tinyint(1)")
                        .HasColumnOrder(16);

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnOrder(201);

                    b.Property<string>("Prefix")
                        .HasMaxLength(10)
                        .HasColumnType("varchar(10)")
                        .HasColumnOrder(2);

                    b.Property<string>("Reference")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnOrder(11);

                    b.Property<string>("RemarksAr")
                        .HasMaxLength(2000)
                        .HasColumnType("varchar(2000)")
                        .HasColumnOrder(14);

                    b.Property<string>("RemarksEn")
                        .HasMaxLength(2000)
                        .HasColumnType("varchar(2000)")
                        .HasColumnOrder(15);

                    b.Property<int?>("SellerId")
                        .HasColumnType("int")
                        .HasColumnOrder(8);

                    b.Property<int>("StoreId")
                        .HasColumnType("int")
                        .HasColumnOrder(6);

                    b.Property<string>("Suffix")
                        .HasMaxLength(10)
                        .HasColumnType("varchar(10)")
                        .HasColumnOrder(4);

                    b.Property<string>("UserNameCreated")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnOrder(202);

                    b.Property<string>("UserNameModified")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnOrder(203);

                    b.HasKey("ClientPriceRequestHeaderId");

                    b.HasIndex("ArchiveHeaderId");

                    b.HasIndex("ClientId");

                    b.HasIndex("SellerId");

                    b.HasIndex("StoreId");

                    b.ToTable("ClientPriceRequestHeaders");
                });

            modelBuilder.Entity("Sales.CoreOne.Models.Domain.ClientQuotationApprovalDetail", b =>
                {
                    b.Property<int>("ClientQuotationApprovalDetailId")
                        .HasColumnType("int")
                        .HasColumnOrder(1);

                    b.Property<string>("BarCode")
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)")
                        .HasColumnOrder(7);

                    b.Property<int>("ClientQuotationApprovalHeaderId")
                        .HasColumnType("int")
                        .HasColumnOrder(2);

                    b.Property<decimal>("ConsumerPrice")
                        .HasColumnType("decimal(30,15)")
                        .HasColumnOrder(23);

                    b.Property<int?>("CostCenterId")
                        .HasColumnType("int")
                        .HasColumnOrder(6);

                    b.Property<decimal>("CostPackage")
                        .HasColumnType("decimal(30,15)")
                        .HasColumnOrder(25);

                    b.Property<decimal>("CostPrice")
                        .HasColumnType("decimal(30,15)")
                        .HasColumnOrder(24);

                    b.Property<decimal>("CostValue")
                        .HasColumnType("decimal(30,15)")
                        .HasColumnOrder(26);

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnOrder(200);

                    b.Property<decimal>("GrossValue")
                        .HasColumnType("decimal(30,15)")
                        .HasColumnOrder(16);

                    b.Property<decimal>("HeaderDiscountValue")
                        .HasColumnType("decimal(30,15)")
                        .HasColumnOrder(15);

                    b.Property<bool?>("Hide")
                        .HasColumnType("tinyint(1)")
                        .HasColumnOrder(206);

                    b.Property<string>("IpAddressCreated")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnOrder(204);

                    b.Property<string>("IpAddressModified")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnOrder(205);

                    b.Property<bool>("IsItemVatInclusive")
                        .HasColumnType("tinyint(1)")
                        .HasColumnOrder(5);

                    b.Property<decimal>("ItemDiscountPercent")
                        .HasColumnType("decimal(30,15)")
                        .HasColumnOrder(12);

                    b.Property<decimal>("ItemDiscountValue")
                        .HasColumnType("decimal(30,15)")
                        .HasColumnOrder(13);

                    b.Property<int>("ItemId")
                        .HasColumnType("int")
                        .HasColumnOrder(3);

                    b.Property<string>("ItemNote")
                        .HasMaxLength(2000)
                        .HasColumnType("varchar(2000)")
                        .HasColumnOrder(28);

                    b.Property<int>("ItemPackageId")
                        .HasColumnType("int")
                        .HasColumnOrder(4);

                    b.Property<decimal>("LastSalesPrice")
                        .HasColumnType("decimal(30,15)")
                        .HasColumnOrder(27);

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnOrder(201);

                    b.Property<decimal>("NetValue")
                        .HasColumnType("decimal(30,15)")
                        .HasColumnOrder(21);

                    b.Property<string>("Notes")
                        .HasMaxLength(2000)
                        .HasColumnType("varchar(2000)")
                        .HasColumnOrder(22);

                    b.Property<decimal>("OtherTaxValue")
                        .HasColumnType("decimal(30,15)")
                        .HasColumnOrder(20);

                    b.Property<decimal>("Packing")
                        .HasColumnType("decimal(30,15)")
                        .HasColumnOrder(8);

                    b.Property<decimal>("Quantity")
                        .HasColumnType("decimal(30,15)")
                        .HasColumnOrder(9);

                    b.Property<decimal>("SellingPrice")
                        .HasColumnType("decimal(30,15)")
                        .HasColumnOrder(10);

                    b.Property<decimal>("SubNetValue")
                        .HasColumnType("decimal(30,15)")
                        .HasColumnOrder(19);

                    b.Property<decimal>("TotalValue")
                        .HasColumnType("decimal(30,15)")
                        .HasColumnOrder(11);

                    b.Property<decimal>("TotalValueAfterDiscount")
                        .HasColumnType("decimal(30,15)")
                        .HasColumnOrder(14);

                    b.Property<string>("UserNameCreated")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnOrder(202);

                    b.Property<string>("UserNameModified")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnOrder(203);

                    b.Property<decimal>("VatPercent")
                        .HasColumnType("decimal(30,15)")
                        .HasColumnOrder(17);

                    b.Property<decimal>("VatValue")
                        .HasColumnType("decimal(30,15)")
                        .HasColumnOrder(18);

                    b.HasKey("ClientQuotationApprovalDetailId");

                    b.HasIndex("ClientQuotationApprovalHeaderId");

                    b.HasIndex("CostCenterId");

                    b.HasIndex("ItemId");

                    b.HasIndex("ItemPackageId");

                    b.ToTable("ClientQuotationApprovalDetails");
                });

            modelBuilder.Entity("Sales.CoreOne.Models.Domain.ClientQuotationApprovalDetailTax", b =>
                {
                    b.Property<int>("ClientQuotationApprovalDetailTaxId")
                        .HasColumnType("int")
                        .HasColumnOrder(1);

                    b.Property<int>("ClientQuotationApprovalDetailId")
                        .HasColumnType("int")
                        .HasColumnOrder(2);

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnOrder(200);

                    b.Property<int>("CreditAccountId")
                        .HasColumnType("int")
                        .HasColumnOrder(5);

                    b.Property<bool?>("Hide")
                        .HasColumnType("tinyint(1)")
                        .HasColumnOrder(206);

                    b.Property<string>("IpAddressCreated")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnOrder(204);

                    b.Property<string>("IpAddressModified")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnOrder(205);

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnOrder(201);

                    b.Property<bool>("TaxAfterVatInclusive")
                        .HasColumnType("tinyint(1)")
                        .HasColumnOrder(4);

                    b.Property<int>("TaxId")
                        .HasColumnType("int")
                        .HasColumnOrder(3);

                    b.Property<decimal>("TaxPercent")
                        .HasColumnType("decimal(30,15)")
                        .HasColumnOrder(6);

                    b.Property<decimal>("TaxValue")
                        .HasColumnType("decimal(30,15)")
                        .HasColumnOrder(7);

                    b.Property<string>("UserNameCreated")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnOrder(202);

                    b.Property<string>("UserNameModified")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnOrder(203);

                    b.HasKey("ClientQuotationApprovalDetailTaxId");

                    b.HasIndex("ClientQuotationApprovalDetailId");

                    b.HasIndex("CreditAccountId");

                    b.HasIndex("TaxId");

                    b.ToTable("ClientQuotationDetailApprovalTaxes");
                });

            modelBuilder.Entity("Sales.CoreOne.Models.Domain.ClientQuotationApprovalHeader", b =>
                {
                    b.Property<int>("ClientQuotationHeaderApprovalId")
                        .HasColumnType("int")
                        .HasColumnOrder(1);

                    b.Property<decimal>("AdditionalDiscountValue")
                        .HasColumnType("decimal(30,15)")
                        .HasColumnOrder(23);

                    b.Property<int?>("ArchiveHeaderId")
                        .HasColumnType("int")
                        .HasColumnOrder(29);

                    b.Property<int>("ClientId")
                        .HasColumnType("int")
                        .HasColumnOrder(6);

                    b.Property<int?>("ClientQuotationHeaderId")
                        .HasColumnType("int")
                        .HasColumnOrder(5);

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnOrder(200);

                    b.Property<decimal>("DiscountPercent")
                        .HasColumnType("decimal(30,15)")
                        .HasColumnOrder(15);

                    b.Property<decimal>("DiscountValue")
                        .HasColumnType("decimal(30,15)")
                        .HasColumnOrder(16);

                    b.Property<int>("DocumentCode")
                        .HasColumnType("int")
                        .HasColumnOrder(3);

                    b.Property<DateTime>("DocumentDate")
                        .HasColumnType("Date")
                        .HasColumnOrder(11);

                    b.Property<string>("DocumentReference")
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)")
                        .HasColumnOrder(8);

                    b.Property<DateTime>("EntryDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnOrder(12);

                    b.Property<decimal>("GrossValue")
                        .HasColumnType("decimal(30,15)")
                        .HasColumnOrder(18);

                    b.Property<bool?>("Hide")
                        .HasColumnType("tinyint(1)")
                        .HasColumnOrder(206);

                    b.Property<string>("IpAddressCreated")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnOrder(204);

                    b.Property<string>("IpAddressModified")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnOrder(205);

                    b.Property<bool>("IsClosed")
                        .HasColumnType("tinyint(1)")
                        .HasColumnOrder(28);

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnOrder(201);

                    b.Property<decimal>("NetValue")
                        .HasColumnType("decimal(30,15)")
                        .HasColumnOrder(24);

                    b.Property<decimal>("NetValueBeforeAdditionalDiscount")
                        .HasColumnType("decimal(30,15)")
                        .HasColumnOrder(22);

                    b.Property<decimal>("OtherTaxValue")
                        .HasColumnType("decimal(30,15)")
                        .HasColumnOrder(21);

                    b.Property<string>("Prefix")
                        .HasMaxLength(10)
                        .HasColumnType("varchar(10)")
                        .HasColumnOrder(2);

                    b.Property<string>("Reference")
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)")
                        .HasColumnOrder(13);

                    b.Property<string>("RemarksAr")
                        .HasMaxLength(2000)
                        .HasColumnType("varchar(2000)")
                        .HasColumnOrder(26);

                    b.Property<string>("RemarksEn")
                        .HasMaxLength(2000)
                        .HasColumnType("varchar(2000)")
                        .HasColumnOrder(27);

                    b.Property<int?>("SellerId")
                        .HasColumnType("int")
                        .HasColumnOrder(7);

                    b.Property<int>("StoreId")
                        .HasColumnType("int")
                        .HasColumnOrder(9);

                    b.Property<decimal>("SubNetValue")
                        .HasColumnType("decimal(30,15)")
                        .HasColumnOrder(20);

                    b.Property<string>("Suffix")
                        .HasMaxLength(10)
                        .HasColumnType("varchar(10)")
                        .HasColumnOrder(4);

                    b.Property<byte>("TaxTypeId")
                        .HasColumnType("tinyint unsigned")
                        .HasColumnOrder(10);

                    b.Property<decimal>("TotalCostValue")
                        .HasColumnType("decimal(30,15)")
                        .HasColumnOrder(25);

                    b.Property<decimal>("TotalItemDiscount")
                        .HasColumnType("decimal(30,15)")
                        .HasColumnOrder(17);

                    b.Property<decimal>("TotalValue")
                        .HasColumnType("decimal(30,15)")
                        .HasColumnOrder(14);

                    b.Property<string>("UserNameCreated")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnOrder(202);

                    b.Property<string>("UserNameModified")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnOrder(203);

                    b.Property<decimal>("VatValue")
                        .HasColumnType("decimal(30,15)")
                        .HasColumnOrder(19);

                    b.HasKey("ClientQuotationHeaderApprovalId");

                    b.HasIndex("ArchiveHeaderId");

                    b.HasIndex("ClientId");

                    b.HasIndex("ClientQuotationHeaderId");

                    b.HasIndex("SellerId");

                    b.HasIndex("StoreId");

                    b.HasIndex("TaxTypeId");

                    b.ToTable("ClientQuotationApprovalHeaders");
                });

            modelBuilder.Entity("Sales.CoreOne.Models.Domain.ClientQuotationDetail", b =>
                {
                    b.Property<int>("ClientQuotationDetailId")
                        .HasColumnType("int")
                        .HasColumnOrder(1);

                    b.Property<string>("BarCode")
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)")
                        .HasColumnOrder(7);

                    b.Property<int>("ClientQuotationHeaderId")
                        .HasColumnType("int")
                        .HasColumnOrder(2);

                    b.Property<decimal>("ConsumerPrice")
                        .HasColumnType("decimal(30,15)")
                        .HasColumnOrder(23);

                    b.Property<int?>("CostCenterId")
                        .HasColumnType("int")
                        .HasColumnOrder(6);

                    b.Property<decimal>("CostPackage")
                        .HasColumnType("decimal(30,15)")
                        .HasColumnOrder(25);

                    b.Property<decimal>("CostPrice")
                        .HasColumnType("decimal(30,15)")
                        .HasColumnOrder(24);

                    b.Property<decimal>("CostValue")
                        .HasColumnType("decimal(30,15)")
                        .HasColumnOrder(26);

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnOrder(200);

                    b.Property<decimal>("GrossValue")
                        .HasColumnType("decimal(30,15)")
                        .HasColumnOrder(16);

                    b.Property<decimal>("HeaderDiscountValue")
                        .HasColumnType("decimal(30,15)")
                        .HasColumnOrder(15);

                    b.Property<bool?>("Hide")
                        .HasColumnType("tinyint(1)")
                        .HasColumnOrder(206);

                    b.Property<string>("IpAddressCreated")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnOrder(204);

                    b.Property<string>("IpAddressModified")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnOrder(205);

                    b.Property<bool>("IsItemVatInclusive")
                        .HasColumnType("tinyint(1)")
                        .HasColumnOrder(5);

                    b.Property<decimal>("ItemDiscountPercent")
                        .HasColumnType("decimal(30,15)")
                        .HasColumnOrder(12);

                    b.Property<decimal>("ItemDiscountValue")
                        .HasColumnType("decimal(30,15)")
                        .HasColumnOrder(13);

                    b.Property<int>("ItemId")
                        .HasColumnType("int")
                        .HasColumnOrder(3);

                    b.Property<string>("ItemNote")
                        .HasMaxLength(2000)
                        .HasColumnType("varchar(2000)")
                        .HasColumnOrder(28);

                    b.Property<int>("ItemPackageId")
                        .HasColumnType("int")
                        .HasColumnOrder(4);

                    b.Property<decimal>("LastSalesPrice")
                        .HasColumnType("decimal(30,15)")
                        .HasColumnOrder(27);

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnOrder(201);

                    b.Property<decimal>("NetValue")
                        .HasColumnType("decimal(30,15)")
                        .HasColumnOrder(21);

                    b.Property<string>("Notes")
                        .HasMaxLength(2000)
                        .HasColumnType("varchar(2000)")
                        .HasColumnOrder(22);

                    b.Property<decimal>("OtherTaxValue")
                        .HasColumnType("decimal(30,15)")
                        .HasColumnOrder(20);

                    b.Property<decimal>("Packing")
                        .HasColumnType("decimal(30,15)")
                        .HasColumnOrder(8);

                    b.Property<decimal>("Quantity")
                        .HasColumnType("decimal(30,15)")
                        .HasColumnOrder(9);

                    b.Property<decimal>("SellingPrice")
                        .HasColumnType("decimal(30,15)")
                        .HasColumnOrder(10);

                    b.Property<decimal>("SubNetValue")
                        .HasColumnType("decimal(30,15)")
                        .HasColumnOrder(19);

                    b.Property<decimal>("TotalValue")
                        .HasColumnType("decimal(30,15)")
                        .HasColumnOrder(11);

                    b.Property<decimal>("TotalValueAfterDiscount")
                        .HasColumnType("decimal(30,15)")
                        .HasColumnOrder(14);

                    b.Property<string>("UserNameCreated")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnOrder(202);

                    b.Property<string>("UserNameModified")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnOrder(203);

                    b.Property<decimal>("VatPercent")
                        .HasColumnType("decimal(30,15)")
                        .HasColumnOrder(17);

                    b.Property<decimal>("VatValue")
                        .HasColumnType("decimal(30,15)")
                        .HasColumnOrder(18);

                    b.HasKey("ClientQuotationDetailId");

                    b.HasIndex("ClientQuotationHeaderId");

                    b.HasIndex("CostCenterId");

                    b.HasIndex("ItemId");

                    b.HasIndex("ItemPackageId");

                    b.ToTable("ClientQuotationDetails");
                });

            modelBuilder.Entity("Sales.CoreOne.Models.Domain.ClientQuotationDetailTax", b =>
                {
                    b.Property<int>("ClientQuotationDetailTaxId")
                        .HasColumnType("int")
                        .HasColumnOrder(1);

                    b.Property<int>("ClientQuotationDetailId")
                        .HasColumnType("int")
                        .HasColumnOrder(2);

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnOrder(200);

                    b.Property<int>("CreditAccountId")
                        .HasColumnType("int")
                        .HasColumnOrder(5);

                    b.Property<bool?>("Hide")
                        .HasColumnType("tinyint(1)")
                        .HasColumnOrder(206);

                    b.Property<string>("IpAddressCreated")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnOrder(204);

                    b.Property<string>("IpAddressModified")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnOrder(205);

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnOrder(201);

                    b.Property<bool>("TaxAfterVatInclusive")
                        .HasColumnType("tinyint(1)")
                        .HasColumnOrder(4);

                    b.Property<int>("TaxId")
                        .HasColumnType("int")
                        .HasColumnOrder(3);

                    b.Property<decimal>("TaxPercent")
                        .HasColumnType("decimal(30,15)")
                        .HasColumnOrder(6);

                    b.Property<decimal>("TaxValue")
                        .HasColumnType("decimal(30,15)")
                        .HasColumnOrder(7);

                    b.Property<string>("UserNameCreated")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnOrder(202);

                    b.Property<string>("UserNameModified")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnOrder(203);

                    b.HasKey("ClientQuotationDetailTaxId");

                    b.HasIndex("ClientQuotationDetailId");

                    b.HasIndex("CreditAccountId");

                    b.HasIndex("TaxId");

                    b.ToTable("ClientQuotationDetailTaxes");
                });

            modelBuilder.Entity("Sales.CoreOne.Models.Domain.ClientQuotationHeader", b =>
                {
                    b.Property<int>("ClientQuotationHeaderId")
                        .HasColumnType("int")
                        .HasColumnOrder(1);

                    b.Property<decimal>("AdditionalDiscountValue")
                        .HasColumnType("decimal(30,15)")
                        .HasColumnOrder(23);

                    b.Property<int?>("ArchiveHeaderId")
                        .HasColumnType("int")
                        .HasColumnOrder(31);

                    b.Property<int>("ClientId")
                        .HasColumnType("int")
                        .HasColumnOrder(6);

                    b.Property<int?>("ClientPriceRequestHeaderId")
                        .HasColumnType("int")
                        .HasColumnOrder(5);

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnOrder(200);

                    b.Property<decimal>("DiscountPercent")
                        .HasColumnType("decimal(30,15)")
                        .HasColumnOrder(15);

                    b.Property<decimal>("DiscountValue")
                        .HasColumnType("decimal(30,15)")
                        .HasColumnOrder(16);

                    b.Property<int>("DocumentCode")
                        .HasColumnType("int")
                        .HasColumnOrder(3);

                    b.Property<DateTime>("DocumentDate")
                        .HasColumnType("Date")
                        .HasColumnOrder(11);

                    b.Property<string>("DocumentReference")
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)")
                        .HasColumnOrder(8);

                    b.Property<DateTime>("EntryDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnOrder(12);

                    b.Property<decimal>("GrossValue")
                        .HasColumnType("decimal(30,15)")
                        .HasColumnOrder(18);

                    b.Property<bool?>("Hide")
                        .HasColumnType("tinyint(1)")
                        .HasColumnOrder(206);

                    b.Property<string>("IpAddressCreated")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnOrder(204);

                    b.Property<string>("IpAddressModified")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnOrder(205);

                    b.Property<bool>("IsClosed")
                        .HasColumnType("tinyint(1)")
                        .HasColumnOrder(30);

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnOrder(201);

                    b.Property<decimal>("NetValue")
                        .HasColumnType("decimal(30,15)")
                        .HasColumnOrder(24);

                    b.Property<decimal>("NetValueBeforeAdditionalDiscount")
                        .HasColumnType("decimal(30,15)")
                        .HasColumnOrder(22);

                    b.Property<decimal>("OtherTaxValue")
                        .HasColumnType("decimal(30,15)")
                        .HasColumnOrder(21);

                    b.Property<string>("Prefix")
                        .HasMaxLength(10)
                        .HasColumnType("varchar(10)")
                        .HasColumnOrder(2);

                    b.Property<string>("Reference")
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)")
                        .HasColumnOrder(13);

                    b.Property<string>("RemarksAr")
                        .HasMaxLength(2000)
                        .HasColumnType("varchar(2000)")
                        .HasColumnOrder(28);

                    b.Property<string>("RemarksEn")
                        .HasMaxLength(2000)
                        .HasColumnType("varchar(2000)")
                        .HasColumnOrder(29);

                    b.Property<int?>("SellerId")
                        .HasColumnType("int")
                        .HasColumnOrder(7);

                    b.Property<int>("StoreId")
                        .HasColumnType("int")
                        .HasColumnOrder(9);

                    b.Property<decimal>("SubNetValue")
                        .HasColumnType("decimal(30,15)")
                        .HasColumnOrder(20);

                    b.Property<string>("Suffix")
                        .HasMaxLength(10)
                        .HasColumnType("varchar(10)")
                        .HasColumnOrder(4);

                    b.Property<byte>("TaxTypeId")
                        .HasColumnType("tinyint unsigned")
                        .HasColumnOrder(10);

                    b.Property<decimal>("TotalCostValue")
                        .HasColumnType("decimal(30,15)")
                        .HasColumnOrder(25);

                    b.Property<decimal>("TotalItemDiscount")
                        .HasColumnType("decimal(30,15)")
                        .HasColumnOrder(17);

                    b.Property<decimal>("TotalValue")
                        .HasColumnType("decimal(30,15)")
                        .HasColumnOrder(14);

                    b.Property<string>("UserNameCreated")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnOrder(202);

                    b.Property<string>("UserNameModified")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnOrder(203);

                    b.Property<int>("ValidInDays")
                        .HasColumnType("int")
                        .HasColumnOrder(26);

                    b.Property<DateTime>("ValidUntilDate")
                        .HasColumnType("Date")
                        .HasColumnOrder(27);

                    b.Property<decimal>("VatValue")
                        .HasColumnType("decimal(30,15)")
                        .HasColumnOrder(19);

                    b.HasKey("ClientQuotationHeaderId");

                    b.HasIndex("ArchiveHeaderId");

                    b.HasIndex("ClientId");

                    b.HasIndex("ClientPriceRequestHeaderId");

                    b.HasIndex("SellerId");

                    b.HasIndex("StoreId");

                    b.HasIndex("TaxTypeId");

                    b.ToTable("ClientQuotationHeaders");
                });

            modelBuilder.Entity("Sales.CoreOne.Models.Domain.InvoiceStockOut", b =>
                {
                    b.Property<int>("InvoiceStockOutId")
                        .HasColumnType("int")
                        .HasColumnOrder(1);

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnOrder(200);

                    b.Property<bool?>("Hide")
                        .HasColumnType("tinyint(1)")
                        .HasColumnOrder(206);

                    b.Property<string>("IpAddressCreated")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnOrder(204);

                    b.Property<string>("IpAddressModified")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnOrder(205);

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnOrder(201);

                    b.Property<int>("SalesInvoiceHeaderId")
                        .HasColumnType("int")
                        .HasColumnOrder(2);

                    b.Property<int>("StockOutHeaderId")
                        .HasColumnType("int")
                        .HasColumnOrder(3);

                    b.Property<string>("UserNameCreated")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnOrder(202);

                    b.Property<string>("UserNameModified")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnOrder(203);

                    b.HasKey("InvoiceStockOutId");

                    b.HasIndex("SalesInvoiceHeaderId");

                    b.HasIndex("StockOutHeaderId");

                    b.ToTable("InvoiceStockOuts");
                });

            modelBuilder.Entity("Sales.CoreOne.Models.Domain.InvoiceStockOutReturn", b =>
                {
                    b.Property<int>("InvoiceStockOutReturnId")
                        .HasColumnType("int")
                        .HasColumnOrder(1);

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnOrder(200);

                    b.Property<bool?>("Hide")
                        .HasColumnType("tinyint(1)")
                        .HasColumnOrder(206);

                    b.Property<string>("IpAddressCreated")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnOrder(204);

                    b.Property<string>("IpAddressModified")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnOrder(205);

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnOrder(201);

                    b.Property<int>("SalesInvoiceReturnHeaderId")
                        .HasColumnType("int")
                        .HasColumnOrder(3);

                    b.Property<int>("StockOutReturnHeaderId")
                        .HasColumnType("int")
                        .HasColumnOrder(2);

                    b.Property<string>("UserNameCreated")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnOrder(202);

                    b.Property<string>("UserNameModified")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnOrder(203);

                    b.HasKey("InvoiceStockOutReturnId");

                    b.HasIndex("SalesInvoiceReturnHeaderId");

                    b.HasIndex("StockOutReturnHeaderId");

                    b.ToTable("InvoiceStockOutReturns");
                });

            modelBuilder.Entity("Sales.CoreOne.Models.Domain.ProformaInvoiceDetail", b =>
                {
                    b.Property<int>("ProformaInvoiceDetailId")
                        .HasColumnType("int")
                        .HasColumnOrder(1);

                    b.Property<string>("BarCode")
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)")
                        .HasColumnOrder(7);

                    b.Property<decimal>("BonusQuantity")
                        .HasColumnType("decimal(30,15)")
                        .HasColumnOrder(10);

                    b.Property<decimal>("ConsumerPrice")
                        .HasColumnType("decimal(30,15)")
                        .HasColumnOrder(24);

                    b.Property<int?>("CostCenterId")
                        .HasColumnType("int")
                        .HasColumnOrder(3);

                    b.Property<decimal>("CostPackage")
                        .HasColumnType("decimal(30,15)")
                        .HasColumnOrder(26);

                    b.Property<decimal>("CostPrice")
                        .HasColumnType("decimal(30,15)")
                        .HasColumnOrder(25);

                    b.Property<decimal>("CostValue")
                        .HasColumnType("decimal(30,15)")
                        .HasColumnOrder(27);

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnOrder(200);

                    b.Property<decimal>("GrossValue")
                        .HasColumnType("decimal(30,15)")
                        .HasColumnOrder(17);

                    b.Property<decimal>("HeaderDiscountValue")
                        .HasColumnType("decimal(30,15)")
                        .HasColumnOrder(16);

                    b.Property<bool?>("Hide")
                        .HasColumnType("tinyint(1)")
                        .HasColumnOrder(206);

                    b.Property<string>("IpAddressCreated")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnOrder(204);

                    b.Property<string>("IpAddressModified")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnOrder(205);

                    b.Property<bool>("IsItemVatInclusive")
                        .HasColumnType("tinyint(1)")
                        .HasColumnOrder(6);

                    b.Property<decimal>("ItemDiscountPercent")
                        .HasColumnType("decimal(30,15)")
                        .HasColumnOrder(13);

                    b.Property<decimal>("ItemDiscountValue")
                        .HasColumnType("decimal(30,15)")
                        .HasColumnOrder(14);

                    b.Property<int>("ItemId")
                        .HasColumnType("int")
                        .HasColumnOrder(4);

                    b.Property<string>("ItemNote")
                        .HasMaxLength(2000)
                        .HasColumnType("varchar(2000)")
                        .HasColumnOrder(29);

                    b.Property<int>("ItemPackageId")
                        .HasColumnType("int")
                        .HasColumnOrder(5);

                    b.Property<decimal>("LastSalesPrice")
                        .HasColumnType("decimal(30,15)")
                        .HasColumnOrder(28);

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnOrder(201);

                    b.Property<decimal>("NetValue")
                        .HasColumnType("decimal(30,15)")
                        .HasColumnOrder(22);

                    b.Property<string>("Notes")
                        .HasMaxLength(2000)
                        .HasColumnType("varchar(2000)")
                        .HasColumnOrder(23);

                    b.Property<decimal>("OtherTaxValue")
                        .HasColumnType("decimal(30,15)")
                        .HasColumnOrder(21);

                    b.Property<decimal>("Packing")
                        .HasColumnType("decimal(30,15)")
                        .HasColumnOrder(8);

                    b.Property<int>("ProformaInvoiceHeaderId")
                        .HasColumnType("int")
                        .HasColumnOrder(2);

                    b.Property<decimal>("Quantity")
                        .HasColumnType("decimal(30,15)")
                        .HasColumnOrder(9);

                    b.Property<decimal>("SellingPrice")
                        .HasColumnType("decimal(30,15)")
                        .HasColumnOrder(11);

                    b.Property<decimal>("SubNetValue")
                        .HasColumnType("decimal(30,15)")
                        .HasColumnOrder(20);

                    b.Property<decimal>("TotalValue")
                        .HasColumnType("decimal(30,15)")
                        .HasColumnOrder(12);

                    b.Property<decimal>("TotalValueAfterDiscount")
                        .HasColumnType("decimal(30,15)")
                        .HasColumnOrder(15);

                    b.Property<string>("UserNameCreated")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnOrder(202);

                    b.Property<string>("UserNameModified")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnOrder(203);

                    b.Property<decimal>("VatPercent")
                        .HasColumnType("decimal(30,15)")
                        .HasColumnOrder(18);

                    b.Property<decimal>("VatValue")
                        .HasColumnType("decimal(30,15)")
                        .HasColumnOrder(19);

                    b.HasKey("ProformaInvoiceDetailId");

                    b.HasIndex("CostCenterId");

                    b.HasIndex("ItemId");

                    b.HasIndex("ItemPackageId");

                    b.HasIndex("ProformaInvoiceHeaderId");

                    b.ToTable("ProformaInvoiceDetails");
                });

            modelBuilder.Entity("Sales.CoreOne.Models.Domain.ProformaInvoiceDetailTax", b =>
                {
                    b.Property<int>("ProformaInvoiceDetailTaxId")
                        .HasColumnType("int")
                        .HasColumnOrder(1);

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnOrder(200);

                    b.Property<int>("CreditAccountId")
                        .HasColumnType("int")
                        .HasColumnOrder(5);

                    b.Property<bool?>("Hide")
                        .HasColumnType("tinyint(1)")
                        .HasColumnOrder(206);

                    b.Property<string>("IpAddressCreated")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnOrder(204);

                    b.Property<string>("IpAddressModified")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnOrder(205);

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnOrder(201);

                    b.Property<int>("ProformaInvoiceDetailId")
                        .HasColumnType("int")
                        .HasColumnOrder(2);

                    b.Property<bool>("TaxAfterVatInclusive")
                        .HasColumnType("tinyint(1)")
                        .HasColumnOrder(4);

                    b.Property<int>("TaxId")
                        .HasColumnType("int")
                        .HasColumnOrder(3);

                    b.Property<decimal>("TaxPercent")
                        .HasColumnType("decimal(30,15)")
                        .HasColumnOrder(6);

                    b.Property<decimal>("TaxValue")
                        .HasColumnType("decimal(30,15)")
                        .HasColumnOrder(7);

                    b.Property<string>("UserNameCreated")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnOrder(202);

                    b.Property<string>("UserNameModified")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnOrder(203);

                    b.HasKey("ProformaInvoiceDetailTaxId");

                    b.HasIndex("CreditAccountId");

                    b.HasIndex("ProformaInvoiceDetailId");

                    b.HasIndex("TaxId");

                    b.ToTable("ProformaInvoiceDetailTaxes");
                });

            modelBuilder.Entity("Sales.CoreOne.Models.Domain.ProformaInvoiceHeader", b =>
                {
                    b.Property<int>("ProformaInvoiceHeaderId")
                        .HasColumnType("int")
                        .HasColumnOrder(1);

                    b.Property<decimal>("AdditionalDiscountValue")
                        .HasColumnType("decimal(30,15)")
                        .HasColumnOrder(39);

                    b.Property<int?>("ArchiveHeaderId")
                        .HasColumnType("int")
                        .HasColumnOrder(50);

                    b.Property<string>("BillTo")
                        .HasMaxLength(2000)
                        .HasColumnType("varchar(2000)")
                        .HasColumnOrder(28);

                    b.Property<string>("ClientAddress")
                        .HasMaxLength(2000)
                        .HasColumnType("varchar(2000)")
                        .HasColumnOrder(21);

                    b.Property<int>("ClientId")
                        .HasColumnType("int")
                        .HasColumnOrder(9);

                    b.Property<string>("ClientName")
                        .HasMaxLength(1000)
                        .HasColumnType("varchar(1000)")
                        .HasColumnOrder(19);

                    b.Property<string>("ClientPhone")
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)")
                        .HasColumnOrder(20);

                    b.Property<int?>("ClientQuotationApprovalHeaderId")
                        .HasColumnType("int")
                        .HasColumnOrder(5);

                    b.Property<string>("ClientResponsibleName")
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)")
                        .HasColumnOrder(25);

                    b.Property<string>("ClientResponsiblePhone")
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)")
                        .HasColumnOrder(26);

                    b.Property<string>("ClientTaxCode")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnOrder(22);

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnOrder(200);

                    b.Property<bool>("CreditPayment")
                        .HasColumnType("tinyint(1)")
                        .HasColumnOrder(13);

                    b.Property<DateTime?>("DeliveryDate")
                        .HasColumnType("Date")
                        .HasColumnOrder(16);

                    b.Property<decimal>("DiscountPercent")
                        .HasColumnType("decimal(30,15)")
                        .HasColumnOrder(31);

                    b.Property<decimal>("DiscountValue")
                        .HasColumnType("decimal(30,15)")
                        .HasColumnOrder(32);

                    b.Property<int>("DocumentCode")
                        .HasColumnType("int")
                        .HasColumnOrder(3);

                    b.Property<DateTime>("DocumentDate")
                        .HasColumnType("Date")
                        .HasColumnOrder(6);

                    b.Property<string>("DocumentReference")
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)")
                        .HasColumnOrder(8);

                    b.Property<int>("DocumentStatusId")
                        .HasColumnType("int")
                        .HasColumnOrder(48);

                    b.Property<string>("DriverName")
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)")
                        .HasColumnOrder(23);

                    b.Property<string>("DriverPhone")
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)")
                        .HasColumnOrder(24);

                    b.Property<DateTime?>("DueDate")
                        .HasColumnType("Date")
                        .HasColumnOrder(17);

                    b.Property<DateTime>("EntryDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnOrder(7);

                    b.Property<decimal>("GrossValue")
                        .HasColumnType("decimal(30,15)")
                        .HasColumnOrder(34);

                    b.Property<bool?>("Hide")
                        .HasColumnType("tinyint(1)")
                        .HasColumnOrder(206);

                    b.Property<string>("IpAddressCreated")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnOrder(204);

                    b.Property<string>("IpAddressModified")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnOrder(205);

                    b.Property<bool>("IsBlocked")
                        .HasColumnType("tinyint(1)")
                        .HasColumnOrder(47);

                    b.Property<bool>("IsCancelled")
                        .HasColumnType("tinyint(1)")
                        .HasColumnOrder(45);

                    b.Property<bool>("IsClosed")
                        .HasColumnType("tinyint(1)")
                        .HasColumnOrder(44);

                    b.Property<bool>("IsEnded")
                        .HasColumnType("tinyint(1)")
                        .HasColumnOrder(46);

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnOrder(201);

                    b.Property<decimal>("NetValue")
                        .HasColumnType("decimal(30,15)")
                        .HasColumnOrder(40);

                    b.Property<decimal>("NetValueBeforeAdditionalDiscount")
                        .HasColumnType("decimal(30,15)")
                        .HasColumnOrder(38);

                    b.Property<decimal>("OtherTaxValue")
                        .HasColumnType("decimal(30,15)")
                        .HasColumnOrder(37);

                    b.Property<string>("Prefix")
                        .HasMaxLength(10)
                        .HasColumnType("varchar(10)")
                        .HasColumnOrder(2);

                    b.Property<string>("Reference")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnOrder(12);

                    b.Property<string>("RemarksAr")
                        .HasMaxLength(2000)
                        .HasColumnType("varchar(2000)")
                        .HasColumnOrder(42);

                    b.Property<string>("RemarksEn")
                        .HasMaxLength(2000)
                        .HasColumnType("varchar(2000)")
                        .HasColumnOrder(43);

                    b.Property<int?>("SellerId")
                        .HasColumnType("int")
                        .HasColumnOrder(10);

                    b.Property<string>("ShipTo")
                        .HasMaxLength(2000)
                        .HasColumnType("varchar(2000)")
                        .HasColumnOrder(27);

                    b.Property<int?>("ShipmentTypeId")
                        .HasColumnType("int")
                        .HasColumnOrder(18);

                    b.Property<DateTime?>("ShippingDate")
                        .HasColumnType("Date")
                        .HasColumnOrder(15);

                    b.Property<string>("ShippingRemarks")
                        .HasMaxLength(2000)
                        .HasColumnType("varchar(2000)")
                        .HasColumnOrder(29);

                    b.Property<int?>("ShippingStatusId")
                        .HasColumnType("int")
                        .HasColumnOrder(49);

                    b.Property<int>("StoreId")
                        .HasColumnType("int")
                        .HasColumnOrder(11);

                    b.Property<decimal>("SubNetValue")
                        .HasColumnType("decimal(30,15)")
                        .HasColumnOrder(36);

                    b.Property<string>("Suffix")
                        .HasMaxLength(10)
                        .HasColumnType("varchar(10)")
                        .HasColumnOrder(4);

                    b.Property<byte>("TaxTypeId")
                        .HasColumnType("tinyint unsigned")
                        .HasColumnOrder(14);

                    b.Property<decimal>("TotalCostValue")
                        .HasColumnType("decimal(30,15)")
                        .HasColumnOrder(41);

                    b.Property<decimal>("TotalItemDiscount")
                        .HasColumnType("decimal(30,15)")
                        .HasColumnOrder(33);

                    b.Property<decimal>("TotalValue")
                        .HasColumnType("decimal(30,15)")
                        .HasColumnOrder(30);

                    b.Property<string>("UserNameCreated")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnOrder(202);

                    b.Property<string>("UserNameModified")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnOrder(203);

                    b.Property<decimal>("VatValue")
                        .HasColumnType("decimal(30,15)")
                        .HasColumnOrder(35);

                    b.HasKey("ProformaInvoiceHeaderId");

                    b.HasIndex("ArchiveHeaderId");

                    b.HasIndex("ClientId");

                    b.HasIndex("ClientQuotationApprovalHeaderId");

                    b.HasIndex("DocumentStatusId");

                    b.HasIndex("SellerId");

                    b.HasIndex("ShipmentTypeId");

                    b.HasIndex("ShippingStatusId");

                    b.HasIndex("StoreId");

                    b.HasIndex("TaxTypeId");

                    b.ToTable("ProformaInvoiceHeaders");
                });

            modelBuilder.Entity("Sales.CoreOne.Models.Domain.SalesInvoiceCollection", b =>
                {
                    b.Property<int>("SalesInvoiceCollectionId")
                        .HasColumnType("int")
                        .HasColumnOrder(1);

                    b.Property<int>("AccountId")
                        .HasColumnType("int")
                        .HasColumnOrder(4);

                    b.Property<decimal>("CollectedValue")
                        .HasColumnType("decimal(30,15)")
                        .HasColumnOrder(7);

                    b.Property<decimal>("CollectedValueAccount")
                        .HasColumnType("decimal(30,15)")
                        .HasColumnOrder(8);

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnOrder(200);

                    b.Property<short>("CurrencyId")
                        .HasColumnType("smallint")
                        .HasColumnOrder(5);

                    b.Property<decimal>("CurrencyRate")
                        .HasColumnType("decimal(30,15)")
                        .HasColumnOrder(6);

                    b.Property<bool?>("Hide")
                        .HasColumnType("tinyint(1)")
                        .HasColumnOrder(206);

                    b.Property<string>("IpAddressCreated")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnOrder(204);

                    b.Property<string>("IpAddressModified")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnOrder(205);

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnOrder(201);

                    b.Property<int>("PaymentMethodId")
                        .HasColumnType("int")
                        .HasColumnOrder(3);

                    b.Property<string>("RemarksAr")
                        .HasMaxLength(2000)
                        .HasColumnType("varchar(2000)")
                        .HasColumnOrder(9);

                    b.Property<string>("RemarksEn")
                        .HasMaxLength(2000)
                        .HasColumnType("varchar(2000)")
                        .HasColumnOrder(10);

                    b.Property<int>("SalesInvoiceHeaderId")
                        .HasColumnType("int")
                        .HasColumnOrder(2);

                    b.Property<string>("UserNameCreated")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnOrder(202);

                    b.Property<string>("UserNameModified")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnOrder(203);

                    b.HasKey("SalesInvoiceCollectionId");

                    b.HasIndex("AccountId");

                    b.HasIndex("CurrencyId");

                    b.HasIndex("PaymentMethodId");

                    b.HasIndex("SalesInvoiceHeaderId");

                    b.ToTable("SalesInvoiceCollection");
                });

            modelBuilder.Entity("Sales.CoreOne.Models.Domain.SalesInvoiceDetail", b =>
                {
                    b.Property<int>("SalesInvoiceDetailId")
                        .HasColumnType("int")
                        .HasColumnOrder(1);

                    b.Property<string>("BarCode")
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)")
                        .HasColumnOrder(7);

                    b.Property<string>("BatchNumber")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnOrder(10);

                    b.Property<decimal>("BonusQuantity")
                        .HasColumnType("decimal(30,15)")
                        .HasColumnOrder(12);

                    b.Property<decimal>("ConsumerPrice")
                        .HasColumnType("decimal(30,15)")
                        .HasColumnOrder(26);

                    b.Property<int?>("CostCenterId")
                        .HasColumnType("int")
                        .HasColumnOrder(6);

                    b.Property<decimal>("CostPackage")
                        .HasColumnType("decimal(30,15)")
                        .HasColumnOrder(28);

                    b.Property<decimal>("CostPrice")
                        .HasColumnType("decimal(30,15)")
                        .HasColumnOrder(27);

                    b.Property<decimal>("CostValue")
                        .HasColumnType("decimal(30,15)")
                        .HasColumnOrder(29);

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnOrder(200);

                    b.Property<DateTime?>("ExpireDate")
                        .HasColumnType("Date")
                        .HasColumnOrder(9);

                    b.Property<decimal>("GrossValue")
                        .HasColumnType("decimal(30,15)")
                        .HasColumnOrder(19);

                    b.Property<decimal>("HeaderDiscountValue")
                        .HasColumnType("decimal(30,15)")
                        .HasColumnOrder(18);

                    b.Property<bool?>("Hide")
                        .HasColumnType("tinyint(1)")
                        .HasColumnOrder(206);

                    b.Property<string>("IpAddressCreated")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnOrder(204);

                    b.Property<string>("IpAddressModified")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnOrder(205);

                    b.Property<bool>("IsItemVatInclusive")
                        .HasColumnType("tinyint(1)")
                        .HasColumnOrder(5);

                    b.Property<decimal>("ItemDiscountPercent")
                        .HasColumnType("decimal(30,15)")
                        .HasColumnOrder(15);

                    b.Property<decimal>("ItemDiscountValue")
                        .HasColumnType("decimal(30,15)")
                        .HasColumnOrder(16);

                    b.Property<int>("ItemId")
                        .HasColumnType("int")
                        .HasColumnOrder(3);

                    b.Property<string>("ItemNote")
                        .HasMaxLength(2000)
                        .HasColumnType("varchar(2000)")
                        .HasColumnOrder(31);

                    b.Property<int>("ItemPackageId")
                        .HasColumnType("int")
                        .HasColumnOrder(4);

                    b.Property<decimal>("LastSalesPrice")
                        .HasColumnType("decimal(30,15)")
                        .HasColumnOrder(30);

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnOrder(201);

                    b.Property<decimal>("NetValue")
                        .HasColumnType("decimal(30,15)")
                        .HasColumnOrder(24);

                    b.Property<string>("Notes")
                        .HasMaxLength(2000)
                        .HasColumnType("varchar(2000)")
                        .HasColumnOrder(25);

                    b.Property<decimal>("OtherTaxValue")
                        .HasColumnType("decimal(30,15)")
                        .HasColumnOrder(23);

                    b.Property<decimal>("Packing")
                        .HasColumnType("decimal(30,15)")
                        .HasColumnOrder(8);

                    b.Property<decimal>("Quantity")
                        .HasColumnType("decimal(30,15)")
                        .HasColumnOrder(11);

                    b.Property<int>("SalesInvoiceHeaderId")
                        .HasColumnType("int")
                        .HasColumnOrder(2);

                    b.Property<decimal>("SellingPrice")
                        .HasColumnType("decimal(30,15)")
                        .HasColumnOrder(13);

                    b.Property<decimal>("SubNetValue")
                        .HasColumnType("decimal(30,15)")
                        .HasColumnOrder(22);

                    b.Property<decimal>("TotalValue")
                        .HasColumnType("decimal(30,15)")
                        .HasColumnOrder(14);

                    b.Property<decimal>("TotalValueAfterDiscount")
                        .HasColumnType("decimal(30,15)")
                        .HasColumnOrder(17);

                    b.Property<string>("UserNameCreated")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnOrder(202);

                    b.Property<string>("UserNameModified")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnOrder(203);

                    b.Property<decimal>("VatPercent")
                        .HasColumnType("decimal(30,15)")
                        .HasColumnOrder(20);

                    b.Property<int>("VatTaxId")
                        .HasColumnType("int")
                        .HasColumnOrder(33);

                    b.Property<byte>("VatTaxTypeId")
                        .HasColumnType("tinyint unsigned")
                        .HasColumnOrder(32);

                    b.Property<decimal>("VatValue")
                        .HasColumnType("decimal(30,15)")
                        .HasColumnOrder(21);

                    b.HasKey("SalesInvoiceDetailId");

                    b.HasIndex("ItemId");

                    b.HasIndex("ItemPackageId");

                    b.HasIndex("SalesInvoiceHeaderId");

                    b.HasIndex("VatTaxId");

                    b.HasIndex("VatTaxTypeId");

                    b.ToTable("SalesInvoiceDetails");
                });

            modelBuilder.Entity("Sales.CoreOne.Models.Domain.SalesInvoiceDetailTax", b =>
                {
                    b.Property<int>("SalesInvoiceDetailTaxId")
                        .HasColumnType("int")
                        .HasColumnOrder(1);

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnOrder(200);

                    b.Property<int>("CreditAccountId")
                        .HasColumnType("int")
                        .HasColumnOrder(6);

                    b.Property<bool?>("Hide")
                        .HasColumnType("tinyint(1)")
                        .HasColumnOrder(206);

                    b.Property<string>("IpAddressCreated")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnOrder(204);

                    b.Property<string>("IpAddressModified")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnOrder(205);

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnOrder(201);

                    b.Property<int>("SalesInvoiceDetailId")
                        .HasColumnType("int")
                        .HasColumnOrder(2);

                    b.Property<bool>("TaxAfterVatInclusive")
                        .HasColumnType("tinyint(1)")
                        .HasColumnOrder(5);

                    b.Property<int>("TaxId")
                        .HasColumnType("int")
                        .HasColumnOrder(4);

                    b.Property<decimal>("TaxPercent")
                        .HasColumnType("decimal(30,15)")
                        .HasColumnOrder(7);

                    b.Property<byte>("TaxTypeId")
                        .HasColumnType("tinyint unsigned")
                        .HasColumnOrder(3);

                    b.Property<decimal>("TaxValue")
                        .HasColumnType("decimal(30,15)")
                        .HasColumnOrder(8);

                    b.Property<string>("UserNameCreated")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnOrder(202);

                    b.Property<string>("UserNameModified")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnOrder(203);

                    b.HasKey("SalesInvoiceDetailTaxId");

                    b.HasIndex("SalesInvoiceDetailId");

                    b.HasIndex("TaxId");

                    b.HasIndex("TaxTypeId");

                    b.ToTable("SalesInvoiceDetailTaxes");
                });

            modelBuilder.Entity("Sales.CoreOne.Models.Domain.SalesInvoiceHeader", b =>
                {
                    b.Property<int>("SalesInvoiceHeaderId")
                        .HasColumnType("int")
                        .HasColumnOrder(1);

                    b.Property<decimal>("AdditionalDiscountValue")
                        .HasColumnType("decimal(30,15)")
                        .HasColumnOrder(40);

                    b.Property<int?>("ArchiveHeaderId")
                        .HasColumnType("int")
                        .HasColumnOrder(62);

                    b.Property<string>("BillTo")
                        .HasMaxLength(2000)
                        .HasColumnType("varchar(2000)")
                        .HasColumnOrder(29);

                    b.Property<int>("CanReturnInDays")
                        .HasColumnType("int")
                        .HasColumnOrder(48);

                    b.Property<DateTime>("CanReturnUntilDate")
                        .HasColumnType("Date")
                        .HasColumnOrder(49);

                    b.Property<string>("ClientAddress")
                        .HasMaxLength(2000)
                        .HasColumnType("varchar(2000)")
                        .HasColumnOrder(22);

                    b.Property<decimal>("ClientBalance")
                        .HasColumnType("decimal(30,15)")
                        .HasColumnOrder(58);

                    b.Property<int>("ClientId")
                        .HasColumnType("int")
                        .HasColumnOrder(7);

                    b.Property<string>("ClientName")
                        .HasMaxLength(1000)
                        .HasColumnType("varchar(1000)")
                        .HasColumnOrder(20);

                    b.Property<string>("ClientPhone")
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)")
                        .HasColumnOrder(21);

                    b.Property<string>("ClientResponsibleName")
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)")
                        .HasColumnOrder(26);

                    b.Property<string>("ClientResponsiblePhone")
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)")
                        .HasColumnOrder(27);

                    b.Property<string>("ClientTaxCode")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnOrder(23);

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnOrder(200);

                    b.Property<int>("CreditAccountId")
                        .HasColumnType("int")
                        .HasColumnOrder(44);

                    b.Property<int>("CreditLimitDays")
                        .HasColumnType("int")
                        .HasColumnOrder(59);

                    b.Property<decimal>("CreditLimitValues")
                        .HasColumnType("decimal(30,15)")
                        .HasColumnOrder(60);

                    b.Property<bool>("CreditPayment")
                        .HasColumnType("tinyint(1)")
                        .HasColumnOrder(14);

                    b.Property<int?>("DebitAccountId")
                        .HasColumnType("int")
                        .HasColumnOrder(43);

                    b.Property<int>("DebitLimitDays")
                        .HasColumnType("int")
                        .HasColumnOrder(61);

                    b.Property<DateTime?>("DeliveryDate")
                        .HasColumnType("Date")
                        .HasColumnOrder(17);

                    b.Property<decimal>("DiscountPercent")
                        .HasColumnType("decimal(30,15)")
                        .HasColumnOrder(32);

                    b.Property<decimal>("DiscountValue")
                        .HasColumnType("decimal(30,15)")
                        .HasColumnOrder(33);

                    b.Property<int>("DocumentCode")
                        .HasColumnType("int")
                        .HasColumnOrder(3);

                    b.Property<DateTime>("DocumentDate")
                        .HasColumnType("Date")
                        .HasColumnOrder(10);

                    b.Property<string>("DocumentReference")
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)")
                        .HasColumnOrder(6);

                    b.Property<string>("DriverName")
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)")
                        .HasColumnOrder(24);

                    b.Property<string>("DriverPhone")
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)")
                        .HasColumnOrder(25);

                    b.Property<DateTime?>("DueDate")
                        .HasColumnType("Date")
                        .HasColumnOrder(18);

                    b.Property<DateTime>("EntryDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnOrder(11);

                    b.Property<decimal>("GrossValue")
                        .HasColumnType("decimal(30,15)")
                        .HasColumnOrder(35);

                    b.Property<bool>("HasSettlement")
                        .HasColumnType("tinyint(1)")
                        .HasColumnOrder(54);

                    b.Property<bool?>("Hide")
                        .HasColumnType("tinyint(1)")
                        .HasColumnOrder(206);

                    b.Property<byte>("InvoiceTypeId")
                        .HasColumnType("tinyint unsigned")
                        .HasColumnOrder(57);

                    b.Property<string>("IpAddressCreated")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnOrder(204);

                    b.Property<string>("IpAddressModified")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnOrder(205);

                    b.Property<bool>("IsBlocked")
                        .HasColumnType("tinyint(1)")
                        .HasColumnOrder(53);

                    b.Property<bool>("IsClosed")
                        .HasColumnType("tinyint(1)")
                        .HasColumnOrder(51);

                    b.Property<bool>("IsDirectInvoice")
                        .HasColumnType("tinyint(1)")
                        .HasColumnOrder(13);

                    b.Property<bool>("IsEnded")
                        .HasColumnType("tinyint(1)")
                        .HasColumnOrder(52);

                    b.Property<bool>("IsOnTheWay")
                        .HasColumnType("tinyint(1)")
                        .HasColumnOrder(50);

                    b.Property<bool>("IsSettlementCompleted")
                        .HasColumnType("tinyint(1)")
                        .HasColumnOrder(55);

                    b.Property<int>("JournalHeaderId")
                        .HasColumnType("int")
                        .HasColumnOrder(45);

                    b.Property<short?>("MenuCode")
                        .HasColumnType("smallint")
                        .HasColumnOrder(56);

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnOrder(201);

                    b.Property<decimal>("NetValue")
                        .HasColumnType("decimal(30,15)")
                        .HasColumnOrder(41);

                    b.Property<decimal>("NetValueBeforeAdditionalDiscount")
                        .HasColumnType("decimal(30,15)")
                        .HasColumnOrder(39);

                    b.Property<decimal>("OtherTaxValue")
                        .HasColumnType("decimal(30,15)")
                        .HasColumnOrder(38);

                    b.Property<string>("Prefix")
                        .HasMaxLength(10)
                        .HasColumnType("varchar(10)")
                        .HasColumnOrder(2);

                    b.Property<int>("ProformaInvoiceHeaderId")
                        .HasColumnType("int")
                        .HasColumnOrder(5);

                    b.Property<string>("Reference")
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)")
                        .HasColumnOrder(12);

                    b.Property<string>("RemarksAr")
                        .HasMaxLength(2000)
                        .HasColumnType("varchar(2000)")
                        .HasColumnOrder(46);

                    b.Property<string>("RemarksEn")
                        .HasMaxLength(2000)
                        .HasColumnType("varchar(2000)")
                        .HasColumnOrder(47);

                    b.Property<int?>("SellerId")
                        .HasColumnType("int")
                        .HasColumnOrder(8);

                    b.Property<string>("ShipTo")
                        .HasMaxLength(2000)
                        .HasColumnType("varchar(2000)")
                        .HasColumnOrder(28);

                    b.Property<int?>("ShipmentTypeId")
                        .HasColumnType("int")
                        .HasColumnOrder(19);

                    b.Property<DateTime?>("ShippingDate")
                        .HasColumnType("Date")
                        .HasColumnOrder(16);

                    b.Property<string>("ShippingRemarks")
                        .HasMaxLength(2000)
                        .HasColumnType("varchar(2000)")
                        .HasColumnOrder(30);

                    b.Property<int>("StoreId")
                        .HasColumnType("int")
                        .HasColumnOrder(9);

                    b.Property<decimal>("SubNetValue")
                        .HasColumnType("decimal(30,15)")
                        .HasColumnOrder(37);

                    b.Property<string>("Suffix")
                        .HasMaxLength(10)
                        .HasColumnType("varchar(10)")
                        .HasColumnOrder(4);

                    b.Property<byte>("TaxTypeId")
                        .HasColumnType("tinyint unsigned")
                        .HasColumnOrder(15);

                    b.Property<decimal>("TotalCostValue")
                        .HasColumnType("decimal(30,15)")
                        .HasColumnOrder(42);

                    b.Property<decimal>("TotalItemDiscount")
                        .HasColumnType("decimal(30,15)")
                        .HasColumnOrder(34);

                    b.Property<decimal>("TotalValue")
                        .HasColumnType("decimal(30,15)")
                        .HasColumnOrder(31);

                    b.Property<string>("UserNameCreated")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnOrder(202);

                    b.Property<string>("UserNameModified")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnOrder(203);

                    b.Property<decimal>("VatValue")
                        .HasColumnType("decimal(30,15)")
                        .HasColumnOrder(36);

                    b.HasKey("SalesInvoiceHeaderId");

                    b.HasIndex("ArchiveHeaderId");

                    b.HasIndex("ClientId");

                    b.HasIndex("CreditAccountId");

                    b.HasIndex("DebitAccountId");

                    b.HasIndex("InvoiceTypeId");

                    b.HasIndex("JournalHeaderId");

                    b.HasIndex("MenuCode");

                    b.HasIndex("ProformaInvoiceHeaderId");

                    b.HasIndex("SellerId");

                    b.HasIndex("ShipmentTypeId");

                    b.HasIndex("StoreId");

                    b.HasIndex("TaxTypeId");

                    b.ToTable("SalesInvoiceHeaders");
                });

            modelBuilder.Entity("Sales.CoreOne.Models.Domain.SalesInvoiceReturnDetail", b =>
                {
                    b.Property<int>("SalesInvoiceReturnDetailId")
                        .HasColumnType("int")
                        .HasColumnOrder(1);

                    b.Property<string>("BarCode")
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)")
                        .HasColumnOrder(7);

                    b.Property<string>("BatchNumber")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnOrder(10);

                    b.Property<decimal>("BonusQuantity")
                        .HasColumnType("decimal(30,15)")
                        .HasColumnOrder(12);

                    b.Property<decimal>("ConsumerPrice")
                        .HasColumnType("decimal(30,15)")
                        .HasColumnOrder(26);

                    b.Property<int?>("CostCenterId")
                        .HasColumnType("int")
                        .HasColumnOrder(6);

                    b.Property<decimal>("CostPackage")
                        .HasColumnType("decimal(30,15)")
                        .HasColumnOrder(28);

                    b.Property<decimal>("CostPrice")
                        .HasColumnType("decimal(30,15)")
                        .HasColumnOrder(27);

                    b.Property<decimal>("CostValue")
                        .HasColumnType("decimal(30,15)")
                        .HasColumnOrder(29);

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnOrder(200);

                    b.Property<DateTime?>("ExpireDate")
                        .HasColumnType("Date")
                        .HasColumnOrder(9);

                    b.Property<decimal>("GrossValue")
                        .HasColumnType("decimal(30,15)")
                        .HasColumnOrder(19);

                    b.Property<decimal>("HeaderDiscountValue")
                        .HasColumnType("decimal(30,15)")
                        .HasColumnOrder(18);

                    b.Property<bool?>("Hide")
                        .HasColumnType("tinyint(1)")
                        .HasColumnOrder(206);

                    b.Property<string>("IpAddressCreated")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnOrder(204);

                    b.Property<string>("IpAddressModified")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnOrder(205);

                    b.Property<bool>("IsItemVatInclusive")
                        .HasColumnType("tinyint(1)")
                        .HasColumnOrder(5);

                    b.Property<decimal>("ItemDiscountPercent")
                        .HasColumnType("decimal(30,15)")
                        .HasColumnOrder(15);

                    b.Property<decimal>("ItemDiscountValue")
                        .HasColumnType("decimal(30,15)")
                        .HasColumnOrder(16);

                    b.Property<int>("ItemId")
                        .HasColumnType("int")
                        .HasColumnOrder(3);

                    b.Property<string>("ItemNote")
                        .HasMaxLength(2000)
                        .HasColumnType("varchar(2000)")
                        .HasColumnOrder(31);

                    b.Property<int>("ItemPackageId")
                        .HasColumnType("int")
                        .HasColumnOrder(4);

                    b.Property<decimal>("LastSalesPrice")
                        .HasColumnType("decimal(30,15)")
                        .HasColumnOrder(30);

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnOrder(201);

                    b.Property<decimal>("NetValue")
                        .HasColumnType("decimal(30,15)")
                        .HasColumnOrder(24);

                    b.Property<string>("Notes")
                        .HasMaxLength(2000)
                        .HasColumnType("varchar(2000)")
                        .HasColumnOrder(25);

                    b.Property<decimal>("OtherTaxValue")
                        .HasColumnType("decimal(30,15)")
                        .HasColumnOrder(23);

                    b.Property<decimal>("Packing")
                        .HasColumnType("decimal(30,15)")
                        .HasColumnOrder(8);

                    b.Property<decimal>("Quantity")
                        .HasColumnType("decimal(30,15)")
                        .HasColumnOrder(11);

                    b.Property<int>("SalesInvoiceReturnHeaderId")
                        .HasColumnType("int")
                        .HasColumnOrder(2);

                    b.Property<decimal>("SellingPrice")
                        .HasColumnType("decimal(30,15)")
                        .HasColumnOrder(13);

                    b.Property<decimal>("SubNetValue")
                        .HasColumnType("decimal(30,15)")
                        .HasColumnOrder(22);

                    b.Property<decimal>("TotalValue")
                        .HasColumnType("decimal(30,15)")
                        .HasColumnOrder(14);

                    b.Property<decimal>("TotalValueAfterDiscount")
                        .HasColumnType("decimal(30,15)")
                        .HasColumnOrder(17);

                    b.Property<string>("UserNameCreated")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnOrder(202);

                    b.Property<string>("UserNameModified")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnOrder(203);

                    b.Property<decimal>("VatPercent")
                        .HasColumnType("decimal(30,15)")
                        .HasColumnOrder(20);

                    b.Property<int>("VatTaxId")
                        .HasColumnType("int")
                        .HasColumnOrder(33);

                    b.Property<byte>("VatTaxTypeId")
                        .HasColumnType("tinyint unsigned")
                        .HasColumnOrder(32);

                    b.Property<decimal>("VatValue")
                        .HasColumnType("decimal(30,15)")
                        .HasColumnOrder(21);

                    b.HasKey("SalesInvoiceReturnDetailId");

                    b.HasIndex("ItemId");

                    b.HasIndex("ItemPackageId");

                    b.HasIndex("SalesInvoiceReturnHeaderId");

                    b.HasIndex("VatTaxId");

                    b.HasIndex("VatTaxTypeId");

                    b.ToTable("SalesInvoiceReturnDetails");
                });

            modelBuilder.Entity("Sales.CoreOne.Models.Domain.SalesInvoiceReturnDetailTax", b =>
                {
                    b.Property<int>("SalesInvoiceReturnDetailTaxId")
                        .HasColumnType("int")
                        .HasColumnOrder(1);

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnOrder(200);

                    b.Property<int>("DebitAccountId")
                        .HasColumnType("int")
                        .HasColumnOrder(6);

                    b.Property<bool?>("Hide")
                        .HasColumnType("tinyint(1)")
                        .HasColumnOrder(206);

                    b.Property<string>("IpAddressCreated")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnOrder(204);

                    b.Property<string>("IpAddressModified")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnOrder(205);

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnOrder(201);

                    b.Property<int>("SalesInvoiceReturnDetailId")
                        .HasColumnType("int")
                        .HasColumnOrder(2);

                    b.Property<bool>("TaxAfterVatInclusive")
                        .HasColumnType("tinyint(1)")
                        .HasColumnOrder(5);

                    b.Property<int>("TaxId")
                        .HasColumnType("int")
                        .HasColumnOrder(4);

                    b.Property<decimal>("TaxPercent")
                        .HasColumnType("decimal(30,15)")
                        .HasColumnOrder(7);

                    b.Property<byte>("TaxTypeId")
                        .HasColumnType("tinyint unsigned")
                        .HasColumnOrder(3);

                    b.Property<decimal>("TaxValue")
                        .HasColumnType("decimal(30,15)")
                        .HasColumnOrder(8);

                    b.Property<string>("UserNameCreated")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnOrder(202);

                    b.Property<string>("UserNameModified")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnOrder(203);

                    b.HasKey("SalesInvoiceReturnDetailTaxId");

                    b.HasIndex("DebitAccountId");

                    b.HasIndex("SalesInvoiceReturnDetailId");

                    b.HasIndex("TaxId");

                    b.HasIndex("TaxTypeId");

                    b.ToTable("SalesInvoiceReturnDetailTaxes");
                });

            modelBuilder.Entity("Sales.CoreOne.Models.Domain.SalesInvoiceReturnHeader", b =>
                {
                    b.Property<int>("SalesInvoiceReturnHeaderId")
                        .HasColumnType("int")
                        .HasColumnOrder(1);

                    b.Property<decimal>("AdditionalDiscountValue")
                        .HasColumnType("decimal(30,15)")
                        .HasColumnOrder(40);

                    b.Property<int?>("ArchiveHeaderId")
                        .HasColumnType("int")
                        .HasColumnOrder(53);

                    b.Property<string>("BillTo")
                        .HasMaxLength(2000)
                        .HasColumnType("varchar(2000)")
                        .HasColumnOrder(29);

                    b.Property<string>("ClientAddress")
                        .HasMaxLength(2000)
                        .HasColumnType("varchar(2000)")
                        .HasColumnOrder(22);

                    b.Property<int>("ClientId")
                        .HasColumnType("int")
                        .HasColumnOrder(7);

                    b.Property<string>("ClientName")
                        .HasMaxLength(1000)
                        .HasColumnType("varchar(1000)")
                        .HasColumnOrder(20);

                    b.Property<string>("ClientPhone")
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)")
                        .HasColumnOrder(21);

                    b.Property<string>("ClientResponsibleName")
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)")
                        .HasColumnOrder(26);

                    b.Property<string>("ClientResponsiblePhone")
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)")
                        .HasColumnOrder(27);

                    b.Property<string>("ClientTaxCode")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnOrder(23);

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnOrder(200);

                    b.Property<int?>("CreditAccountId")
                        .HasColumnType("int")
                        .HasColumnOrder(44);

                    b.Property<bool>("CreditPayment")
                        .HasColumnType("tinyint(1)")
                        .HasColumnOrder(14);

                    b.Property<int>("DebitAccountId")
                        .HasColumnType("int")
                        .HasColumnOrder(43);

                    b.Property<DateTime?>("DeliveryDate")
                        .HasColumnType("Date")
                        .HasColumnOrder(17);

                    b.Property<decimal>("DiscountPercent")
                        .HasColumnType("decimal(30,15)")
                        .HasColumnOrder(32);

                    b.Property<decimal>("DiscountValue")
                        .HasColumnType("decimal(30,15)")
                        .HasColumnOrder(33);

                    b.Property<int>("DocumentCode")
                        .HasColumnType("int")
                        .HasColumnOrder(3);

                    b.Property<DateTime>("DocumentDate")
                        .HasColumnType("Date")
                        .HasColumnOrder(10);

                    b.Property<string>("DocumentReference")
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)")
                        .HasColumnOrder(6);

                    b.Property<string>("DriverName")
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)")
                        .HasColumnOrder(24);

                    b.Property<string>("DriverPhone")
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)")
                        .HasColumnOrder(25);

                    b.Property<DateTime?>("DueDate")
                        .HasColumnType("Date")
                        .HasColumnOrder(18);

                    b.Property<DateTime>("EntryDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnOrder(11);

                    b.Property<decimal>("GrossValue")
                        .HasColumnType("decimal(30,15)")
                        .HasColumnOrder(35);

                    b.Property<bool?>("Hide")
                        .HasColumnType("tinyint(1)")
                        .HasColumnOrder(206);

                    b.Property<string>("IpAddressCreated")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnOrder(204);

                    b.Property<string>("IpAddressModified")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnOrder(205);

                    b.Property<bool>("IsBlocked")
                        .HasColumnType("tinyint(1)")
                        .HasColumnOrder(51);

                    b.Property<bool>("IsClosed")
                        .HasColumnType("tinyint(1)")
                        .HasColumnOrder(49);

                    b.Property<bool>("IsDirectInvoice")
                        .HasColumnType("tinyint(1)")
                        .HasColumnOrder(13);

                    b.Property<bool>("IsEnded")
                        .HasColumnType("tinyint(1)")
                        .HasColumnOrder(50);

                    b.Property<bool>("IsOnTheWay")
                        .HasColumnType("tinyint(1)")
                        .HasColumnOrder(48);

                    b.Property<int>("JournalHeaderId")
                        .HasColumnType("int")
                        .HasColumnOrder(45);

                    b.Property<short?>("MenuCode")
                        .HasColumnType("smallint")
                        .HasColumnOrder(52);

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnOrder(201);

                    b.Property<decimal>("NetValue")
                        .HasColumnType("decimal(30,15)")
                        .HasColumnOrder(41);

                    b.Property<decimal>("NetValueBeforeAdditionalDiscount")
                        .HasColumnType("decimal(30,15)")
                        .HasColumnOrder(39);

                    b.Property<decimal>("OtherTaxValue")
                        .HasColumnType("decimal(30,15)")
                        .HasColumnOrder(38);

                    b.Property<string>("Prefix")
                        .HasMaxLength(10)
                        .HasColumnType("varchar(10)")
                        .HasColumnOrder(2);

                    b.Property<string>("Reference")
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)")
                        .HasColumnOrder(12);

                    b.Property<string>("RemarksAr")
                        .HasMaxLength(2000)
                        .HasColumnType("varchar(2000)")
                        .HasColumnOrder(46);

                    b.Property<string>("RemarksEn")
                        .HasMaxLength(2000)
                        .HasColumnType("varchar(2000)")
                        .HasColumnOrder(47);

                    b.Property<int>("SalesInvoiceHeaderId")
                        .HasColumnType("int")
                        .HasColumnOrder(5);

                    b.Property<int?>("SellerId")
                        .HasColumnType("int")
                        .HasColumnOrder(8);

                    b.Property<string>("ShipTo")
                        .HasMaxLength(2000)
                        .HasColumnType("varchar(2000)")
                        .HasColumnOrder(28);

                    b.Property<int?>("ShipmentTypeId")
                        .HasColumnType("int")
                        .HasColumnOrder(19);

                    b.Property<DateTime?>("ShippingDate")
                        .HasColumnType("Date")
                        .HasColumnOrder(16);

                    b.Property<string>("ShippingRemarks")
                        .HasMaxLength(2000)
                        .HasColumnType("varchar(2000)")
                        .HasColumnOrder(30);

                    b.Property<int>("StoreId")
                        .HasColumnType("int")
                        .HasColumnOrder(9);

                    b.Property<decimal>("SubNetValue")
                        .HasColumnType("decimal(30,15)")
                        .HasColumnOrder(37);

                    b.Property<string>("Suffix")
                        .HasMaxLength(10)
                        .HasColumnType("varchar(10)")
                        .HasColumnOrder(4);

                    b.Property<byte>("TaxTypeId")
                        .HasColumnType("tinyint unsigned")
                        .HasColumnOrder(15);

                    b.Property<decimal>("TotalCostValue")
                        .HasColumnType("decimal(30,15)")
                        .HasColumnOrder(42);

                    b.Property<decimal>("TotalItemDiscount")
                        .HasColumnType("decimal(30,15)")
                        .HasColumnOrder(34);

                    b.Property<decimal>("TotalValue")
                        .HasColumnType("decimal(30,15)")
                        .HasColumnOrder(31);

                    b.Property<string>("UserNameCreated")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnOrder(202);

                    b.Property<string>("UserNameModified")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnOrder(203);

                    b.Property<decimal>("VatValue")
                        .HasColumnType("decimal(30,15)")
                        .HasColumnOrder(36);

                    b.HasKey("SalesInvoiceReturnHeaderId");

                    b.HasIndex("ArchiveHeaderId");

                    b.HasIndex("ClientId");

                    b.HasIndex("CreditAccountId");

                    b.HasIndex("DebitAccountId");

                    b.HasIndex("JournalHeaderId");

                    b.HasIndex("MenuCode");

                    b.HasIndex("SalesInvoiceHeaderId");

                    b.HasIndex("SellerId");

                    b.HasIndex("ShipmentTypeId");

                    b.HasIndex("StoreId");

                    b.HasIndex("TaxTypeId");

                    b.ToTable("SalesInvoiceReturnHeaders");
                });

            modelBuilder.Entity("Sales.CoreOne.Models.Domain.SalesInvoiceReturnPayment", b =>
                {
                    b.Property<int>("SalesInvoiceReturnPaymentId")
                        .HasColumnType("int")
                        .HasColumnOrder(1);

                    b.Property<int>("AccountId")
                        .HasColumnType("int")
                        .HasColumnOrder(4);

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnOrder(200);

                    b.Property<short>("CurrencyId")
                        .HasColumnType("smallint")
                        .HasColumnOrder(5);

                    b.Property<decimal>("CurrencyRate")
                        .HasColumnType("decimal(30,15)")
                        .HasColumnOrder(6);

                    b.Property<bool?>("Hide")
                        .HasColumnType("tinyint(1)")
                        .HasColumnOrder(206);

                    b.Property<string>("IpAddressCreated")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnOrder(204);

                    b.Property<string>("IpAddressModified")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnOrder(205);

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnOrder(201);

                    b.Property<decimal>("PaidValue")
                        .HasColumnType("decimal(30,15)")
                        .HasColumnOrder(7);

                    b.Property<decimal>("PaidValueAccount")
                        .HasColumnType("decimal(30,15)")
                        .HasColumnOrder(8);

                    b.Property<int>("PaymentMethodId")
                        .HasColumnType("int")
                        .HasColumnOrder(3);

                    b.Property<string>("RemarksAr")
                        .HasMaxLength(2000)
                        .HasColumnType("varchar(2000)")
                        .HasColumnOrder(9);

                    b.Property<string>("RemarksEn")
                        .HasMaxLength(2000)
                        .HasColumnType("varchar(2000)")
                        .HasColumnOrder(10);

                    b.Property<int>("SalesInvoiceReturnHeaderId")
                        .HasColumnType("int")
                        .HasColumnOrder(2);

                    b.Property<string>("UserNameCreated")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnOrder(202);

                    b.Property<string>("UserNameModified")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnOrder(203);

                    b.HasKey("SalesInvoiceReturnPaymentId");

                    b.HasIndex("AccountId");

                    b.HasIndex("CurrencyId");

                    b.HasIndex("PaymentMethodId");

                    b.HasIndex("SalesInvoiceReturnHeaderId");

                    b.ToTable("SalesInvoiceReturnPayments");
                });

            modelBuilder.Entity("Sales.CoreOne.Models.Domain.StockOutDetail", b =>
                {
                    b.Property<int>("StockOutDetailId")
                        .HasColumnType("int")
                        .HasColumnOrder(1);

                    b.Property<string>("BarCode")
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)")
                        .HasColumnOrder(7);

                    b.Property<string>("BatchNumber")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnOrder(10);

                    b.Property<decimal>("BonusQuantity")
                        .HasColumnType("decimal(30,15)")
                        .HasColumnOrder(12);

                    b.Property<decimal>("ConsumerPrice")
                        .HasColumnType("decimal(30,15)")
                        .HasColumnOrder(26);

                    b.Property<int?>("CostCenterId")
                        .HasColumnType("int")
                        .HasColumnOrder(6);

                    b.Property<decimal>("CostPackage")
                        .HasColumnType("decimal(30,15)")
                        .HasColumnOrder(28);

                    b.Property<decimal>("CostPrice")
                        .HasColumnType("decimal(30,15)")
                        .HasColumnOrder(27);

                    b.Property<decimal>("CostValue")
                        .HasColumnType("decimal(30,15)")
                        .HasColumnOrder(29);

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnOrder(200);

                    b.Property<DateTime?>("ExpireDate")
                        .HasColumnType("Date")
                        .HasColumnOrder(9);

                    b.Property<decimal>("GrossValue")
                        .HasColumnType("decimal(30,15)")
                        .HasColumnOrder(19);

                    b.Property<decimal>("HeaderDiscountValue")
                        .HasColumnType("decimal(30,15)")
                        .HasColumnOrder(18);

                    b.Property<bool?>("Hide")
                        .HasColumnType("tinyint(1)")
                        .HasColumnOrder(206);

                    b.Property<string>("IpAddressCreated")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnOrder(204);

                    b.Property<string>("IpAddressModified")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnOrder(205);

                    b.Property<bool>("IsItemVatInclusive")
                        .HasColumnType("tinyint(1)")
                        .HasColumnOrder(5);

                    b.Property<decimal>("ItemDiscountPercent")
                        .HasColumnType("decimal(30,15)")
                        .HasColumnOrder(15);

                    b.Property<decimal>("ItemDiscountValue")
                        .HasColumnType("decimal(30,15)")
                        .HasColumnOrder(16);

                    b.Property<int>("ItemId")
                        .HasColumnType("int")
                        .HasColumnOrder(3);

                    b.Property<string>("ItemNote")
                        .HasMaxLength(2000)
                        .HasColumnType("varchar(2000)")
                        .HasColumnOrder(31);

                    b.Property<int>("ItemPackageId")
                        .HasColumnType("int")
                        .HasColumnOrder(4);

                    b.Property<decimal>("LastSalesPrice")
                        .HasColumnType("decimal(30,15)")
                        .HasColumnOrder(30);

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnOrder(201);

                    b.Property<decimal>("NetValue")
                        .HasColumnType("decimal(30,15)")
                        .HasColumnOrder(24);

                    b.Property<string>("Notes")
                        .HasMaxLength(2000)
                        .HasColumnType("varchar(2000)")
                        .HasColumnOrder(25);

                    b.Property<decimal>("OtherTaxValue")
                        .HasColumnType("decimal(30,15)")
                        .HasColumnOrder(23);

                    b.Property<decimal>("Packing")
                        .HasColumnType("decimal(30,15)")
                        .HasColumnOrder(8);

                    b.Property<decimal>("Quantity")
                        .HasColumnType("decimal(30,15)")
                        .HasColumnOrder(11);

                    b.Property<decimal>("SellingPrice")
                        .HasColumnType("decimal(30,15)")
                        .HasColumnOrder(13);

                    b.Property<int>("StockOutHeaderId")
                        .HasColumnType("int")
                        .HasColumnOrder(2);

                    b.Property<decimal>("SubNetValue")
                        .HasColumnType("decimal(30,15)")
                        .HasColumnOrder(22);

                    b.Property<decimal>("TotalValue")
                        .HasColumnType("decimal(30,15)")
                        .HasColumnOrder(14);

                    b.Property<decimal>("TotalValueAfterDiscount")
                        .HasColumnType("decimal(30,15)")
                        .HasColumnOrder(17);

                    b.Property<string>("UserNameCreated")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnOrder(202);

                    b.Property<string>("UserNameModified")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnOrder(203);

                    b.Property<decimal>("VatPercent")
                        .HasColumnType("decimal(30,15)")
                        .HasColumnOrder(20);

                    b.Property<decimal>("VatValue")
                        .HasColumnType("decimal(30,15)")
                        .HasColumnOrder(21);

                    b.HasKey("StockOutDetailId");

                    b.HasIndex("ItemId");

                    b.HasIndex("ItemPackageId");

                    b.HasIndex("StockOutHeaderId");

                    b.ToTable("StockOutDetails");
                });

            modelBuilder.Entity("Sales.CoreOne.Models.Domain.StockOutDetailTax", b =>
                {
                    b.Property<int>("StockOutDetailTaxId")
                        .HasColumnType("int")
                        .HasColumnOrder(1);

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnOrder(200);

                    b.Property<int>("CreditAccountId")
                        .HasColumnType("int")
                        .HasColumnOrder(5);

                    b.Property<bool?>("Hide")
                        .HasColumnType("tinyint(1)")
                        .HasColumnOrder(206);

                    b.Property<string>("IpAddressCreated")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnOrder(204);

                    b.Property<string>("IpAddressModified")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnOrder(205);

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnOrder(201);

                    b.Property<int>("StockOutDetailId")
                        .HasColumnType("int")
                        .HasColumnOrder(2);

                    b.Property<bool>("TaxAfterVatInclusive")
                        .HasColumnType("tinyint(1)")
                        .HasColumnOrder(4);

                    b.Property<int>("TaxId")
                        .HasColumnType("int")
                        .HasColumnOrder(3);

                    b.Property<decimal>("TaxPercent")
                        .HasColumnType("decimal(30,15)")
                        .HasColumnOrder(6);

                    b.Property<decimal>("TaxValue")
                        .HasColumnType("decimal(30,15)")
                        .HasColumnOrder(7);

                    b.Property<string>("UserNameCreated")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnOrder(202);

                    b.Property<string>("UserNameModified")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnOrder(203);

                    b.HasKey("StockOutDetailTaxId");

                    b.HasIndex("StockOutDetailId");

                    b.HasIndex("TaxId");

                    b.ToTable("StockOutDetailTaxes");
                });

            modelBuilder.Entity("Sales.CoreOne.Models.Domain.StockOutHeader", b =>
                {
                    b.Property<int>("StockOutHeaderId")
                        .HasColumnType("int")
                        .HasColumnOrder(1);

                    b.Property<decimal>("AdditionalDiscountValue")
                        .HasColumnType("decimal(30,15)")
                        .HasColumnOrder(24);

                    b.Property<int?>("ArchiveHeaderId")
                        .HasColumnType("int")
                        .HasColumnOrder(33);

                    b.Property<int>("ClientId")
                        .HasColumnType("int")
                        .HasColumnOrder(9);

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnOrder(200);

                    b.Property<decimal>("DiscountPercent")
                        .HasColumnType("decimal(30,15)")
                        .HasColumnOrder(16);

                    b.Property<decimal>("DiscountValue")
                        .HasColumnType("decimal(30,15)")
                        .HasColumnOrder(17);

                    b.Property<int>("DocumentCode")
                        .HasColumnType("int")
                        .HasColumnOrder(3);

                    b.Property<DateTime>("DocumentDate")
                        .HasColumnType("Date")
                        .HasColumnOrder(12);

                    b.Property<string>("DocumentReference")
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)")
                        .HasColumnOrder(5);

                    b.Property<DateTime>("EntryDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnOrder(13);

                    b.Property<decimal>("GrossValue")
                        .HasColumnType("decimal(30,15)")
                        .HasColumnOrder(19);

                    b.Property<bool?>("Hide")
                        .HasColumnType("tinyint(1)")
                        .HasColumnOrder(206);

                    b.Property<string>("IpAddressCreated")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnOrder(204);

                    b.Property<string>("IpAddressModified")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnOrder(205);

                    b.Property<bool>("IsBlocked")
                        .HasColumnType("tinyint(1)")
                        .HasColumnOrder(31);

                    b.Property<bool>("IsClosed")
                        .HasColumnType("tinyint(1)")
                        .HasColumnOrder(29);

                    b.Property<bool>("IsEnded")
                        .HasColumnType("tinyint(1)")
                        .HasColumnOrder(30);

                    b.Property<short?>("MenuCode")
                        .HasColumnType("smallint")
                        .HasColumnOrder(32);

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnOrder(201);

                    b.Property<decimal>("NetValue")
                        .HasColumnType("decimal(30,15)")
                        .HasColumnOrder(25);

                    b.Property<decimal>("NetValueBeforeAdditionalDiscount")
                        .HasColumnType("decimal(30,15)")
                        .HasColumnOrder(23);

                    b.Property<decimal>("OtherTaxValue")
                        .HasColumnType("decimal(30,15)")
                        .HasColumnOrder(22);

                    b.Property<string>("Prefix")
                        .HasMaxLength(10)
                        .HasColumnType("varchar(10)")
                        .HasColumnOrder(2);

                    b.Property<int?>("ProformaInvoiceHeaderId")
                        .HasColumnType("int")
                        .HasColumnOrder(7);

                    b.Property<string>("Reference")
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)")
                        .HasColumnOrder(14);

                    b.Property<string>("RemarksAr")
                        .HasMaxLength(2000)
                        .HasColumnType("varchar(2000)")
                        .HasColumnOrder(27);

                    b.Property<string>("RemarksEn")
                        .HasMaxLength(2000)
                        .HasColumnType("varchar(2000)")
                        .HasColumnOrder(28);

                    b.Property<int?>("SalesInvoiceHeaderId")
                        .HasColumnType("int")
                        .HasColumnOrder(8);

                    b.Property<int?>("SellerId")
                        .HasColumnType("int")
                        .HasColumnOrder(10);

                    b.Property<byte>("StockTypeId")
                        .HasColumnType("tinyint unsigned")
                        .HasColumnOrder(6);

                    b.Property<int>("StoreId")
                        .HasColumnType("int")
                        .HasColumnOrder(11);

                    b.Property<decimal>("SubNetValue")
                        .HasColumnType("decimal(30,15)")
                        .HasColumnOrder(21);

                    b.Property<string>("Suffix")
                        .HasMaxLength(10)
                        .HasColumnType("varchar(10)")
                        .HasColumnOrder(4);

                    b.Property<decimal>("TotalCostValue")
                        .HasColumnType("decimal(30,15)")
                        .HasColumnOrder(26);

                    b.Property<decimal>("TotalItemDiscount")
                        .HasColumnType("decimal(30,15)")
                        .HasColumnOrder(18);

                    b.Property<decimal>("TotalValue")
                        .HasColumnType("decimal(30,15)")
                        .HasColumnOrder(15);

                    b.Property<string>("UserNameCreated")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnOrder(202);

                    b.Property<string>("UserNameModified")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnOrder(203);

                    b.Property<decimal>("VatValue")
                        .HasColumnType("decimal(30,15)")
                        .HasColumnOrder(20);

                    b.HasKey("StockOutHeaderId");

                    b.HasIndex("ArchiveHeaderId");

                    b.HasIndex("ClientId");

                    b.HasIndex("MenuCode");

                    b.HasIndex("ProformaInvoiceHeaderId");

                    b.HasIndex("SalesInvoiceHeaderId");

                    b.HasIndex("StockTypeId");

                    b.HasIndex("StoreId");

                    b.ToTable("StockOutHeaders");
                });

            modelBuilder.Entity("Sales.CoreOne.Models.Domain.StockOutReturnDetail", b =>
                {
                    b.Property<int>("StockOutReturnDetailId")
                        .HasColumnType("int")
                        .HasColumnOrder(1);

                    b.Property<string>("BarCode")
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)")
                        .HasColumnOrder(7);

                    b.Property<string>("BatchNumber")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnOrder(10);

                    b.Property<decimal>("BonusQuantity")
                        .HasColumnType("decimal(30,15)")
                        .HasColumnOrder(12);

                    b.Property<decimal>("ConsumerPrice")
                        .HasColumnType("decimal(30,15)")
                        .HasColumnOrder(26);

                    b.Property<int?>("CostCenterId")
                        .HasColumnType("int")
                        .HasColumnOrder(6);

                    b.Property<decimal>("CostPackage")
                        .HasColumnType("decimal(30,15)")
                        .HasColumnOrder(28);

                    b.Property<decimal>("CostPrice")
                        .HasColumnType("decimal(30,15)")
                        .HasColumnOrder(27);

                    b.Property<decimal>("CostValue")
                        .HasColumnType("decimal(30,15)")
                        .HasColumnOrder(29);

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnOrder(200);

                    b.Property<DateTime?>("ExpireDate")
                        .HasColumnType("Date")
                        .HasColumnOrder(9);

                    b.Property<decimal>("GrossValue")
                        .HasColumnType("decimal(30,15)")
                        .HasColumnOrder(19);

                    b.Property<decimal>("HeaderDiscountValue")
                        .HasColumnType("decimal(30,15)")
                        .HasColumnOrder(18);

                    b.Property<bool?>("Hide")
                        .HasColumnType("tinyint(1)")
                        .HasColumnOrder(206);

                    b.Property<string>("IpAddressCreated")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnOrder(204);

                    b.Property<string>("IpAddressModified")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnOrder(205);

                    b.Property<bool>("IsItemVatInclusive")
                        .HasColumnType("tinyint(1)")
                        .HasColumnOrder(5);

                    b.Property<decimal>("ItemDiscountPercent")
                        .HasColumnType("decimal(30,15)")
                        .HasColumnOrder(15);

                    b.Property<decimal>("ItemDiscountValue")
                        .HasColumnType("decimal(30,15)")
                        .HasColumnOrder(16);

                    b.Property<int>("ItemId")
                        .HasColumnType("int")
                        .HasColumnOrder(3);

                    b.Property<string>("ItemNote")
                        .HasMaxLength(2000)
                        .HasColumnType("varchar(2000)")
                        .HasColumnOrder(31);

                    b.Property<int>("ItemPackageId")
                        .HasColumnType("int")
                        .HasColumnOrder(4);

                    b.Property<decimal>("LastSalesPrice")
                        .HasColumnType("decimal(30,15)")
                        .HasColumnOrder(30);

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnOrder(201);

                    b.Property<decimal>("NetValue")
                        .HasColumnType("decimal(30,15)")
                        .HasColumnOrder(24);

                    b.Property<string>("Notes")
                        .HasMaxLength(2000)
                        .HasColumnType("varchar(2000)")
                        .HasColumnOrder(25);

                    b.Property<decimal>("OtherTaxValue")
                        .HasColumnType("decimal(30,15)")
                        .HasColumnOrder(23);

                    b.Property<decimal>("Packing")
                        .HasColumnType("decimal(30,15)")
                        .HasColumnOrder(8);

                    b.Property<decimal>("Quantity")
                        .HasColumnType("decimal(30,15)")
                        .HasColumnOrder(11);

                    b.Property<decimal>("SellingPrice")
                        .HasColumnType("decimal(30,15)")
                        .HasColumnOrder(13);

                    b.Property<int>("StockOutReturnHeaderId")
                        .HasColumnType("int")
                        .HasColumnOrder(2);

                    b.Property<decimal>("SubNetValue")
                        .HasColumnType("decimal(30,15)")
                        .HasColumnOrder(22);

                    b.Property<decimal>("TotalValue")
                        .HasColumnType("decimal(30,15)")
                        .HasColumnOrder(14);

                    b.Property<decimal>("TotalValueAfterDiscount")
                        .HasColumnType("decimal(30,15)")
                        .HasColumnOrder(17);

                    b.Property<string>("UserNameCreated")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnOrder(202);

                    b.Property<string>("UserNameModified")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnOrder(203);

                    b.Property<decimal>("VatPercent")
                        .HasColumnType("decimal(30,15)")
                        .HasColumnOrder(20);

                    b.Property<decimal>("VatValue")
                        .HasColumnType("decimal(30,15)")
                        .HasColumnOrder(21);

                    b.HasKey("StockOutReturnDetailId");

                    b.HasIndex("ItemId");

                    b.HasIndex("ItemPackageId");

                    b.HasIndex("StockOutReturnHeaderId");

                    b.ToTable("StockOutReturnDetails");
                });

            modelBuilder.Entity("Sales.CoreOne.Models.Domain.StockOutReturnDetailTax", b =>
                {
                    b.Property<int>("StockOutReturnDetailTaxId")
                        .HasColumnType("int")
                        .HasColumnOrder(1);

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnOrder(200);

                    b.Property<int>("DebitAccountId")
                        .HasColumnType("int")
                        .HasColumnOrder(5);

                    b.Property<bool?>("Hide")
                        .HasColumnType("tinyint(1)")
                        .HasColumnOrder(206);

                    b.Property<string>("IpAddressCreated")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnOrder(204);

                    b.Property<string>("IpAddressModified")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnOrder(205);

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnOrder(201);

                    b.Property<int>("StockOutReturnDetailId")
                        .HasColumnType("int")
                        .HasColumnOrder(2);

                    b.Property<bool>("TaxAfterVatInclusive")
                        .HasColumnType("tinyint(1)")
                        .HasColumnOrder(4);

                    b.Property<int>("TaxId")
                        .HasColumnType("int")
                        .HasColumnOrder(3);

                    b.Property<decimal>("TaxPercent")
                        .HasColumnType("decimal(30,15)")
                        .HasColumnOrder(6);

                    b.Property<decimal>("TaxValue")
                        .HasColumnType("decimal(30,15)")
                        .HasColumnOrder(7);

                    b.Property<string>("UserNameCreated")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnOrder(202);

                    b.Property<string>("UserNameModified")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnOrder(203);

                    b.HasKey("StockOutReturnDetailTaxId");

                    b.HasIndex("StockOutReturnDetailId");

                    b.HasIndex("TaxId");

                    b.ToTable("StockOutReturnDetailTaxes");
                });

            modelBuilder.Entity("Sales.CoreOne.Models.Domain.StockOutReturnHeader", b =>
                {
                    b.Property<int>("StockOutReturnHeaderId")
                        .HasColumnType("int")
                        .HasColumnOrder(1);

                    b.Property<decimal>("AdditionalDiscountValue")
                        .HasColumnType("decimal(30,15)")
                        .HasColumnOrder(24);

                    b.Property<int?>("ArchiveHeaderId")
                        .HasColumnType("int")
                        .HasColumnOrder(33);

                    b.Property<int>("ClientId")
                        .HasColumnType("int")
                        .HasColumnOrder(9);

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnOrder(200);

                    b.Property<decimal>("DiscountPercent")
                        .HasColumnType("decimal(30,15)")
                        .HasColumnOrder(16);

                    b.Property<decimal>("DiscountValue")
                        .HasColumnType("decimal(30,15)")
                        .HasColumnOrder(17);

                    b.Property<int>("DocumentCode")
                        .HasColumnType("int")
                        .HasColumnOrder(3);

                    b.Property<DateTime>("DocumentDate")
                        .HasColumnType("Date")
                        .HasColumnOrder(12);

                    b.Property<string>("DocumentReference")
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)")
                        .HasColumnOrder(5);

                    b.Property<DateTime>("EntryDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnOrder(13);

                    b.Property<decimal>("GrossValue")
                        .HasColumnType("decimal(30,15)")
                        .HasColumnOrder(19);

                    b.Property<bool?>("Hide")
                        .HasColumnType("tinyint(1)")
                        .HasColumnOrder(206);

                    b.Property<string>("IpAddressCreated")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnOrder(204);

                    b.Property<string>("IpAddressModified")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnOrder(205);

                    b.Property<bool>("IsBlocked")
                        .HasColumnType("tinyint(1)")
                        .HasColumnOrder(31);

                    b.Property<bool>("IsClosed")
                        .HasColumnType("tinyint(1)")
                        .HasColumnOrder(29);

                    b.Property<bool>("IsEnded")
                        .HasColumnType("tinyint(1)")
                        .HasColumnOrder(30);

                    b.Property<short?>("MenuCode")
                        .HasColumnType("smallint")
                        .HasColumnOrder(32);

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnOrder(201);

                    b.Property<decimal>("NetValue")
                        .HasColumnType("decimal(30,15)")
                        .HasColumnOrder(25);

                    b.Property<decimal>("NetValueBeforeAdditionalDiscount")
                        .HasColumnType("decimal(30,15)")
                        .HasColumnOrder(23);

                    b.Property<decimal>("OtherTaxValue")
                        .HasColumnType("decimal(30,15)")
                        .HasColumnOrder(22);

                    b.Property<string>("Prefix")
                        .HasMaxLength(10)
                        .HasColumnType("varchar(10)")
                        .HasColumnOrder(2);

                    b.Property<string>("Reference")
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)")
                        .HasColumnOrder(14);

                    b.Property<string>("RemarksAr")
                        .HasMaxLength(2000)
                        .HasColumnType("varchar(2000)")
                        .HasColumnOrder(27);

                    b.Property<string>("RemarksEn")
                        .HasMaxLength(2000)
                        .HasColumnType("varchar(2000)")
                        .HasColumnOrder(28);

                    b.Property<int?>("SalesInvoiceHeaderId")
                        .HasColumnType("int")
                        .HasColumnOrder(8);

                    b.Property<int?>("SellerId")
                        .HasColumnType("int")
                        .HasColumnOrder(10);

                    b.Property<int?>("StockOutHeaderId")
                        .HasColumnType("int")
                        .HasColumnOrder(7);

                    b.Property<byte>("StockTypeId")
                        .HasColumnType("tinyint unsigned")
                        .HasColumnOrder(6);

                    b.Property<int>("StoreId")
                        .HasColumnType("int")
                        .HasColumnOrder(11);

                    b.Property<decimal>("SubNetValue")
                        .HasColumnType("decimal(30,15)")
                        .HasColumnOrder(21);

                    b.Property<string>("Suffix")
                        .HasMaxLength(10)
                        .HasColumnType("varchar(10)")
                        .HasColumnOrder(4);

                    b.Property<decimal>("TotalCostValue")
                        .HasColumnType("decimal(30,15)")
                        .HasColumnOrder(26);

                    b.Property<decimal>("TotalItemDiscount")
                        .HasColumnType("decimal(30,15)")
                        .HasColumnOrder(18);

                    b.Property<decimal>("TotalValue")
                        .HasColumnType("decimal(30,15)")
                        .HasColumnOrder(15);

                    b.Property<string>("UserNameCreated")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnOrder(202);

                    b.Property<string>("UserNameModified")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnOrder(203);

                    b.Property<decimal>("VatValue")
                        .HasColumnType("decimal(30,15)")
                        .HasColumnOrder(20);

                    b.HasKey("StockOutReturnHeaderId");

                    b.HasIndex("ArchiveHeaderId");

                    b.HasIndex("ClientId");

                    b.HasIndex("MenuCode");

                    b.HasIndex("SalesInvoiceHeaderId");

                    b.HasIndex("SellerId");

                    b.HasIndex("StockOutHeaderId");

                    b.HasIndex("StockTypeId");

                    b.HasIndex("StoreId");

                    b.ToTable("StockOutReturnHeaders");
                });

            modelBuilder.Entity("Shared.CoreOne.Models.Domain.Accounts.Account", b =>
                {
                    b.Property<int>("AccountId")
                        .HasColumnType("int")
                        .HasColumnOrder(1);

                    b.Property<byte>("AccountCategoryId")
                        .HasColumnType("tinyint unsigned")
                        .HasColumnOrder(6);

                    b.Property<string>("AccountCode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnOrder(2);

                    b.Property<byte>("AccountLevel")
                        .HasColumnType("tinyint unsigned")
                        .HasColumnOrder(10);

                    b.Property<string>("AccountNameAr")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)")
                        .HasColumnOrder(4);

                    b.Property<string>("AccountNameEn")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)")
                        .HasColumnOrder(5);

                    b.Property<byte?>("AccountTypeId")
                        .HasColumnType("tinyint unsigned")
                        .HasColumnOrder(7);

                    b.Property<int?>("ArchiveHeaderId")
                        .HasColumnType("int")
                        .HasColumnOrder(28);

                    b.Property<int>("CompanyId")
                        .HasColumnType("int")
                        .HasColumnOrder(3);

                    b.Property<int?>("CostCenterId")
                        .HasColumnType("int")
                        .HasColumnOrder(15);

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnOrder(200);

                    b.Property<short>("CurrencyId")
                        .HasColumnType("smallint")
                        .HasColumnOrder(13);

                    b.Property<bool>("HasCostCenter")
                        .HasColumnType("tinyint(1)")
                        .HasColumnOrder(14);

                    b.Property<bool>("HasRemarks")
                        .HasColumnType("tinyint(1)")
                        .HasColumnOrder(19);

                    b.Property<bool?>("Hide")
                        .HasColumnType("tinyint(1)")
                        .HasColumnOrder(206);

                    b.Property<string>("InActiveReasons")
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)")
                        .HasColumnOrder(18);

                    b.Property<int?>("InternalReferenceAccountId")
                        .HasColumnType("int")
                        .HasColumnOrder(27);

                    b.Property<string>("IpAddressCreated")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnOrder(204);

                    b.Property<string>("IpAddressModified")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnOrder(205);

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)")
                        .HasColumnOrder(17);

                    b.Property<bool>("IsCreatedAutomatically")
                        .HasColumnType("tinyint(1)")
                        .HasColumnOrder(24);

                    b.Property<bool>("IsLastLevel")
                        .HasColumnType("tinyint(1)")
                        .HasColumnOrder(12);

                    b.Property<bool>("IsMainAccount")
                        .HasColumnType("tinyint(1)")
                        .HasColumnOrder(8);

                    b.Property<bool>("IsNonDeletable")
                        .HasColumnType("tinyint(1)")
                        .HasColumnOrder(23);

                    b.Property<bool>("IsNonEditable")
                        .HasColumnType("tinyint(1)")
                        .HasColumnOrder(22);

                    b.Property<bool>("IsPrivate")
                        .HasColumnType("tinyint(1)")
                        .HasColumnOrder(16);

                    b.Property<int?>("MainAccountId")
                        .HasColumnType("int")
                        .HasColumnOrder(9);

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnOrder(201);

                    b.Property<string>("NotesAr")
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)")
                        .HasColumnOrder(25);

                    b.Property<string>("NotesEn")
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)")
                        .HasColumnOrder(26);

                    b.Property<int>("Order")
                        .HasColumnType("int")
                        .HasColumnOrder(11);

                    b.Property<string>("RemarksAr")
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)")
                        .HasColumnOrder(20);

                    b.Property<string>("RemarksEn")
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)")
                        .HasColumnOrder(21);

                    b.Property<string>("UserNameCreated")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnOrder(202);

                    b.Property<string>("UserNameModified")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnOrder(203);

                    b.HasKey("AccountId");

                    b.HasIndex("AccountCategoryId");

                    b.HasIndex("AccountTypeId");

                    b.HasIndex("ArchiveHeaderId");

                    b.HasIndex("CompanyId");

                    b.HasIndex("CostCenterId");

                    b.HasIndex("CurrencyId");

                    b.ToTable("Accounts");
                });

            modelBuilder.Entity("Shared.CoreOne.Models.Domain.Accounts.AccountCategory", b =>
                {
                    b.Property<byte>("AccountCategoryId")
                        .HasColumnType("tinyint unsigned")
                        .HasColumnOrder(1);

                    b.Property<string>("AccountCategoryNameAr")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnOrder(3);

                    b.Property<string>("AccountCategoryNameEn")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnOrder(4);

                    b.Property<byte>("AccountLedgerId")
                        .HasColumnType("tinyint unsigned")
                        .HasColumnOrder(2);

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnOrder(200);

                    b.Property<bool?>("Hide")
                        .HasColumnType("tinyint(1)")
                        .HasColumnOrder(206);

                    b.Property<string>("IpAddressCreated")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnOrder(204);

                    b.Property<string>("IpAddressModified")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnOrder(205);

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnOrder(201);

                    b.Property<string>("UserNameCreated")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnOrder(202);

                    b.Property<string>("UserNameModified")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnOrder(203);

                    b.HasKey("AccountCategoryId");

                    b.HasIndex("AccountLedgerId");

                    b.ToTable("AccountCategories");

                    b.HasData(
                        new
                        {
                            AccountCategoryId = (byte)1,
                            AccountCategoryNameAr = "الأصول",
                            AccountCategoryNameEn = "Assets",
                            AccountLedgerId = (byte)1
                        },
                        new
                        {
                            AccountCategoryId = (byte)2,
                            AccountCategoryNameAr = "الخصوم",
                            AccountCategoryNameEn = "Liabilities",
                            AccountLedgerId = (byte)1
                        },
                        new
                        {
                            AccountCategoryId = (byte)3,
                            AccountCategoryNameAr = "المصروفات",
                            AccountCategoryNameEn = "Expenses",
                            AccountLedgerId = (byte)2
                        },
                        new
                        {
                            AccountCategoryId = (byte)4,
                            AccountCategoryNameAr = "الايرادات",
                            AccountCategoryNameEn = "Revenues",
                            AccountLedgerId = (byte)2
                        });
                });

            modelBuilder.Entity("Shared.CoreOne.Models.Domain.Accounts.AccountLedger", b =>
                {
                    b.Property<byte>("AccountLedgerId")
                        .HasColumnType("tinyint unsigned")
                        .HasColumnOrder(1);

                    b.Property<string>("AccountLedgerNameAr")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnOrder(2);

                    b.Property<string>("AccountLedgerNameEn")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnOrder(3);

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnOrder(200);

                    b.Property<bool?>("Hide")
                        .HasColumnType("tinyint(1)")
                        .HasColumnOrder(206);

                    b.Property<string>("IpAddressCreated")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnOrder(204);

                    b.Property<string>("IpAddressModified")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnOrder(205);

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnOrder(201);

                    b.Property<string>("UserNameCreated")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnOrder(202);

                    b.Property<string>("UserNameModified")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnOrder(203);

                    b.HasKey("AccountLedgerId");

                    b.ToTable("AccountLedgers");

                    b.HasData(
                        new
                        {
                            AccountLedgerId = (byte)1,
                            AccountLedgerNameAr = "مركز مالي",
                            AccountLedgerNameEn = "Balance Sheet"
                        },
                        new
                        {
                            AccountLedgerId = (byte)2,
                            AccountLedgerNameAr = "قائمة دخل",
                            AccountLedgerNameEn = "Income Statement"
                        });
                });

            modelBuilder.Entity("Shared.CoreOne.Models.Domain.Accounts.AccountStore", b =>
                {
                    b.Property<int>("AccountStoreId")
                        .HasColumnType("int")
                        .HasColumnOrder(1);

                    b.Property<int>("AccountId")
                        .HasColumnType("int")
                        .HasColumnOrder(4);

                    b.Property<int>("AccountStoreTypeId")
                        .HasColumnType("int")
                        .HasColumnOrder(2);

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnOrder(200);

                    b.Property<bool?>("Hide")
                        .HasColumnType("tinyint(1)")
                        .HasColumnOrder(206);

                    b.Property<string>("IpAddressCreated")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnOrder(204);

                    b.Property<string>("IpAddressModified")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnOrder(205);

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnOrder(201);

                    b.Property<int>("StoreId")
                        .HasColumnType("int")
                        .HasColumnOrder(3);

                    b.Property<string>("UserNameCreated")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnOrder(202);

                    b.Property<string>("UserNameModified")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnOrder(203);

                    b.HasKey("AccountStoreId");

                    b.HasIndex("AccountStoreTypeId");

                    b.HasIndex("StoreId");

                    b.ToTable("AccountStore");
                });

            modelBuilder.Entity("Shared.CoreOne.Models.Domain.Accounts.AccountStoreType", b =>
                {
                    b.Property<int>("AccountStoreTypeId")
                        .HasColumnType("int")
                        .HasColumnOrder(1);

                    b.Property<string>("AccountStoreTypeNameAr")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)")
                        .HasColumnOrder(2);

                    b.Property<string>("AccountStoreTypeNameEn")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)")
                        .HasColumnOrder(3);

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnOrder(200);

                    b.Property<bool?>("Hide")
                        .HasColumnType("tinyint(1)")
                        .HasColumnOrder(206);

                    b.Property<string>("IpAddressCreated")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnOrder(204);

                    b.Property<string>("IpAddressModified")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnOrder(205);

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnOrder(201);

                    b.Property<string>("UserNameCreated")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnOrder(202);

                    b.Property<string>("UserNameModified")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnOrder(203);

                    b.HasKey("AccountStoreTypeId");

                    b.ToTable("AccountStoreTypes");

                    b.HasData(
                        new
                        {
                            AccountStoreTypeId = 1,
                            AccountStoreTypeNameAr = "مخزون أول مدة",
                            AccountStoreTypeNameEn = "Beginning Inventory"
                        },
                        new
                        {
                            AccountStoreTypeId = 2,
                            AccountStoreTypeNameAr = "مخزون آخر مدة",
                            AccountStoreTypeNameEn = "Ending Inventory"
                        },
                        new
                        {
                            AccountStoreTypeId = 3,
                            AccountStoreTypeNameAr = "المخزون",
                            AccountStoreTypeNameEn = "Inventory"
                        },
                        new
                        {
                            AccountStoreTypeId = 4,
                            AccountStoreTypeNameAr = "تكلفة الإيرادات",
                            AccountStoreTypeNameEn = "Cost of Revenue"
                        },
                        new
                        {
                            AccountStoreTypeId = 5,
                            AccountStoreTypeNameAr = "أرباح وخسائر",
                            AccountStoreTypeNameEn = "Profit and Loss"
                        });
                });

            modelBuilder.Entity("Shared.CoreOne.Models.Domain.Accounts.AccountType", b =>
                {
                    b.Property<byte>("AccountTypeId")
                        .HasColumnType("tinyint unsigned")
                        .HasColumnOrder(1);

                    b.Property<string>("AccountTypeNameAr")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnOrder(2);

                    b.Property<string>("AccountTypeNameEn")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnOrder(3);

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnOrder(200);

                    b.Property<bool?>("Hide")
                        .HasColumnType("tinyint(1)")
                        .HasColumnOrder(206);

                    b.Property<string>("IpAddressCreated")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnOrder(204);

                    b.Property<string>("IpAddressModified")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnOrder(205);

                    b.Property<bool>("IsInternalSystem")
                        .HasColumnType("tinyint(1)")
                        .HasColumnOrder(4);

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnOrder(201);

                    b.Property<string>("UserNameCreated")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnOrder(202);

                    b.Property<string>("UserNameModified")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnOrder(203);

                    b.HasKey("AccountTypeId");

                    b.ToTable("AccountTypes");

                    b.HasData(
                        new
                        {
                            AccountTypeId = (byte)1,
                            AccountTypeNameAr = "النقدية",
                            AccountTypeNameEn = "Cash",
                            IsInternalSystem = false
                        },
                        new
                        {
                            AccountTypeId = (byte)2,
                            AccountTypeNameAr = "العملاء",
                            AccountTypeNameEn = "Clients",
                            IsInternalSystem = false
                        },
                        new
                        {
                            AccountTypeId = (byte)3,
                            AccountTypeNameAr = "الموردين",
                            AccountTypeNameEn = "Suppliers",
                            IsInternalSystem = false
                        },
                        new
                        {
                            AccountTypeId = (byte)4,
                            AccountTypeNameAr = "البنوك",
                            AccountTypeNameEn = "Banks",
                            IsInternalSystem = false
                        },
                        new
                        {
                            AccountTypeId = (byte)5,
                            AccountTypeNameAr = "فرق تقريب كسور",
                            AccountTypeNameEn = "Fractional Approximation Difference",
                            IsInternalSystem = true
                        },
                        new
                        {
                            AccountTypeId = (byte)6,
                            AccountTypeNameAr = "أصول ثابتة",
                            AccountTypeNameEn = "Fixed Assets",
                            IsInternalSystem = false
                        },
                        new
                        {
                            AccountTypeId = (byte)7,
                            AccountTypeNameAr = "مجمع الاهلاك",
                            AccountTypeNameEn = "Accumulated Depreciation",
                            IsInternalSystem = false
                        },
                        new
                        {
                            AccountTypeId = (byte)8,
                            AccountTypeNameAr = "الاهلاكات",
                            AccountTypeNameEn = "Depreciation",
                            IsInternalSystem = false
                        },
                        new
                        {
                            AccountTypeId = (byte)9,
                            AccountTypeNameAr = "حقوق الملكية",
                            AccountTypeNameEn = "Ownership Equity",
                            IsInternalSystem = false
                        },
                        new
                        {
                            AccountTypeId = (byte)10,
                            AccountTypeNameAr = "المشتريات",
                            AccountTypeNameEn = "Purchases",
                            IsInternalSystem = false
                        },
                        new
                        {
                            AccountTypeId = (byte)11,
                            AccountTypeNameAr = "تكلفة الايرادات",
                            AccountTypeNameEn = "Revenues Cost",
                            IsInternalSystem = false
                        },
                        new
                        {
                            AccountTypeId = (byte)12,
                            AccountTypeNameAr = "المبيعات",
                            AccountTypeNameEn = "Sales",
                            IsInternalSystem = false
                        },
                        new
                        {
                            AccountTypeId = (byte)13,
                            AccountTypeNameAr = "مصروفات عمومية وادارية",
                            AccountTypeNameEn = "Miscellaneous Expenses",
                            IsInternalSystem = false
                        },
                        new
                        {
                            AccountTypeId = (byte)14,
                            AccountTypeNameAr = "ايرادات متنوعة",
                            AccountTypeNameEn = "Miscellaneous Income",
                            IsInternalSystem = false
                        },
                        new
                        {
                            AccountTypeId = (byte)15,
                            AccountTypeNameAr = "خصم مسموح به",
                            AccountTypeNameEn = "Allowed Discount",
                            IsInternalSystem = true
                        },
                        new
                        {
                            AccountTypeId = (byte)16,
                            AccountTypeNameAr = "المخزون",
                            AccountTypeNameEn = "Inventory",
                            IsInternalSystem = false
                        },
                        new
                        {
                            AccountTypeId = (byte)17,
                            AccountTypeNameAr = "حساب المخزون",
                            AccountTypeNameEn = "Inventory Account",
                            IsInternalSystem = true
                        },
                        new
                        {
                            AccountTypeId = (byte)18,
                            AccountTypeNameAr = "حساب تكلفة المبيعات",
                            AccountTypeNameEn = "Revenues Cost Account",
                            IsInternalSystem = true
                        },
                        new
                        {
                            AccountTypeId = (byte)50,
                            AccountTypeNameAr = "أخري",
                            AccountTypeNameEn = "Other",
                            IsInternalSystem = false
                        });
                });

            modelBuilder.Entity("Shared.CoreOne.Models.Domain.Approval.Approve", b =>
                {
                    b.Property<int>("ApproveId")
                        .HasColumnType("int")
                        .HasColumnOrder(1);

                    b.Property<int>("ApplicationId")
                        .HasColumnType("int")
                        .HasColumnOrder(3);

                    b.Property<int>("ApproveCode")
                        .HasColumnType("int")
                        .HasColumnOrder(2);

                    b.Property<string>("ApproveNameAr")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnOrder(6);

                    b.Property<string>("ApproveNameEn")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnOrder(7);

                    b.Property<int>("CompanyId")
                        .HasColumnType("int")
                        .HasColumnOrder(5);

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnOrder(200);

                    b.Property<bool?>("Hide")
                        .HasColumnType("tinyint(1)")
                        .HasColumnOrder(206);

                    b.Property<string>("IpAddressCreated")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnOrder(204);

                    b.Property<string>("IpAddressModified")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnOrder(205);

                    b.Property<bool>("IsStopped")
                        .HasColumnType("tinyint(1)")
                        .HasColumnOrder(11);

                    b.Property<short>("MenuCode")
                        .HasColumnType("smallint")
                        .HasColumnOrder(4);

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnOrder(201);

                    b.Property<bool>("OnAdd")
                        .HasColumnType("tinyint(1)")
                        .HasColumnOrder(8);

                    b.Property<bool>("OnDelete")
                        .HasColumnType("tinyint(1)")
                        .HasColumnOrder(10);

                    b.Property<bool>("OnEdit")
                        .HasColumnType("tinyint(1)")
                        .HasColumnOrder(9);

                    b.Property<string>("UserNameCreated")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnOrder(202);

                    b.Property<string>("UserNameModified")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnOrder(203);

                    b.HasKey("ApproveId");

                    b.HasIndex("CompanyId");

                    b.HasIndex("MenuCode");

                    b.ToTable("Approves");
                });

            modelBuilder.Entity("Shared.CoreOne.Models.Domain.Approval.ApproveRequest", b =>
                {
                    b.Property<int>("RequestId")
                        .HasColumnType("int")
                        .HasColumnOrder(1);

                    b.Property<int>("ApproveId")
                        .HasColumnType("int")
                        .HasColumnOrder(10);

                    b.Property<byte>("ApproveRequestTypeId")
                        .HasColumnType("tinyint unsigned")
                        .HasColumnOrder(5);

                    b.Property<int>("BranchId")
                        .HasColumnType("int")
                        .HasColumnOrder(17);

                    b.Property<int>("CompanyId")
                        .HasColumnType("int")
                        .HasColumnOrder(16);

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnOrder(200);

                    b.Property<int>("CurrentStatusId")
                        .HasColumnType("int")
                        .HasColumnOrder(12);

                    b.Property<byte>("CurrentStepCount")
                        .HasColumnType("tinyint unsigned")
                        .HasColumnOrder(15);

                    b.Property<int>("CurrentStepId")
                        .HasColumnType("int")
                        .HasColumnOrder(11);

                    b.Property<string>("FromUserName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnOrder(8);

                    b.Property<bool?>("Hide")
                        .HasColumnType("tinyint(1)")
                        .HasColumnOrder(206);

                    b.Property<string>("IpAddressCreated")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnOrder(204);

                    b.Property<string>("IpAddressModified")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnOrder(205);

                    b.Property<bool?>("IsApproved")
                        .HasColumnType("tinyint(1)")
                        .HasColumnOrder(9);

                    b.Property<int>("LastStatusId")
                        .HasColumnType("int")
                        .HasColumnOrder(14);

                    b.Property<int>("LastStepId")
                        .HasColumnType("int")
                        .HasColumnOrder(13);

                    b.Property<short>("MenuCode")
                        .HasColumnType("smallint")
                        .HasColumnOrder(3);

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnOrder(201);

                    b.Property<string>("ReferenceCode")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnOrder(7);

                    b.Property<int>("ReferenceId")
                        .HasColumnType("int")
                        .HasColumnOrder(6);

                    b.Property<int>("RequestCode")
                        .HasColumnType("int")
                        .HasColumnOrder(2);

                    b.Property<DateTime>("RequestDate")
                        .HasColumnType("Date")
                        .HasColumnOrder(4);

                    b.Property<int>("StoreId")
                        .HasColumnType("int")
                        .HasColumnOrder(18);

                    b.Property<string>("UserNameCreated")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnOrder(202);

                    b.Property<string>("UserNameModified")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnOrder(203);

                    b.HasKey("RequestId");

                    b.HasIndex("ApproveId");

                    b.HasIndex("ApproveRequestTypeId");

                    b.HasIndex("BranchId");

                    b.HasIndex("CompanyId");

                    b.HasIndex("CurrentStatusId");

                    b.HasIndex("CurrentStepId");

                    b.HasIndex("LastStatusId");

                    b.HasIndex("LastStepId");

                    b.HasIndex("MenuCode");

                    b.HasIndex("StoreId");

                    b.ToTable("ApproveRequests");
                });

            modelBuilder.Entity("Shared.CoreOne.Models.Domain.Approval.ApproveRequestDetail", b =>
                {
                    b.Property<int>("ApproveRequestDetailId")
                        .HasColumnType("int")
                        .HasColumnOrder(1);

                    b.Property<int>("ApproveRequestId")
                        .HasColumnType("int")
                        .HasColumnOrder(2);

                    b.Property<string>("Changes")
                        .HasColumnType("longtext")
                        .HasColumnOrder(5);

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnOrder(200);

                    b.Property<bool?>("Hide")
                        .HasColumnType("tinyint(1)")
                        .HasColumnOrder(206);

                    b.Property<string>("IpAddressCreated")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnOrder(204);

                    b.Property<string>("IpAddressModified")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnOrder(205);

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnOrder(201);

                    b.Property<string>("NewValue")
                        .HasColumnType("longtext")
                        .HasColumnOrder(4);

                    b.Property<string>("OldValue")
                        .HasColumnType("longtext")
                        .HasColumnOrder(3);

                    b.Property<string>("UserNameCreated")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnOrder(202);

                    b.Property<string>("UserNameModified")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnOrder(203);

                    b.HasKey("ApproveRequestDetailId");

                    b.HasIndex("ApproveRequestId");

                    b.ToTable("ApproveRequestDetails");
                });

            modelBuilder.Entity("Shared.CoreOne.Models.Domain.Approval.ApproveRequestType", b =>
                {
                    b.Property<byte>("ApproveRequestTypeId")
                        .HasColumnType("tinyint unsigned")
                        .HasColumnOrder(1);

                    b.Property<string>("ApproveRequestTypeNameAr")
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("ApproveRequestTypeNameEn")
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnOrder(200);

                    b.Property<bool?>("Hide")
                        .HasColumnType("tinyint(1)")
                        .HasColumnOrder(206);

                    b.Property<string>("IpAddressCreated")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnOrder(204);

                    b.Property<string>("IpAddressModified")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnOrder(205);

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnOrder(201);

                    b.Property<string>("UserNameCreated")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnOrder(202);

                    b.Property<string>("UserNameModified")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnOrder(203);

                    b.HasKey("ApproveRequestTypeId");

                    b.ToTable("ApproveRequestTypes");

                    b.HasData(
                        new
                        {
                            ApproveRequestTypeId = (byte)1,
                            ApproveRequestTypeNameAr = "إضافة جديد",
                            ApproveRequestTypeNameEn = "Create New"
                        },
                        new
                        {
                            ApproveRequestTypeId = (byte)2,
                            ApproveRequestTypeNameAr = "تعديل البيانات",
                            ApproveRequestTypeNameEn = "Edit Data"
                        },
                        new
                        {
                            ApproveRequestTypeId = (byte)3,
                            ApproveRequestTypeNameAr = "حذف",
                            ApproveRequestTypeNameEn = "Delete"
                        });
                });

            modelBuilder.Entity("Shared.CoreOne.Models.Domain.Approval.ApproveRequestUser", b =>
                {
                    b.Property<int>("ApproveRequestUserId")
                        .HasColumnType("int")
                        .HasColumnOrder(1);

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnOrder(200);

                    b.Property<bool?>("Hide")
                        .HasColumnType("tinyint(1)")
                        .HasColumnOrder(206);

                    b.Property<string>("IpAddressCreated")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnOrder(204);

                    b.Property<string>("IpAddressModified")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnOrder(205);

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnOrder(201);

                    b.Property<string>("Remarks")
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)")
                        .HasColumnOrder(6);

                    b.Property<int>("RequestId")
                        .HasColumnType("int")
                        .HasColumnOrder(2);

                    b.Property<int>("StatusId")
                        .HasColumnType("int")
                        .HasColumnOrder(4);

                    b.Property<int>("StepId")
                        .HasColumnType("int")
                        .HasColumnOrder(3);

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnOrder(5);

                    b.Property<string>("UserNameCreated")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnOrder(202);

                    b.Property<string>("UserNameModified")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnOrder(203);

                    b.HasKey("ApproveRequestUserId");

                    b.HasIndex("RequestId");

                    b.HasIndex("StatusId");

                    b.HasIndex("StepId");

                    b.ToTable("ApproveRequestUsers");
                });

            modelBuilder.Entity("Shared.CoreOne.Models.Domain.Approval.ApproveStatus", b =>
                {
                    b.Property<int>("ApproveStatusId")
                        .HasColumnType("int")
                        .HasColumnOrder(1);

                    b.Property<int>("ApproveStepId")
                        .HasColumnType("int")
                        .HasColumnOrder(2);

                    b.Property<bool>("Approved")
                        .HasColumnType("tinyint(1)")
                        .HasColumnOrder(5);

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnOrder(200);

                    b.Property<bool?>("Hide")
                        .HasColumnType("tinyint(1)")
                        .HasColumnOrder(206);

                    b.Property<string>("IpAddressCreated")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnOrder(204);

                    b.Property<string>("IpAddressModified")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnOrder(205);

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnOrder(201);

                    b.Property<bool>("Pending")
                        .HasColumnType("tinyint(1)")
                        .HasColumnOrder(6);

                    b.Property<bool>("Rejected")
                        .HasColumnType("tinyint(1)")
                        .HasColumnOrder(7);

                    b.Property<string>("StatusNameAr")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("varchar(10)")
                        .HasColumnOrder(3);

                    b.Property<string>("StatusNameEn")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("varchar(10)")
                        .HasColumnOrder(4);

                    b.Property<string>("UserNameCreated")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnOrder(202);

                    b.Property<string>("UserNameModified")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnOrder(203);

                    b.HasKey("ApproveStatusId");

                    b.HasIndex("ApproveStepId");

                    b.ToTable("ApproveStatuses");
                });

            modelBuilder.Entity("Shared.CoreOne.Models.Domain.Approval.ApproveStep", b =>
                {
                    b.Property<int>("ApproveStepId")
                        .HasColumnType("int")
                        .HasColumnOrder(1);

                    b.Property<bool>("AllCountShouldApprove")
                        .HasColumnType("tinyint(1)")
                        .HasColumnOrder(7);

                    b.Property<byte>("ApproveCount")
                        .HasColumnType("tinyint unsigned")
                        .HasColumnOrder(6);

                    b.Property<int>("ApproveId")
                        .HasColumnType("int")
                        .HasColumnOrder(2);

                    b.Property<byte>("ApproveOrder")
                        .HasColumnType("tinyint unsigned")
                        .HasColumnOrder(5);

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnOrder(200);

                    b.Property<bool?>("Hide")
                        .HasColumnType("tinyint(1)")
                        .HasColumnOrder(206);

                    b.Property<string>("IpAddressCreated")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnOrder(204);

                    b.Property<string>("IpAddressModified")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnOrder(205);

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)")
                        .HasColumnOrder(8);

                    b.Property<bool>("IsLastStep")
                        .HasColumnType("tinyint(1)")
                        .HasColumnOrder(9);

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnOrder(201);

                    b.Property<string>("StepNameAr")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnOrder(3);

                    b.Property<string>("StepNameEn")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnOrder(4);

                    b.Property<string>("UserNameCreated")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnOrder(202);

                    b.Property<string>("UserNameModified")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnOrder(203);

                    b.HasKey("ApproveStepId");

                    b.HasIndex("ApproveId");

                    b.ToTable("ApproveStep");
                });

            modelBuilder.Entity("Shared.CoreOne.Models.Domain.Archive.ArchiveDetail", b =>
                {
                    b.Property<int>("ArchiveDetailId")
                        .HasColumnType("int")
                        .HasColumnOrder(1);

                    b.Property<int>("ArchiveHeaderId")
                        .HasColumnType("int")
                        .HasColumnOrder(2);

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnOrder(200);

                    b.Property<string>("FileExtension")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("varchar(10)")
                        .HasColumnOrder(6);

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnOrder(5);

                    b.Property<string>("FileType")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)")
                        .HasColumnOrder(7);

                    b.Property<string>("FileUrl")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("varchar(300)")
                        .HasColumnOrder(8);

                    b.Property<bool?>("Hide")
                        .HasColumnType("tinyint(1)")
                        .HasColumnOrder(206);

                    b.Property<string>("IpAddressCreated")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnOrder(204);

                    b.Property<string>("IpAddressModified")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnOrder(205);

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnOrder(201);

                    b.Property<int?>("ReferenceId")
                        .HasColumnType("int")
                        .HasColumnOrder(9);

                    b.Property<string>("RemarksAr")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnOrder(3);

                    b.Property<string>("RemarksEn")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnOrder(4);

                    b.Property<string>("UserNameCreated")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnOrder(202);

                    b.Property<string>("UserNameModified")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnOrder(203);

                    b.HasKey("ArchiveDetailId");

                    b.HasIndex("ArchiveHeaderId");

                    b.ToTable("ArchiveDetails");
                });

            modelBuilder.Entity("Shared.CoreOne.Models.Domain.Archive.ArchiveHeader", b =>
                {
                    b.Property<int>("ArchiveHeaderId")
                        .HasColumnType("int")
                        .HasColumnOrder(1);

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnOrder(200);

                    b.Property<string>("HeaderNameAr")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnOrder(3);

                    b.Property<string>("HeaderNameEn")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnOrder(4);

                    b.Property<bool?>("Hide")
                        .HasColumnType("tinyint(1)")
                        .HasColumnOrder(206);

                    b.Property<string>("IpAddressCreated")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnOrder(204);

                    b.Property<string>("IpAddressModified")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnOrder(205);

                    b.Property<short>("MenuCode")
                        .HasColumnType("smallint")
                        .HasColumnOrder(2);

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnOrder(201);

                    b.Property<string>("UserNameCreated")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnOrder(202);

                    b.Property<string>("UserNameModified")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnOrder(203);

                    b.HasKey("ArchiveHeaderId");

                    b.HasIndex("MenuCode");

                    b.ToTable("ArchiveHeaders");
                });

            modelBuilder.Entity("Shared.CoreOne.Models.Domain.Basics.City", b =>
                {
                    b.Property<int>("CityId")
                        .HasColumnType("int")
                        .HasColumnOrder(1);

                    b.Property<string>("CityNameAr")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnOrder(2);

                    b.Property<string>("CityNameEn")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnOrder(3);

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnOrder(200);

                    b.Property<bool?>("Hide")
                        .HasColumnType("tinyint(1)")
                        .HasColumnOrder(206);

                    b.Property<string>("IpAddressCreated")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnOrder(204);

                    b.Property<string>("IpAddressModified")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnOrder(205);

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnOrder(201);

                    b.Property<int>("StateId")
                        .HasColumnType("int")
                        .HasColumnOrder(4);

                    b.Property<string>("UserNameCreated")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnOrder(202);

                    b.Property<string>("UserNameModified")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnOrder(203);

                    b.HasKey("CityId");

                    b.HasIndex("StateId");

                    b.ToTable("Cities");
                });

            modelBuilder.Entity("Shared.CoreOne.Models.Domain.Basics.ColumnIdentifier", b =>
                {
                    b.Property<byte>("ColumnIdentifierId")
                        .HasColumnType("tinyint unsigned")
                        .HasColumnOrder(1);

                    b.Property<string>("ColumnIdentifierNameAr")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnOrder(2);

                    b.Property<string>("ColumnIdentifierNameEn")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnOrder(3);

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnOrder(200);

                    b.Property<bool?>("Hide")
                        .HasColumnType("tinyint(1)")
                        .HasColumnOrder(206);

                    b.Property<string>("IpAddressCreated")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnOrder(204);

                    b.Property<string>("IpAddressModified")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnOrder(205);

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnOrder(201);

                    b.Property<string>("UserNameCreated")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnOrder(202);

                    b.Property<string>("UserNameModified")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnOrder(203);

                    b.HasKey("ColumnIdentifierId");

                    b.ToTable("ColumnIdentifiers");

                    b.HasData(
                        new
                        {
                            ColumnIdentifierId = (byte)1,
                            ColumnIdentifierNameAr = "نص",
                            ColumnIdentifierNameEn = "Text"
                        },
                        new
                        {
                            ColumnIdentifierId = (byte)2,
                            ColumnIdentifierNameAr = "رقم",
                            ColumnIdentifierNameEn = "Number"
                        },
                        new
                        {
                            ColumnIdentifierId = (byte)3,
                            ColumnIdentifierNameAr = "تاريخ",
                            ColumnIdentifierNameEn = "Date"
                        },
                        new
                        {
                            ColumnIdentifierId = (byte)4,
                            ColumnIdentifierNameAr = "نعم/لا",
                            ColumnIdentifierNameEn = "true/false"
                        });
                });

            modelBuilder.Entity("Shared.CoreOne.Models.Domain.Basics.Country", b =>
                {
                    b.Property<int>("CountryId")
                        .HasColumnType("int")
                        .HasColumnOrder(1);

                    b.Property<string>("CountryCode")
                        .HasMaxLength(10)
                        .HasColumnType("varchar(10)")
                        .HasColumnOrder(5);

                    b.Property<string>("CountryNameAr")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnOrder(2);

                    b.Property<string>("CountryNameEn")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnOrder(3);

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnOrder(200);

                    b.Property<short?>("CurrencyId")
                        .HasColumnType("smallint")
                        .HasColumnOrder(4);

                    b.Property<bool?>("Hide")
                        .HasColumnType("tinyint(1)")
                        .HasColumnOrder(206);

                    b.Property<string>("IpAddressCreated")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnOrder(204);

                    b.Property<string>("IpAddressModified")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnOrder(205);

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnOrder(201);

                    b.Property<string>("PhoneCode")
                        .HasMaxLength(10)
                        .HasColumnType("varchar(10)")
                        .HasColumnOrder(6);

                    b.Property<string>("UserNameCreated")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnOrder(202);

                    b.Property<string>("UserNameModified")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnOrder(203);

                    b.HasKey("CountryId");

                    b.HasIndex("CurrencyId");

                    b.ToTable("Countries");
                });

            modelBuilder.Entity("Shared.CoreOne.Models.Domain.Basics.District", b =>
                {
                    b.Property<int>("DistrictId")
                        .HasColumnType("int")
                        .HasColumnOrder(1);

                    b.Property<int>("CityId")
                        .HasColumnType("int")
                        .HasColumnOrder(4);

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnOrder(200);

                    b.Property<string>("DistrictNameAr")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnOrder(2);

                    b.Property<string>("DistrictNameEn")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnOrder(3);

                    b.Property<bool?>("Hide")
                        .HasColumnType("tinyint(1)")
                        .HasColumnOrder(206);

                    b.Property<string>("IpAddressCreated")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnOrder(204);

                    b.Property<string>("IpAddressModified")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnOrder(205);

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnOrder(201);

                    b.Property<string>("UserNameCreated")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnOrder(202);

                    b.Property<string>("UserNameModified")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnOrder(203);

                    b.HasKey("DistrictId");

                    b.HasIndex("CityId");

                    b.ToTable("Districts");
                });

            modelBuilder.Entity("Shared.CoreOne.Models.Domain.Basics.DocumentStatus", b =>
                {
                    b.Property<int>("DocumentStatusId")
                        .HasColumnType("int")
                        .HasColumnOrder(1);

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnOrder(200);

                    b.Property<string>("DocumentStatusNameAr")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnOrder(2);

                    b.Property<string>("DocumentStatusNameEn")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnOrder(3);

                    b.Property<bool?>("Hide")
                        .HasColumnType("tinyint(1)")
                        .HasColumnOrder(206);

                    b.Property<string>("IpAddressCreated")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnOrder(204);

                    b.Property<string>("IpAddressModified")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnOrder(205);

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnOrder(201);

                    b.Property<string>("UserNameCreated")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnOrder(202);

                    b.Property<string>("UserNameModified")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnOrder(203);

                    b.HasKey("DocumentStatusId");

                    b.ToTable("DocumentStatuses");

                    b.HasData(
                        new
                        {
                            DocumentStatusId = 1,
                            DocumentStatusNameAr = "تم إنشاء إتفاقية شراء",
                            DocumentStatusNameEn = "Purchase order has been created"
                        },
                        new
                        {
                            DocumentStatusId = 2,
                            DocumentStatusNameAr = "تم إستلام الكمية جزئياً",
                            DocumentStatusNameEn = "The quantity has been partially received"
                        },
                        new
                        {
                            DocumentStatusId = 3,
                            DocumentStatusNameAr = "تم إستلام الكمية بالكامل",
                            DocumentStatusNameEn = "The entire quantity has been received"
                        },
                        new
                        {
                            DocumentStatusId = 4,
                            DocumentStatusNameAr = "تم عمل فاتورة المشتريات",
                            DocumentStatusNameEn = "Purchase invoice has been created"
                        },
                        new
                        {
                            DocumentStatusId = 5,
                            DocumentStatusNameAr = "تم عمل فاتورة المشتريات لبعض البضائع",
                            DocumentStatusNameEn = "Purchase invoice has been created for some of the items"
                        },
                        new
                        {
                            DocumentStatusId = 6,
                            DocumentStatusNameAr = "تم عمل فاتورة المشتريات لكل البضائع",
                            DocumentStatusNameEn = "Purchase invoice has been created for all of the items"
                        },
                        new
                        {
                            DocumentStatusId = 7,
                            DocumentStatusNameAr = "تم عمل فاتورة المشتريات وفي انتظار الاستلام",
                            DocumentStatusNameEn = "purchase invoice has been created and is awaiting receipt"
                        },
                        new
                        {
                            DocumentStatusId = 8,
                            DocumentStatusNameAr = "تم عمل مرتجع للكمية جزئياً وفي انتظار فاتورة مرتجع المشتريات",
                            DocumentStatusNameEn = "The quantity has been partially returned and the purchase return invoice is awaited"
                        },
                        new
                        {
                            DocumentStatusId = 9,
                            DocumentStatusNameAr = "تم عمل مرتجع بالكمية بالكامل وفي انتظار فاتورة مرتجع المشتريات",
                            DocumentStatusNameEn = "The entire quantity has been returned and the purchase return invoice is awaited"
                        },
                        new
                        {
                            DocumentStatusId = 10,
                            DocumentStatusNameAr = "تم عمل فاتورة مرتجع المشتريات",
                            DocumentStatusNameEn = "Purchase return invoice has been created"
                        },
                        new
                        {
                            DocumentStatusId = 11,
                            DocumentStatusNameAr = "تم عمل فاتورة مرتجع المشتريات لبعض البضائع",
                            DocumentStatusNameEn = "Purchase return invoice has been created for some of the items"
                        },
                        new
                        {
                            DocumentStatusId = 12,
                            DocumentStatusNameAr = "تم عمل فاتورة مرتجع المشتريات لكل البضائع",
                            DocumentStatusNameEn = "Purchase return invoice has been created for all of the items"
                        },
                        new
                        {
                            DocumentStatusId = 13,
                            DocumentStatusNameAr = "تم إنشاء الفاتورة الأولية",
                            DocumentStatusNameEn = "Proforma invoice has been created"
                        },
                        new
                        {
                            DocumentStatusId = 14,
                            DocumentStatusNameAr = "تم صرف الكمية جزئياً",
                            DocumentStatusNameEn = "The quantity has been partially disbursed"
                        },
                        new
                        {
                            DocumentStatusId = 15,
                            DocumentStatusNameAr = "تم صرف الكمية بالكامل",
                            DocumentStatusNameEn = "The entire quantity has been disbursed"
                        },
                        new
                        {
                            DocumentStatusId = 16,
                            DocumentStatusNameAr = "تم عمل فاتورة المبيعات",
                            DocumentStatusNameEn = "Sales invoice has been created"
                        },
                        new
                        {
                            DocumentStatusId = 17,
                            DocumentStatusNameAr = "تم عمل فاتورة المبيعات لبعض البضائع",
                            DocumentStatusNameEn = "Sales invoice has been created for some of the items"
                        },
                        new
                        {
                            DocumentStatusId = 18,
                            DocumentStatusNameAr = "تم عمل فاتورة المبيعات لكل البضائع",
                            DocumentStatusNameEn = "Sales invoice has been created for all of the items"
                        },
                        new
                        {
                            DocumentStatusId = 19,
                            DocumentStatusNameAr = "تم عمل مرتجع للكمية المصروفة جزئياً وفي انتظار فاتورة مرتجع المبيعات",
                            DocumentStatusNameEn = "The partially disbursed quantity has been returned and the sales return invoice is awaited"
                        },
                        new
                        {
                            DocumentStatusId = 20,
                            DocumentStatusNameAr = "تم عمل مرتجع للكمية المصروفة بالكامل وفي انتظار فاتورة مرتجع المبيعات",
                            DocumentStatusNameEn = "The entire quantity disbursed has been returned and the sales return invoice is awaited"
                        },
                        new
                        {
                            DocumentStatusId = 21,
                            DocumentStatusNameAr = "تم عمل فاتورة مرتجع المبيعات",
                            DocumentStatusNameEn = "Sales return invoice has been created"
                        },
                        new
                        {
                            DocumentStatusId = 22,
                            DocumentStatusNameAr = "تم عمل فاتورة مرتجع المبيعات لبعض البضائع",
                            DocumentStatusNameEn = "Sales return invoice has been created for some of the items"
                        },
                        new
                        {
                            DocumentStatusId = 23,
                            DocumentStatusNameAr = "تم عمل فاتورة مرتجع المبيعات لكل البضائع",
                            DocumentStatusNameEn = "Sales return invoice has been created for all of the items"
                        },
                        new
                        {
                            DocumentStatusId = 24,
                            DocumentStatusNameAr = "تم عمل إشعار مدين المورد",
                            DocumentStatusNameEn = "Supplier debit memo has been created"
                        },
                        new
                        {
                            DocumentStatusId = 25,
                            DocumentStatusNameAr = "تم عمل إشعار دائن المورد",
                            DocumentStatusNameEn = "Supplier credit memo has been created"
                        },
                        new
                        {
                            DocumentStatusId = 26,
                            DocumentStatusNameAr = "تم عمل إشعار مدين للعميل",
                            DocumentStatusNameEn = "Client debit memo has been created"
                        },
                        new
                        {
                            DocumentStatusId = 27,
                            DocumentStatusNameAr = "تم عمل إشعار دائن للعميل",
                            DocumentStatusNameEn = "Client credit memo has been created"
                        });
                });

            modelBuilder.Entity("Shared.CoreOne.Models.Domain.Basics.InvoiceExpenseType", b =>
                {
                    b.Property<int>("InvoiceExpenseTypeId")
                        .HasColumnType("int")
                        .HasColumnOrder(1);

                    b.Property<int>("CompanyId")
                        .HasColumnType("int")
                        .HasColumnOrder(5);

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnOrder(200);

                    b.Property<bool?>("Hide")
                        .HasColumnType("tinyint(1)")
                        .HasColumnOrder(206);

                    b.Property<int>("InvoiceExpenseTypeCode")
                        .HasColumnType("int")
                        .HasColumnOrder(2);

                    b.Property<string>("InvoiceExpenseTypeNameAr")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)")
                        .HasColumnOrder(3);

                    b.Property<string>("InvoiceExpenseTypeNameEn")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)")
                        .HasColumnOrder(4);

                    b.Property<string>("IpAddressCreated")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnOrder(204);

                    b.Property<string>("IpAddressModified")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnOrder(205);

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnOrder(201);

                    b.Property<string>("UserNameCreated")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnOrder(202);

                    b.Property<string>("UserNameModified")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnOrder(203);

                    b.HasKey("InvoiceExpenseTypeId");

                    b.HasIndex("CompanyId");

                    b.ToTable("InvoiceExpenseTypes");
                });

            modelBuilder.Entity("Shared.CoreOne.Models.Domain.Basics.InvoiceType", b =>
                {
                    b.Property<byte>("InvoiceTypeId")
                        .HasColumnType("tinyint unsigned")
                        .HasColumnOrder(1);

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnOrder(200);

                    b.Property<bool?>("Hide")
                        .HasColumnType("tinyint(1)")
                        .HasColumnOrder(206);

                    b.Property<string>("InvoiceTypeNameAr")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnOrder(2);

                    b.Property<string>("InvoiceTypeNameEn")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnOrder(3);

                    b.Property<string>("IpAddressCreated")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnOrder(204);

                    b.Property<string>("IpAddressModified")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnOrder(205);

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnOrder(201);

                    b.Property<string>("UserNameCreated")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnOrder(202);

                    b.Property<string>("UserNameModified")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnOrder(203);

                    b.HasKey("InvoiceTypeId");

                    b.ToTable("InvoiceTypes");

                    b.HasData(
                        new
                        {
                            InvoiceTypeId = (byte)0,
                            InvoiceTypeNameAr = "غير معرف",
                            InvoiceTypeNameEn = "unknown"
                        },
                        new
                        {
                            InvoiceTypeId = (byte)1,
                            InvoiceTypeNameAr = "فاتورة ضريبية ",
                            InvoiceTypeNameEn = "Tax Invoice"
                        },
                        new
                        {
                            InvoiceTypeId = (byte)2,
                            InvoiceTypeNameAr = "فاتورة ضريبية مبسطة",
                            InvoiceTypeNameEn = "Simplified Tax Invoice"
                        });
                });

            modelBuilder.Entity("Shared.CoreOne.Models.Domain.Basics.ShippingStatus", b =>
                {
                    b.Property<int>("ShippingStatusId")
                        .HasColumnType("int")
                        .HasColumnOrder(1);

                    b.Property<int>("CompanyId")
                        .HasColumnType("int")
                        .HasColumnOrder(5);

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnOrder(200);

                    b.Property<bool?>("Hide")
                        .HasColumnType("tinyint(1)")
                        .HasColumnOrder(206);

                    b.Property<string>("InActiveReasons")
                        .HasMaxLength(2000)
                        .HasColumnType("varchar(2000)")
                        .HasColumnOrder(9);

                    b.Property<string>("IpAddressCreated")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnOrder(204);

                    b.Property<string>("IpAddressModified")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnOrder(205);

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)")
                        .HasColumnOrder(8);

                    b.Property<short>("MenuCode")
                        .HasColumnType("smallint")
                        .HasColumnOrder(6);

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnOrder(201);

                    b.Property<int>("ShippingStatusCode")
                        .HasColumnType("int")
                        .HasColumnOrder(2);

                    b.Property<string>("ShippingStatusNameAr")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)")
                        .HasColumnOrder(3);

                    b.Property<string>("ShippingStatusNameEn")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)")
                        .HasColumnOrder(4);

                    b.Property<int>("StatusOrder")
                        .HasColumnType("int")
                        .HasColumnOrder(7);

                    b.Property<string>("UserNameCreated")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnOrder(202);

                    b.Property<string>("UserNameModified")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnOrder(203);

                    b.HasKey("ShippingStatusId");

                    b.HasIndex("CompanyId");

                    b.HasIndex("MenuCode");

                    b.ToTable("ShippingStatuses");
                });

            modelBuilder.Entity("Shared.CoreOne.Models.Domain.Basics.State", b =>
                {
                    b.Property<int>("StateId")
                        .HasColumnType("int")
                        .HasColumnOrder(1);

                    b.Property<int>("CountryId")
                        .HasColumnType("int")
                        .HasColumnOrder(4);

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnOrder(200);

                    b.Property<bool?>("Hide")
                        .HasColumnType("tinyint(1)")
                        .HasColumnOrder(206);

                    b.Property<string>("IpAddressCreated")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnOrder(204);

                    b.Property<string>("IpAddressModified")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnOrder(205);

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnOrder(201);

                    b.Property<string>("StateNameAr")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnOrder(2);

                    b.Property<string>("StateNameEn")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnOrder(3);

                    b.Property<string>("UserNameCreated")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnOrder(202);

                    b.Property<string>("UserNameModified")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnOrder(203);

                    b.HasKey("StateId");

                    b.HasIndex("CountryId");

                    b.ToTable("States");
                });

            modelBuilder.Entity("Shared.CoreOne.Models.Domain.Basics.SystemTask", b =>
                {
                    b.Property<int>("TaskId")
                        .HasColumnType("int")
                        .HasColumnOrder(1);

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnOrder(200);

                    b.Property<bool?>("Hide")
                        .HasColumnType("tinyint(1)")
                        .HasColumnOrder(206);

                    b.Property<string>("IpAddressCreated")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnOrder(204);

                    b.Property<string>("IpAddressModified")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnOrder(205);

                    b.Property<bool>("IsCompleted")
                        .HasColumnType("tinyint(1)")
                        .HasColumnOrder(4);

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnOrder(201);

                    b.Property<string>("TaskNameAr")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnOrder(2);

                    b.Property<string>("TaskNameEn")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnOrder(3);

                    b.Property<string>("UserNameCreated")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnOrder(202);

                    b.Property<string>("UserNameModified")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnOrder(203);

                    b.HasKey("TaskId");

                    b.ToTable("SystemTasks");

                    b.HasData(
                        new
                        {
                            TaskId = 1,
                            IsCompleted = false,
                            TaskNameAr = "استيراد الدول",
                            TaskNameEn = "Import Countries"
                        },
                        new
                        {
                            TaskId = 2,
                            IsCompleted = false,
                            TaskNameAr = "استيراد المناطق الإدارية",
                            TaskNameEn = "Import States"
                        },
                        new
                        {
                            TaskId = 3,
                            IsCompleted = false,
                            TaskNameAr = "استيراد المدن",
                            TaskNameEn = "Import Cities"
                        },
                        new
                        {
                            TaskId = 4,
                            IsCompleted = false,
                            TaskNameAr = "استيراد الأحياء",
                            TaskNameEn = "Import Districts"
                        },
                        new
                        {
                            TaskId = 5,
                            IsCompleted = false,
                            TaskNameAr = "استيراد العملات",
                            TaskNameEn = "Import Currencies"
                        });
                });

            modelBuilder.Entity("Shared.CoreOne.Models.Domain.CostCenters.CostCenter", b =>
                {
                    b.Property<int>("CostCenterId")
                        .HasColumnType("int")
                        .HasColumnOrder(1);

                    b.Property<int?>("ArchiveHeaderId")
                        .HasColumnType("int")
                        .HasColumnOrder(21);

                    b.Property<int>("CompanyId")
                        .HasColumnType("int")
                        .HasColumnOrder(6);

                    b.Property<string>("CostCenterCode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnOrder(2);

                    b.Property<byte>("CostCenterLevel")
                        .HasColumnType("tinyint unsigned")
                        .HasColumnOrder(9);

                    b.Property<string>("CostCenterNameAr")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)")
                        .HasColumnOrder(3);

                    b.Property<string>("CostCenterNameEn")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)")
                        .HasColumnOrder(4);

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnOrder(200);

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("varchar(1000)")
                        .HasColumnOrder(5);

                    b.Property<bool>("HasRemarks")
                        .HasColumnType("tinyint(1)")
                        .HasColumnOrder(15);

                    b.Property<bool?>("Hide")
                        .HasColumnType("tinyint(1)")
                        .HasColumnOrder(206);

                    b.Property<string>("InActiveReasons")
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)")
                        .HasColumnOrder(14);

                    b.Property<string>("IpAddressCreated")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnOrder(204);

                    b.Property<string>("IpAddressModified")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnOrder(205);

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)")
                        .HasColumnOrder(13);

                    b.Property<bool>("IsLastLevel")
                        .HasColumnType("tinyint(1)")
                        .HasColumnOrder(11);

                    b.Property<bool>("IsMainCostCenter")
                        .HasColumnType("tinyint(1)")
                        .HasColumnOrder(7);

                    b.Property<bool>("IsNonEditable")
                        .HasColumnType("tinyint(1)")
                        .HasColumnOrder(18);

                    b.Property<bool>("IsPrivate")
                        .HasColumnType("tinyint(1)")
                        .HasColumnOrder(12);

                    b.Property<int?>("MainCostCenterId")
                        .HasColumnType("int")
                        .HasColumnOrder(8);

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnOrder(201);

                    b.Property<string>("NotesAr")
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)")
                        .HasColumnOrder(19);

                    b.Property<string>("NotesEn")
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)")
                        .HasColumnOrder(20);

                    b.Property<int>("Order")
                        .HasColumnType("int")
                        .HasColumnOrder(10);

                    b.Property<string>("RemarksAr")
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)")
                        .HasColumnOrder(16);

                    b.Property<string>("RemarksEn")
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)")
                        .HasColumnOrder(17);

                    b.Property<string>("UserNameCreated")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnOrder(202);

                    b.Property<string>("UserNameModified")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnOrder(203);

                    b.HasKey("CostCenterId");

                    b.HasIndex("ArchiveHeaderId");

                    b.HasIndex("CompanyId");

                    b.ToTable("CostCenters");
                });

            modelBuilder.Entity("Shared.CoreOne.Models.Domain.FixedAssets.FixedAsset", b =>
                {
                    b.Property<int>("FixedAssetId")
                        .HasColumnType("int")
                        .HasColumnOrder(1);

                    b.Property<int?>("AccountId")
                        .HasColumnType("int")
                        .HasColumnOrder(11);

                    b.Property<decimal>("AnnualDepreciationPercent")
                        .HasColumnType("decimal(30,15)")
                        .HasColumnOrder(14);

                    b.Property<int?>("ArchiveHeaderId")
                        .HasColumnType("int")
                        .HasColumnOrder(25);

                    b.Property<int>("CompanyId")
                        .HasColumnType("int")
                        .HasColumnOrder(5);

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnOrder(200);

                    b.Property<int?>("CumulativeDepreciationAccountId")
                        .HasColumnType("int")
                        .HasColumnOrder(13);

                    b.Property<int?>("DepreciationAccountId")
                        .HasColumnType("int")
                        .HasColumnOrder(12);

                    b.Property<string>("FixedAssetCode")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnOrder(2);

                    b.Property<byte>("FixedAssetLevel")
                        .HasColumnType("tinyint unsigned")
                        .HasColumnOrder(8);

                    b.Property<string>("FixedAssetNameAr")
                        .HasMaxLength(1000)
                        .HasColumnType("varchar(1000)")
                        .HasColumnOrder(3);

                    b.Property<string>("FixedAssetNameEn")
                        .HasMaxLength(1000)
                        .HasColumnType("varchar(1000)")
                        .HasColumnOrder(4);

                    b.Property<bool>("HasRemarks")
                        .HasColumnType("tinyint(1)")
                        .HasColumnOrder(19);

                    b.Property<bool?>("Hide")
                        .HasColumnType("tinyint(1)")
                        .HasColumnOrder(206);

                    b.Property<string>("InActiveReasonsAr")
                        .HasMaxLength(2000)
                        .HasColumnType("varchar(2000)")
                        .HasColumnOrder(17);

                    b.Property<string>("InActiveReasonsEn")
                        .HasMaxLength(2000)
                        .HasColumnType("varchar(2000)")
                        .HasColumnOrder(18);

                    b.Property<string>("IpAddressCreated")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnOrder(204);

                    b.Property<string>("IpAddressModified")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnOrder(205);

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)")
                        .HasColumnOrder(16);

                    b.Property<bool>("IsLastLevel")
                        .HasColumnType("tinyint(1)")
                        .HasColumnOrder(10);

                    b.Property<bool>("IsMainFixedAsset")
                        .HasColumnType("tinyint(1)")
                        .HasColumnOrder(6);

                    b.Property<bool>("IsNonEditable")
                        .HasColumnType("tinyint(1)")
                        .HasColumnOrder(22);

                    b.Property<bool>("IsPrivate")
                        .HasColumnType("tinyint(1)")
                        .HasColumnOrder(15);

                    b.Property<int?>("MainFixedAssetId")
                        .HasColumnType("int")
                        .HasColumnOrder(7);

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnOrder(201);

                    b.Property<string>("NotesAr")
                        .HasMaxLength(2000)
                        .HasColumnType("varchar(2000)")
                        .HasColumnOrder(23);

                    b.Property<string>("NotesEn")
                        .HasMaxLength(2000)
                        .HasColumnType("varchar(2000)")
                        .HasColumnOrder(24);

                    b.Property<int>("Order")
                        .HasColumnType("int")
                        .HasColumnOrder(9);

                    b.Property<string>("RemarksAr")
                        .HasMaxLength(2000)
                        .HasColumnType("varchar(2000)")
                        .HasColumnOrder(20);

                    b.Property<string>("RemarksEn")
                        .HasMaxLength(2000)
                        .HasColumnType("varchar(2000)")
                        .HasColumnOrder(21);

                    b.Property<string>("UserNameCreated")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnOrder(202);

                    b.Property<string>("UserNameModified")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnOrder(203);

                    b.HasKey("FixedAssetId");

                    b.HasIndex("AccountId");

                    b.HasIndex("ArchiveHeaderId");

                    b.HasIndex("CompanyId");

                    b.HasIndex("CumulativeDepreciationAccountId");

                    b.HasIndex("DepreciationAccountId");

                    b.ToTable("FixedAssets");
                });

            modelBuilder.Entity("Shared.CoreOne.Models.Domain.FixedAssets.FixedAssetVoucherType", b =>
                {
                    b.Property<byte>("FixedAssetVoucherTypeId")
                        .HasColumnType("tinyint unsigned")
                        .HasColumnOrder(1);

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnOrder(200);

                    b.Property<string>("FixedAssetVoucherTypeNameAr")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnOrder(2);

                    b.Property<string>("FixedAssetVoucherTypeNameEn")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnOrder(3);

                    b.Property<bool?>("Hide")
                        .HasColumnType("tinyint(1)")
                        .HasColumnOrder(206);

                    b.Property<string>("IpAddressCreated")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnOrder(204);

                    b.Property<string>("IpAddressModified")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnOrder(205);

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnOrder(201);

                    b.Property<string>("UserNameCreated")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnOrder(202);

                    b.Property<string>("UserNameModified")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnOrder(203);

                    b.HasKey("FixedAssetVoucherTypeId");

                    b.ToTable("FixedAssetVoucherTypes");

                    b.HasData(
                        new
                        {
                            FixedAssetVoucherTypeId = (byte)1,
                            FixedAssetVoucherTypeNameAr = "إضافة",
                            FixedAssetVoucherTypeNameEn = "Addition"
                        },
                        new
                        {
                            FixedAssetVoucherTypeId = (byte)2,
                            FixedAssetVoucherTypeNameAr = "إستبعاد",
                            FixedAssetVoucherTypeNameEn = "Exclusion"
                        },
                        new
                        {
                            FixedAssetVoucherTypeId = (byte)3,
                            FixedAssetVoucherTypeNameAr = "إهلاك",
                            FixedAssetVoucherTypeNameEn = "Depreciation"
                        });
                });

            modelBuilder.Entity("Shared.CoreOne.Models.Domain.Inventory.ItemCost", b =>
                {
                    b.Property<int>("ItemCostId")
                        .HasColumnType("int")
                        .HasColumnOrder(1);

                    b.Property<decimal>("CostPrice")
                        .HasColumnType("decimal(30,15)")
                        .HasColumnOrder(5);

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnOrder(200);

                    b.Property<bool?>("Hide")
                        .HasColumnType("tinyint(1)")
                        .HasColumnOrder(206);

                    b.Property<string>("IpAddressCreated")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnOrder(204);

                    b.Property<string>("IpAddressModified")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnOrder(205);

                    b.Property<int>("ItemId")
                        .HasColumnType("int")
                        .HasColumnOrder(3);

                    b.Property<int>("ItemPackageId")
                        .HasColumnType("int")
                        .HasColumnOrder(4);

                    b.Property<decimal>("LastCostPrice")
                        .HasColumnType("decimal(30,15)")
                        .HasColumnOrder(7);

                    b.Property<decimal>("LastPurchasePrice")
                        .HasColumnType("decimal(30,15)")
                        .HasColumnOrder(6);

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnOrder(201);

                    b.Property<int>("StoreId")
                        .HasColumnType("int")
                        .HasColumnOrder(2);

                    b.Property<string>("UserNameCreated")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnOrder(202);

                    b.Property<string>("UserNameModified")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnOrder(203);

                    b.HasKey("ItemCostId");

                    b.HasIndex("ItemId");

                    b.HasIndex("ItemPackageId");

                    b.HasIndex("StoreId");

                    b.ToTable("ItemCosts");
                });

            modelBuilder.Entity("Shared.CoreOne.Models.Domain.Inventory.ItemCostUpdateDetail", b =>
                {
                    b.Property<int>("ItemCostUpdateDetailId")
                        .HasColumnType("int")
                        .HasColumnOrder(1);

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnOrder(200);

                    b.Property<bool?>("Hide")
                        .HasColumnType("tinyint(1)")
                        .HasColumnOrder(206);

                    b.Property<string>("IpAddressCreated")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnOrder(204);

                    b.Property<string>("IpAddressModified")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnOrder(205);

                    b.Property<int>("ItemCostUpdateHeaderId")
                        .HasColumnType("int")
                        .HasColumnOrder(2);

                    b.Property<int>("ItemId")
                        .HasColumnType("int")
                        .HasColumnOrder(3);

                    b.Property<int>("ItemPackageId")
                        .HasColumnType("int")
                        .HasColumnOrder(4);

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnOrder(201);

                    b.Property<decimal>("NewCostPrice")
                        .HasColumnType("decimal(30,15)")
                        .HasColumnOrder(6);

                    b.Property<decimal>("NewLastCostPrice")
                        .HasColumnType("decimal(30,15)")
                        .HasColumnOrder(10);

                    b.Property<decimal>("NewLastPurchasePrice")
                        .HasColumnType("decimal(30,15)")
                        .HasColumnOrder(8);

                    b.Property<decimal>("OldCostPrice")
                        .HasColumnType("decimal(30,15)")
                        .HasColumnOrder(5);

                    b.Property<decimal>("OldLastCostPrice")
                        .HasColumnType("decimal(30,15)")
                        .HasColumnOrder(9);

                    b.Property<decimal>("OldLastPurchasePrice")
                        .HasColumnType("decimal(30,15)")
                        .HasColumnOrder(7);

                    b.Property<string>("UserNameCreated")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnOrder(202);

                    b.Property<string>("UserNameModified")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnOrder(203);

                    b.HasKey("ItemCostUpdateDetailId");

                    b.HasIndex("ItemCostUpdateHeaderId");

                    b.HasIndex("ItemId");

                    b.HasIndex("ItemPackageId");

                    b.ToTable("ItemCostUpdateDetails");
                });

            modelBuilder.Entity("Shared.CoreOne.Models.Domain.Inventory.ItemCostUpdateHeader", b =>
                {
                    b.Property<int>("ItemCostUpdateHeaderId")
                        .HasColumnType("int")
                        .HasColumnOrder(1);

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnOrder(200);

                    b.Property<DateTime>("EntryDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnOrder(2);

                    b.Property<bool?>("Hide")
                        .HasColumnType("tinyint(1)")
                        .HasColumnOrder(206);

                    b.Property<string>("IpAddressCreated")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnOrder(204);

                    b.Property<string>("IpAddressModified")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnOrder(205);

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnOrder(201);

                    b.Property<int>("StoreId")
                        .HasColumnType("int")
                        .HasColumnOrder(3);

                    b.Property<string>("UserNameCreated")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnOrder(202);

                    b.Property<string>("UserNameModified")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnOrder(203);

                    b.HasKey("ItemCostUpdateHeaderId");

                    b.HasIndex("StoreId");

                    b.ToTable("ItemCostUpdateHeaders");
                });

            modelBuilder.Entity("Shared.CoreOne.Models.Domain.Inventory.ItemCurrentBalance", b =>
                {
                    b.Property<int>("ItemCurrentBalanceId")
                        .HasColumnType("int")
                        .HasColumnOrder(1);

                    b.Property<string>("BatchNumber")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnOrder(6);

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnOrder(200);

                    b.Property<DateTime?>("ExpireDate")
                        .HasColumnType("Date")
                        .HasColumnOrder(5);

                    b.Property<bool?>("Hide")
                        .HasColumnType("tinyint(1)")
                        .HasColumnOrder(206);

                    b.Property<decimal>("InQuantity")
                        .HasColumnType("decimal(30,15)")
                        .HasColumnOrder(9);

                    b.Property<string>("IpAddressCreated")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnOrder(204);

                    b.Property<string>("IpAddressModified")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnOrder(205);

                    b.Property<int>("ItemId")
                        .HasColumnType("int")
                        .HasColumnOrder(3);

                    b.Property<int>("ItemPackageId")
                        .HasColumnType("int")
                        .HasColumnOrder(4);

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnOrder(201);

                    b.Property<DateTime?>("OpenDate")
                        .HasColumnType("Date")
                        .HasColumnOrder(7);

                    b.Property<decimal>("OpenQuantity")
                        .HasColumnType("decimal(30,15)")
                        .HasColumnOrder(8);

                    b.Property<decimal>("OutQuantity")
                        .HasColumnType("decimal(30,15)")
                        .HasColumnOrder(10);

                    b.Property<decimal>("PendingInQuantity")
                        .HasColumnType("decimal(30,15)")
                        .HasColumnOrder(11);

                    b.Property<decimal>("PendingOutQuantity")
                        .HasColumnType("decimal(30,15)")
                        .HasColumnOrder(12);

                    b.Property<int>("StoreId")
                        .HasColumnType("int")
                        .HasColumnOrder(2);

                    b.Property<string>("UserNameCreated")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnOrder(202);

                    b.Property<string>("UserNameModified")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnOrder(203);

                    b.HasKey("ItemCurrentBalanceId");

                    b.HasIndex("ItemId");

                    b.HasIndex("ItemPackageId");

                    b.HasIndex("StoreId");

                    b.ToTable("ItemCurrentBalances");
                });

            modelBuilder.Entity("Shared.CoreOne.Models.Domain.Inventory.ItemDisassemble", b =>
                {
                    b.Property<int>("ItemDisassembleId")
                        .HasColumnType("int")
                        .HasColumnOrder(1);

                    b.Property<string>("BatchNumber")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnOrder(8);

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnOrder(200);

                    b.Property<DateTime>("EntryDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnOrder(4);

                    b.Property<DateTime?>("ExpireDate")
                        .HasColumnType("Date")
                        .HasColumnOrder(7);

                    b.Property<bool?>("Hide")
                        .HasColumnType("tinyint(1)")
                        .HasColumnOrder(206);

                    b.Property<decimal>("InQuantity")
                        .HasColumnType("decimal(30,15)")
                        .HasColumnOrder(9);

                    b.Property<string>("IpAddressCreated")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnOrder(204);

                    b.Property<string>("IpAddressModified")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnOrder(205);

                    b.Property<int>("ItemDisassembleHeaderId")
                        .HasColumnType("int")
                        .HasColumnOrder(2);

                    b.Property<int>("ItemId")
                        .HasColumnType("int")
                        .HasColumnOrder(5);

                    b.Property<int>("ItemPackageId")
                        .HasColumnType("int")
                        .HasColumnOrder(6);

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnOrder(201);

                    b.Property<decimal>("OutQuantity")
                        .HasColumnType("decimal(30,15)")
                        .HasColumnOrder(10);

                    b.Property<int>("StoreId")
                        .HasColumnType("int")
                        .HasColumnOrder(3);

                    b.Property<string>("UserNameCreated")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnOrder(202);

                    b.Property<string>("UserNameModified")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnOrder(203);

                    b.HasKey("ItemDisassembleId");

                    b.HasIndex("ItemDisassembleHeaderId");

                    b.HasIndex("ItemId");

                    b.HasIndex("ItemPackageId");

                    b.HasIndex("StoreId");

                    b.ToTable("ItemDisassembles");
                });

            modelBuilder.Entity("Shared.CoreOne.Models.Domain.Inventory.ItemDisassembleDetail", b =>
                {
                    b.Property<int>("ItemDisassembleDetailId")
                        .HasColumnType("int")
                        .HasColumnOrder(1);

                    b.Property<string>("BatchNumber")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnOrder(8);

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnOrder(200);

                    b.Property<DateTime?>("ExpireDate")
                        .HasColumnType("Date")
                        .HasColumnOrder(7);

                    b.Property<int>("FromPackageId")
                        .HasColumnType("int")
                        .HasColumnOrder(5);

                    b.Property<decimal>("FromPackageQuantityAfter")
                        .HasColumnType("decimal(30,15)")
                        .HasColumnOrder(13);

                    b.Property<decimal>("FromPackageQuantityBefore")
                        .HasColumnType("decimal(30,15)")
                        .HasColumnOrder(11);

                    b.Property<bool?>("Hide")
                        .HasColumnType("tinyint(1)")
                        .HasColumnOrder(206);

                    b.Property<string>("IpAddressCreated")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnOrder(204);

                    b.Property<string>("IpAddressModified")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnOrder(205);

                    b.Property<bool>("IsSerialConversion")
                        .HasColumnType("tinyint(1)")
                        .HasColumnOrder(3);

                    b.Property<int>("ItemDisassembleHeaderId")
                        .HasColumnType("int")
                        .HasColumnOrder(2);

                    b.Property<int>("ItemId")
                        .HasColumnType("int")
                        .HasColumnOrder(4);

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnOrder(201);

                    b.Property<decimal>("Packing")
                        .HasColumnType("decimal(30,15)")
                        .HasColumnOrder(9);

                    b.Property<decimal>("Quantity")
                        .HasColumnType("decimal(30,15)")
                        .HasColumnOrder(10);

                    b.Property<int>("ToPackageId")
                        .HasColumnType("int")
                        .HasColumnOrder(6);

                    b.Property<decimal>("ToPackageQuantityAfter")
                        .HasColumnType("decimal(30,15)")
                        .HasColumnOrder(14);

                    b.Property<decimal>("ToPackageQuantityBefore")
                        .HasColumnType("decimal(30,15)")
                        .HasColumnOrder(12);

                    b.Property<string>("UserNameCreated")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnOrder(202);

                    b.Property<string>("UserNameModified")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnOrder(203);

                    b.HasKey("ItemDisassembleDetailId");

                    b.HasIndex("FromPackageId");

                    b.HasIndex("ItemDisassembleHeaderId");

                    b.HasIndex("ItemId");

                    b.HasIndex("ToPackageId");

                    b.ToTable("ItemDisassembleDetails");
                });

            modelBuilder.Entity("Shared.CoreOne.Models.Domain.Inventory.ItemDisassembleHeader", b =>
                {
                    b.Property<int>("ItemDisassembleHeaderId")
                        .HasColumnType("int")
                        .HasColumnOrder(1);

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnOrder(200);

                    b.Property<DateTime>("DocumentDate")
                        .HasColumnType("Date")
                        .HasColumnOrder(5);

                    b.Property<DateTime>("EntryDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnOrder(4);

                    b.Property<bool?>("Hide")
                        .HasColumnType("tinyint(1)")
                        .HasColumnOrder(206);

                    b.Property<string>("IpAddressCreated")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnOrder(204);

                    b.Property<string>("IpAddressModified")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnOrder(205);

                    b.Property<bool>("IsAutomatic")
                        .HasColumnType("tinyint(1)")
                        .HasColumnOrder(6);

                    b.Property<int>("ItemDisassembleCode")
                        .HasColumnType("int")
                        .HasColumnOrder(2);

                    b.Property<short?>("MenuCode")
                        .HasColumnType("smallint")
                        .HasColumnOrder(7);

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnOrder(201);

                    b.Property<int?>("ReferenceDetailId")
                        .HasColumnType("int")
                        .HasColumnOrder(9);

                    b.Property<int?>("ReferenceHeaderId")
                        .HasColumnType("int")
                        .HasColumnOrder(8);

                    b.Property<string>("RemarksAr")
                        .HasMaxLength(2000)
                        .HasColumnType("varchar(2000)")
                        .HasColumnOrder(10);

                    b.Property<string>("RemarksEn")
                        .HasMaxLength(2000)
                        .HasColumnType("varchar(2000)")
                        .HasColumnOrder(11);

                    b.Property<int>("StoreId")
                        .HasColumnType("int")
                        .HasColumnOrder(3);

                    b.Property<string>("UserNameCreated")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnOrder(202);

                    b.Property<string>("UserNameModified")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnOrder(203);

                    b.HasKey("ItemDisassembleHeaderId");

                    b.HasIndex("MenuCode");

                    b.HasIndex("StoreId");

                    b.ToTable("ItemDisassembleHeaders");
                });

            modelBuilder.Entity("Shared.CoreOne.Models.Domain.Inventory.ItemDisassembleSerial", b =>
                {
                    b.Property<int>("ItemDisassembleSerialId")
                        .HasColumnType("int")
                        .HasColumnOrder(1);

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnOrder(200);

                    b.Property<bool?>("Hide")
                        .HasColumnType("tinyint(1)")
                        .HasColumnOrder(206);

                    b.Property<string>("IpAddressCreated")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnOrder(204);

                    b.Property<string>("IpAddressModified")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnOrder(205);

                    b.Property<int>("ItemDisassembleHeaderId")
                        .HasColumnType("int")
                        .HasColumnOrder(2);

                    b.Property<int>("ItemId")
                        .HasColumnType("int")
                        .HasColumnOrder(3);

                    b.Property<decimal>("ItemPackageBalanceAfter")
                        .HasColumnType("decimal(30,15)")
                        .HasColumnOrder(7);

                    b.Property<decimal>("ItemPackageBalanceBefore")
                        .HasColumnType("decimal(30,15)")
                        .HasColumnOrder(6);

                    b.Property<int>("ItemPackageId")
                        .HasColumnType("int")
                        .HasColumnOrder(4);

                    b.Property<int?>("MainItemPackageId")
                        .HasColumnType("int")
                        .HasColumnOrder(5);

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnOrder(201);

                    b.Property<string>("UserNameCreated")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnOrder(202);

                    b.Property<string>("UserNameModified")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnOrder(203);

                    b.HasKey("ItemDisassembleSerialId");

                    b.HasIndex("ItemDisassembleHeaderId");

                    b.HasIndex("ItemId");

                    b.HasIndex("ItemPackageId");

                    b.HasIndex("MainItemPackageId");

                    b.ToTable("ItemDisassembleSerials");
                });

            modelBuilder.Entity("Shared.CoreOne.Models.Domain.Inventory.ItemNegativeSalesDetail", b =>
                {
                    b.Property<int>("ItemNegativeSalesDetailId")
                        .HasColumnType("int")
                        .HasColumnOrder(1);

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnOrder(200);

                    b.Property<bool?>("Hide")
                        .HasColumnType("tinyint(1)")
                        .HasColumnOrder(206);

                    b.Property<string>("IpAddressCreated")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnOrder(204);

                    b.Property<string>("IpAddressModified")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnOrder(205);

                    b.Property<int>("ItemNegativeSalesHeaderId")
                        .HasColumnType("int")
                        .HasColumnOrder(2);

                    b.Property<short?>("MenuCode")
                        .HasColumnType("smallint")
                        .HasColumnOrder(4);

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnOrder(201);

                    b.Property<int?>("ReferenceDetailId")
                        .HasColumnType("int")
                        .HasColumnOrder(6);

                    b.Property<int?>("ReferenceHeaderId")
                        .HasColumnType("int")
                        .HasColumnOrder(5);

                    b.Property<string>("RemarksAr")
                        .HasMaxLength(2000)
                        .HasColumnType("varchar(2000)")
                        .HasColumnOrder(7);

                    b.Property<string>("RemarksEn")
                        .HasMaxLength(2000)
                        .HasColumnType("varchar(2000)")
                        .HasColumnOrder(8);

                    b.Property<decimal>("SettledQuantity")
                        .HasColumnType("decimal(30,15)")
                        .HasColumnOrder(3);

                    b.Property<string>("UserNameCreated")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnOrder(202);

                    b.Property<string>("UserNameModified")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnOrder(203);

                    b.HasKey("ItemNegativeSalesDetailId");

                    b.HasIndex("ItemNegativeSalesHeaderId");

                    b.HasIndex("MenuCode");

                    b.ToTable("ItemNegativeSalesDetails");
                });

            modelBuilder.Entity("Shared.CoreOne.Models.Domain.Inventory.ItemNegativeSalesHeader", b =>
                {
                    b.Property<int>("ItemNegativeSalesHeaderId")
                        .HasColumnType("int")
                        .HasColumnOrder(1);

                    b.Property<string>("BatchNumber")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnOrder(8);

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnOrder(200);

                    b.Property<DateTime>("DocumentDate")
                        .HasColumnType("Date")
                        .HasColumnOrder(3);

                    b.Property<DateTime>("EntryDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnOrder(4);

                    b.Property<DateTime?>("ExpireDate")
                        .HasColumnType("Date")
                        .HasColumnOrder(7);

                    b.Property<bool?>("Hide")
                        .HasColumnType("tinyint(1)")
                        .HasColumnOrder(206);

                    b.Property<string>("IpAddressCreated")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnOrder(204);

                    b.Property<string>("IpAddressModified")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnOrder(205);

                    b.Property<bool>("IsSettled")
                        .HasColumnType("tinyint(1)")
                        .HasColumnOrder(12);

                    b.Property<int>("ItemId")
                        .HasColumnType("int")
                        .HasColumnOrder(5);

                    b.Property<int>("ItemPackageId")
                        .HasColumnType("int")
                        .HasColumnOrder(6);

                    b.Property<decimal>("ItemPreviousQuantity")
                        .HasColumnType("decimal(30,15)")
                        .HasColumnOrder(9);

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnOrder(201);

                    b.Property<decimal>("NegativeSalesQuantity")
                        .HasColumnType("decimal(30,15)")
                        .HasColumnOrder(10);

                    b.Property<string>("RemarksAr")
                        .HasMaxLength(2000)
                        .HasColumnType("varchar(2000)")
                        .HasColumnOrder(13);

                    b.Property<string>("RemarksEn")
                        .HasMaxLength(2000)
                        .HasColumnType("varchar(2000)")
                        .HasColumnOrder(14);

                    b.Property<decimal>("SettledQuantity")
                        .HasColumnType("decimal(30,15)")
                        .HasColumnOrder(11);

                    b.Property<int>("StoreId")
                        .HasColumnType("int")
                        .HasColumnOrder(2);

                    b.Property<string>("UserNameCreated")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnOrder(202);

                    b.Property<string>("UserNameModified")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnOrder(203);

                    b.HasKey("ItemNegativeSalesHeaderId");

                    b.HasIndex("ItemId");

                    b.HasIndex("ItemPackageId");

                    b.HasIndex("StoreId");

                    b.ToTable("ItemNegativeSalesHeaders");
                });

            modelBuilder.Entity("Shared.CoreOne.Models.Domain.Inventory.StockType", b =>
                {
                    b.Property<byte>("StockTypeId")
                        .HasColumnType("tinyint unsigned")
                        .HasColumnOrder(1);

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnOrder(200);

                    b.Property<bool?>("Hide")
                        .HasColumnType("tinyint(1)")
                        .HasColumnOrder(206);

                    b.Property<string>("IpAddressCreated")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnOrder(204);

                    b.Property<string>("IpAddressModified")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnOrder(205);

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnOrder(201);

                    b.Property<string>("StockTypeNameAr")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnOrder(2);

                    b.Property<string>("StockTypeNameEn")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnOrder(3);

                    b.Property<string>("UserNameCreated")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnOrder(202);

                    b.Property<string>("UserNameModified")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnOrder(203);

                    b.HasKey("StockTypeId");

                    b.ToTable("StockTypes");

                    b.HasData(
                        new
                        {
                            StockTypeId = (byte)1,
                            StockTypeNameAr = "بيان استلام",
                            StockTypeNameEn = "Receipt Statement"
                        },
                        new
                        {
                            StockTypeId = (byte)2,
                            StockTypeNameAr = "استلام من فاتورة بضاعة بالطريق",
                            StockTypeNameEn = "Receipt From Purchase Invoice On The Way"
                        },
                        new
                        {
                            StockTypeId = (byte)3,
                            StockTypeNameAr = "مرتجع من بيان استلام",
                            StockTypeNameEn = "Receipt Statement Return"
                        },
                        new
                        {
                            StockTypeId = (byte)4,
                            StockTypeNameAr = "مرتجع من استلام فاتورة بضاعة بالطريق",
                            StockTypeNameEn = "Receipt From Purchase Invoice On The Way Return"
                        },
                        new
                        {
                            StockTypeId = (byte)5,
                            StockTypeNameAr = "مرتجع من فاتورة المشتريات",
                            StockTypeNameEn = "StockIn Return From Purchase Invoice"
                        },
                        new
                        {
                            StockTypeId = (byte)6,
                            StockTypeNameAr = "بيان تسليم",
                            StockTypeNameEn = "StockOut From Proforma Invoice"
                        },
                        new
                        {
                            StockTypeId = (byte)7,
                            StockTypeNameAr = "تسليم محجوز",
                            StockTypeNameEn = "Stock Out From Reservation"
                        },
                        new
                        {
                            StockTypeId = (byte)8,
                            StockTypeNameAr = "مرتجع من بيان تسليم",
                            StockTypeNameEn = "Stock Out Return From Stock Out"
                        },
                        new
                        {
                            StockTypeId = (byte)9,
                            StockTypeNameAr = "مرتجع من تسليم محجوز",
                            StockTypeNameEn = "Stock Out Return From Reservation"
                        },
                        new
                        {
                            StockTypeId = (byte)10,
                            StockTypeNameAr = "مرتجع من فاتورة المبيعات",
                            StockTypeNameEn = "StockOut Return From Sales Invoice"
                        });
                });

            modelBuilder.Entity("Shared.CoreOne.Models.Domain.Items.Item", b =>
                {
                    b.Property<int>("ItemId")
                        .HasColumnType("int")
                        .HasColumnOrder(1);

                    b.Property<int?>("ArchiveHeaderId")
                        .HasColumnType("int")
                        .HasColumnOrder(42);

                    b.Property<int>("CompanyId")
                        .HasColumnType("int")
                        .HasColumnOrder(5);

                    b.Property<decimal>("ConsumerPrice")
                        .HasColumnType("decimal(30,15)")
                        .HasColumnOrder(16);

                    b.Property<decimal>("CoverageQuantity")
                        .HasColumnType("decimal(30,15)")
                        .HasColumnOrder(26);

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnOrder(200);

                    b.Property<bool?>("Hide")
                        .HasColumnType("tinyint(1)")
                        .HasColumnOrder(206);

                    b.Property<string>("InActiveReasons")
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)")
                        .HasColumnOrder(28);

                    b.Property<decimal>("InternalPrice")
                        .HasColumnType("decimal(30,15)")
                        .HasColumnOrder(17);

                    b.Property<string>("IpAddressCreated")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnOrder(204);

                    b.Property<string>("IpAddressModified")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnOrder(205);

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)")
                        .HasColumnOrder(27);

                    b.Property<bool>("IsBatched")
                        .HasColumnType("tinyint(1)")
                        .HasColumnOrder(40);

                    b.Property<bool>("IsDeficit")
                        .HasColumnType("tinyint(1)")
                        .HasColumnOrder(33);

                    b.Property<bool>("IsExpired")
                        .HasColumnType("tinyint(1)")
                        .HasColumnOrder(39);

                    b.Property<bool>("IsGifts")
                        .HasColumnType("tinyint(1)")
                        .HasColumnOrder(37);

                    b.Property<bool>("IsNoStock")
                        .HasColumnType("tinyint(1)")
                        .HasColumnOrder(31);

                    b.Property<bool>("IsOnline")
                        .HasColumnType("tinyint(1)")
                        .HasColumnOrder(35);

                    b.Property<bool>("IsPoints")
                        .HasColumnType("tinyint(1)")
                        .HasColumnOrder(36);

                    b.Property<bool>("IsPos")
                        .HasColumnType("tinyint(1)")
                        .HasColumnOrder(34);

                    b.Property<bool>("IsPromoted")
                        .HasColumnType("tinyint(1)")
                        .HasColumnOrder(38);

                    b.Property<bool>("IsUnderSelling")
                        .HasColumnType("tinyint(1)")
                        .HasColumnOrder(30);

                    b.Property<bool>("IsUntradeable")
                        .HasColumnType("tinyint(1)")
                        .HasColumnOrder(32);

                    b.Property<int?>("ItemCategoryId")
                        .HasColumnType("int")
                        .HasColumnOrder(6);

                    b.Property<string>("ItemCode")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnOrder(2);

                    b.Property<string>("ItemLocation")
                        .HasMaxLength(300)
                        .HasColumnType("varchar(300)")
                        .HasColumnOrder(41);

                    b.Property<string>("ItemNameAr")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("varchar(2000)")
                        .HasColumnOrder(3);

                    b.Property<string>("ItemNameEn")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("varchar(2000)")
                        .HasColumnOrder(4);

                    b.Property<int?>("ItemSectionId")
                        .HasColumnType("int")
                        .HasColumnOrder(8);

                    b.Property<int?>("ItemSubCategoryId")
                        .HasColumnType("int")
                        .HasColumnOrder(7);

                    b.Property<int?>("ItemSubSectionId")
                        .HasColumnType("int")
                        .HasColumnOrder(9);

                    b.Property<byte>("ItemTypeId")
                        .HasColumnType("tinyint unsigned")
                        .HasColumnOrder(12);

                    b.Property<int?>("MainItemId")
                        .HasColumnType("int")
                        .HasColumnOrder(10);

                    b.Property<decimal>("MaxBuyQuantity")
                        .HasColumnType("decimal(30,15)")
                        .HasColumnOrder(23);

                    b.Property<decimal>("MaxDiscountPercent")
                        .HasColumnType("decimal(4,2)")
                        .HasColumnOrder(18);

                    b.Property<decimal>("MaxSellQuantity")
                        .HasColumnType("decimal(30,15)")
                        .HasColumnOrder(24);

                    b.Property<decimal>("MinBuyQuantity")
                        .HasColumnType("decimal(30,15)")
                        .HasColumnOrder(21);

                    b.Property<decimal>("MinSellQuantity")
                        .HasColumnType("decimal(30,15)")
                        .HasColumnOrder(22);

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnOrder(201);

                    b.Property<bool>("NoReplenishment")
                        .HasColumnType("tinyint(1)")
                        .HasColumnOrder(29);

                    b.Property<int?>("PurchaseAccountId")
                        .HasColumnType("int")
                        .HasColumnOrder(20);

                    b.Property<decimal>("PurchasingPrice")
                        .HasColumnType("decimal(30,15)")
                        .HasColumnOrder(15);

                    b.Property<decimal>("ReorderPointQuantity")
                        .HasColumnType("decimal(30,15)")
                        .HasColumnOrder(25);

                    b.Property<int?>("SalesAccountId")
                        .HasColumnType("int")
                        .HasColumnOrder(19);

                    b.Property<int>("SingularPackageId")
                        .HasColumnType("int")
                        .HasColumnOrder(14);

                    b.Property<byte>("TaxTypeId")
                        .HasColumnType("tinyint unsigned")
                        .HasColumnOrder(13);

                    b.Property<string>("UserNameCreated")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnOrder(202);

                    b.Property<string>("UserNameModified")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnOrder(203);

                    b.Property<int?>("VendorId")
                        .HasColumnType("int")
                        .HasColumnOrder(11);

                    b.HasKey("ItemId");

                    b.HasIndex("ArchiveHeaderId");

                    b.HasIndex("CompanyId");

                    b.HasIndex("ItemCategoryId");

                    b.HasIndex("ItemSectionId");

                    b.HasIndex("ItemSubCategoryId");

                    b.HasIndex("ItemSubSectionId");

                    b.HasIndex("ItemTypeId");

                    b.HasIndex("MainItemId");

                    b.HasIndex("PurchaseAccountId");

                    b.HasIndex("SalesAccountId");

                    b.HasIndex("SingularPackageId");

                    b.HasIndex("TaxTypeId");

                    b.HasIndex("VendorId");

                    b.ToTable("Items");
                });

            modelBuilder.Entity("Shared.CoreOne.Models.Domain.Items.ItemAttribute", b =>
                {
                    b.Property<int>("ItemAttributeId")
                        .HasColumnType("int")
                        .HasColumnOrder(1);

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnOrder(200);

                    b.Property<bool?>("Hide")
                        .HasColumnType("tinyint(1)")
                        .HasColumnOrder(206);

                    b.Property<string>("IpAddressCreated")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnOrder(204);

                    b.Property<string>("IpAddressModified")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnOrder(205);

                    b.Property<string>("ItemAttributeNameAr")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnOrder(4);

                    b.Property<string>("ItemAttributeNameEn")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnOrder(5);

                    b.Property<int>("ItemAttributeTypeId")
                        .HasColumnType("int")
                        .HasColumnOrder(2);

                    b.Property<int>("ItemId")
                        .HasColumnType("int")
                        .HasColumnOrder(3);

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnOrder(201);

                    b.Property<string>("UserNameCreated")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnOrder(202);

                    b.Property<string>("UserNameModified")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnOrder(203);

                    b.HasKey("ItemAttributeId");

                    b.HasIndex("ItemAttributeTypeId");

                    b.HasIndex("ItemId");

                    b.ToTable("ItemAttributes");
                });

            modelBuilder.Entity("Shared.CoreOne.Models.Domain.Items.ItemAttributeType", b =>
                {
                    b.Property<int>("ItemAttributeTypeId")
                        .HasColumnType("int")
                        .HasColumnOrder(1);

                    b.Property<int>("CompanyId")
                        .HasColumnType("int")
                        .HasColumnOrder(5);

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnOrder(200);

                    b.Property<bool?>("Hide")
                        .HasColumnType("tinyint(1)")
                        .HasColumnOrder(206);

                    b.Property<string>("IpAddressCreated")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnOrder(204);

                    b.Property<string>("IpAddressModified")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnOrder(205);

                    b.Property<int>("ItemAttributeTypeCode")
                        .HasColumnType("int")
                        .HasColumnOrder(2);

                    b.Property<string>("ItemAttributeTypeNameAr")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnOrder(3);

                    b.Property<string>("ItemAttributeTypeNameEn")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnOrder(4);

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnOrder(201);

                    b.Property<string>("UserNameCreated")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnOrder(202);

                    b.Property<string>("UserNameModified")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnOrder(203);

                    b.HasKey("ItemAttributeTypeId");

                    b.HasIndex("CompanyId");

                    b.ToTable("ItemAttributeTypes");
                });

            modelBuilder.Entity("Shared.CoreOne.Models.Domain.Items.ItemBarCode", b =>
                {
                    b.Property<int>("ItemBarCodeId")
                        .HasColumnType("int")
                        .HasColumnOrder(1);

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnOrder(200);

                    b.Property<int>("FromPackageId")
                        .HasColumnType("int")
                        .HasColumnOrder(2);

                    b.Property<bool?>("Hide")
                        .HasColumnType("tinyint(1)")
                        .HasColumnOrder(206);

                    b.Property<string>("IpAddressCreated")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnOrder(204);

                    b.Property<string>("IpAddressModified")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnOrder(205);

                    b.Property<bool>("IsSingularPackage")
                        .HasColumnType("tinyint(1)")
                        .HasColumnOrder(6);

                    b.Property<int>("ItemId")
                        .HasColumnType("int")
                        .HasColumnOrder(4);

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnOrder(201);

                    b.Property<decimal>("Packing")
                        .HasColumnType("decimal(30,15)")
                        .HasColumnOrder(5);

                    b.Property<int>("ToPackageId")
                        .HasColumnType("int")
                        .HasColumnOrder(3);

                    b.Property<string>("UserNameCreated")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnOrder(202);

                    b.Property<string>("UserNameModified")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnOrder(203);

                    b.HasKey("ItemBarCodeId");

                    b.HasIndex("FromPackageId");

                    b.HasIndex("ItemId");

                    b.HasIndex("ToPackageId");

                    b.ToTable("ItemBarCodes");
                });

            modelBuilder.Entity("Shared.CoreOne.Models.Domain.Items.ItemBarCodeDetail", b =>
                {
                    b.Property<int>("ItemBarCodeDetailId")
                        .HasColumnType("int")
                        .HasColumnOrder(1);

                    b.Property<string>("BarCode")
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)")
                        .HasColumnOrder(3);

                    b.Property<decimal>("ConsumerPrice")
                        .HasColumnType("decimal(30,15)")
                        .HasColumnOrder(4);

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnOrder(200);

                    b.Property<bool?>("Hide")
                        .HasColumnType("tinyint(1)")
                        .HasColumnOrder(206);

                    b.Property<string>("IpAddressCreated")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnOrder(204);

                    b.Property<string>("IpAddressModified")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnOrder(205);

                    b.Property<int>("ItemBarCodeId")
                        .HasColumnType("int")
                        .HasColumnOrder(2);

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnOrder(201);

                    b.Property<string>("UserNameCreated")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnOrder(202);

                    b.Property<string>("UserNameModified")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnOrder(203);

                    b.HasKey("ItemBarCodeDetailId");

                    b.HasIndex("ItemBarCodeId");

                    b.ToTable("ItemBarCodeDetails");
                });

            modelBuilder.Entity("Shared.CoreOne.Models.Domain.Items.ItemCategory", b =>
                {
                    b.Property<int>("ItemCategoryId")
                        .HasColumnType("int")
                        .HasColumnOrder(1);

                    b.Property<string>("CategoryNameAr")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnOrder(3);

                    b.Property<string>("CategoryNameEn")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnOrder(4);

                    b.Property<int>("CompanyId")
                        .HasColumnType("int")
                        .HasColumnOrder(5);

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnOrder(200);

                    b.Property<bool?>("Hide")
                        .HasColumnType("tinyint(1)")
                        .HasColumnOrder(206);

                    b.Property<string>("IpAddressCreated")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnOrder(204);

                    b.Property<string>("IpAddressModified")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnOrder(205);

                    b.Property<int>("ItemCategoryCode")
                        .HasColumnType("int")
                        .HasColumnOrder(2);

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnOrder(201);

                    b.Property<string>("UserNameCreated")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnOrder(202);

                    b.Property<string>("UserNameModified")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnOrder(203);

                    b.HasKey("ItemCategoryId");

                    b.HasIndex("CompanyId");

                    b.ToTable("ItemCategories");
                });

            modelBuilder.Entity("Shared.CoreOne.Models.Domain.Items.ItemCostCalculationType", b =>
                {
                    b.Property<byte>("ItemCostCalculationTypeId")
                        .HasColumnType("tinyint unsigned")
                        .HasColumnOrder(1);

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnOrder(200);

                    b.Property<bool?>("Hide")
                        .HasColumnType("tinyint(1)")
                        .HasColumnOrder(206);

                    b.Property<string>("IpAddressCreated")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnOrder(204);

                    b.Property<string>("IpAddressModified")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnOrder(205);

                    b.Property<string>("ItemCostCalculationTypeNameAr")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("ItemCostCalculationTypeNameEn")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnOrder(201);

                    b.Property<string>("UserNameCreated")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnOrder(202);

                    b.Property<string>("UserNameModified")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnOrder(203);

                    b.HasKey("ItemCostCalculationTypeId");

                    b.ToTable("ItemCostCalculationType");

                    b.HasData(
                        new
                        {
                            ItemCostCalculationTypeId = (byte)1,
                            ItemCostCalculationTypeNameAr = "المتوسط الفعلي",
                            ItemCostCalculationTypeNameEn = "Actual Average"
                        },
                        new
                        {
                            ItemCostCalculationTypeId = (byte)2,
                            ItemCostCalculationTypeNameAr = "السعر الإفتتاحي",
                            ItemCostCalculationTypeNameEn = "Opening Price"
                        },
                        new
                        {
                            ItemCostCalculationTypeId = (byte)3,
                            ItemCostCalculationTypeNameAr = "آخر سعر شراء",
                            ItemCostCalculationTypeNameEn = "last Purchase Price"
                        },
                        new
                        {
                            ItemCostCalculationTypeId = (byte)4,
                            ItemCostCalculationTypeNameAr = "آخر تكلفة شراء",
                            ItemCostCalculationTypeNameEn = "Last Cost Price"
                        });
                });

            modelBuilder.Entity("Shared.CoreOne.Models.Domain.Items.ItemPackage", b =>
                {
                    b.Property<int>("ItemPackageId")
                        .HasColumnType("int")
                        .HasColumnOrder(1);

                    b.Property<int?>("CompanyId")
                        .HasColumnType("int")
                        .HasColumnOrder(2);

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnOrder(200);

                    b.Property<bool?>("Hide")
                        .HasColumnType("tinyint(1)")
                        .HasColumnOrder(206);

                    b.Property<string>("IpAddressCreated")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnOrder(204);

                    b.Property<string>("IpAddressModified")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnOrder(205);

                    b.Property<int>("ItemPackageCode")
                        .HasColumnType("int")
                        .HasColumnOrder(3);

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnOrder(201);

                    b.Property<string>("PackageCode")
                        .HasMaxLength(10)
                        .HasColumnType("varchar(10)")
                        .HasColumnOrder(6);

                    b.Property<string>("PackageNameAr")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnOrder(4);

                    b.Property<string>("PackageNameEn")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnOrder(5);

                    b.Property<string>("UserNameCreated")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnOrder(202);

                    b.Property<string>("UserNameModified")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnOrder(203);

                    b.HasKey("ItemPackageId");

                    b.HasIndex("CompanyId");

                    b.ToTable("ItemPackages");

                    b.HasData(
                        new
                        {
                            ItemPackageId = 1,
                            ItemPackageCode = 1,
                            PackageNameAr = "حبة",
                            PackageNameEn = "each"
                        });
                });

            modelBuilder.Entity("Shared.CoreOne.Models.Domain.Items.ItemPacking", b =>
                {
                    b.Property<int>("ItemPackingId")
                        .HasColumnType("int")
                        .HasColumnOrder(1);

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnOrder(200);

                    b.Property<int>("FromPackageId")
                        .HasColumnType("int")
                        .HasColumnOrder(3);

                    b.Property<bool?>("Hide")
                        .HasColumnType("tinyint(1)")
                        .HasColumnOrder(206);

                    b.Property<string>("IpAddressCreated")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnOrder(204);

                    b.Property<string>("IpAddressModified")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnOrder(205);

                    b.Property<int>("ItemId")
                        .HasColumnType("int")
                        .HasColumnOrder(2);

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnOrder(201);

                    b.Property<decimal>("Packing")
                        .HasColumnType("decimal(30,15)")
                        .HasColumnOrder(5);

                    b.Property<int>("ToPackageId")
                        .HasColumnType("int")
                        .HasColumnOrder(4);

                    b.Property<string>("UserNameCreated")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnOrder(202);

                    b.Property<string>("UserNameModified")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnOrder(203);

                    b.HasKey("ItemPackingId");

                    b.HasIndex("FromPackageId");

                    b.HasIndex("ItemId");

                    b.HasIndex("ToPackageId");

                    b.ToTable("ItemPacking");
                });

            modelBuilder.Entity("Shared.CoreOne.Models.Domain.Items.ItemSection", b =>
                {
                    b.Property<int>("ItemSectionId")
                        .HasColumnType("int")
                        .HasColumnOrder(1);

                    b.Property<int>("CompanyId")
                        .HasColumnType("int")
                        .HasColumnOrder(6);

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnOrder(200);

                    b.Property<bool?>("Hide")
                        .HasColumnType("tinyint(1)")
                        .HasColumnOrder(206);

                    b.Property<string>("IpAddressCreated")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnOrder(204);

                    b.Property<string>("IpAddressModified")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnOrder(205);

                    b.Property<int>("ItemSectionCode")
                        .HasColumnType("int")
                        .HasColumnOrder(2);

                    b.Property<int>("ItemSubCategoryId")
                        .HasColumnType("int")
                        .HasColumnOrder(3);

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnOrder(201);

                    b.Property<string>("SectionNameAr")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnOrder(4);

                    b.Property<string>("SectionNameEn")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnOrder(5);

                    b.Property<string>("UserNameCreated")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnOrder(202);

                    b.Property<string>("UserNameModified")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnOrder(203);

                    b.HasKey("ItemSectionId");

                    b.HasIndex("CompanyId");

                    b.HasIndex("ItemSubCategoryId");

                    b.ToTable("ItemSections");
                });

            modelBuilder.Entity("Shared.CoreOne.Models.Domain.Items.ItemSubCategory", b =>
                {
                    b.Property<int>("ItemSubCategoryId")
                        .HasColumnType("int")
                        .HasColumnOrder(1);

                    b.Property<int>("CompanyId")
                        .HasColumnType("int")
                        .HasColumnOrder(6);

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnOrder(200);

                    b.Property<bool?>("Hide")
                        .HasColumnType("tinyint(1)")
                        .HasColumnOrder(206);

                    b.Property<string>("IpAddressCreated")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnOrder(204);

                    b.Property<string>("IpAddressModified")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnOrder(205);

                    b.Property<int>("ItemCategoryId")
                        .HasColumnType("int")
                        .HasColumnOrder(3);

                    b.Property<int>("ItemSubCategoryCode")
                        .HasColumnType("int")
                        .HasColumnOrder(2);

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnOrder(201);

                    b.Property<string>("SubCategoryNameAr")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnOrder(4);

                    b.Property<string>("SubCategoryNameEn")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnOrder(5);

                    b.Property<string>("UserNameCreated")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnOrder(202);

                    b.Property<string>("UserNameModified")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnOrder(203);

                    b.HasKey("ItemSubCategoryId");

                    b.HasIndex("CompanyId");

                    b.HasIndex("ItemCategoryId");

                    b.ToTable("ItemSubCategories");
                });

            modelBuilder.Entity("Shared.CoreOne.Models.Domain.Items.ItemSubSection", b =>
                {
                    b.Property<int>("ItemSubSectionId")
                        .HasColumnType("int")
                        .HasColumnOrder(1);

                    b.Property<int>("CompanyId")
                        .HasColumnType("int")
                        .HasColumnOrder(6);

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnOrder(200);

                    b.Property<bool?>("Hide")
                        .HasColumnType("tinyint(1)")
                        .HasColumnOrder(206);

                    b.Property<string>("IpAddressCreated")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnOrder(204);

                    b.Property<string>("IpAddressModified")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnOrder(205);

                    b.Property<int>("ItemSectionId")
                        .HasColumnType("int")
                        .HasColumnOrder(3);

                    b.Property<int>("ItemSubSectionCode")
                        .HasColumnType("int")
                        .HasColumnOrder(2);

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnOrder(201);

                    b.Property<string>("SubSectionNameAr")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnOrder(4);

                    b.Property<string>("SubSectionNameEn")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnOrder(5);

                    b.Property<string>("UserNameCreated")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnOrder(202);

                    b.Property<string>("UserNameModified")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnOrder(203);

                    b.HasKey("ItemSubSectionId");

                    b.HasIndex("CompanyId");

                    b.HasIndex("ItemSectionId");

                    b.ToTable("ItemSubSections");
                });

            modelBuilder.Entity("Shared.CoreOne.Models.Domain.Items.ItemTax", b =>
                {
                    b.Property<int>("ItemTaxId")
                        .HasColumnType("int")
                        .HasColumnOrder(1);

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnOrder(200);

                    b.Property<bool?>("Hide")
                        .HasColumnType("tinyint(1)")
                        .HasColumnOrder(206);

                    b.Property<string>("IpAddressCreated")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnOrder(204);

                    b.Property<string>("IpAddressModified")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnOrder(205);

                    b.Property<int>("ItemId")
                        .HasColumnType("int")
                        .HasColumnOrder(2);

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnOrder(201);

                    b.Property<int>("TaxId")
                        .HasColumnType("int")
                        .HasColumnOrder(3);

                    b.Property<string>("UserNameCreated")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnOrder(202);

                    b.Property<string>("UserNameModified")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnOrder(203);

                    b.HasKey("ItemTaxId");

                    b.HasIndex("ItemId");

                    b.HasIndex("TaxId");

                    b.ToTable("ItemTaxes");
                });

            modelBuilder.Entity("Shared.CoreOne.Models.Domain.Items.ItemType", b =>
                {
                    b.Property<byte>("ItemTypeId")
                        .HasColumnType("tinyint unsigned")
                        .HasColumnOrder(1);

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnOrder(200);

                    b.Property<bool?>("Hide")
                        .HasColumnType("tinyint(1)")
                        .HasColumnOrder(206);

                    b.Property<string>("IpAddressCreated")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnOrder(204);

                    b.Property<string>("IpAddressModified")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnOrder(205);

                    b.Property<string>("ItemTypeNameAr")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnOrder(2);

                    b.Property<string>("ItemTypeNameEn")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnOrder(3);

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnOrder(201);

                    b.Property<string>("UserNameCreated")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnOrder(202);

                    b.Property<string>("UserNameModified")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnOrder(203);

                    b.HasKey("ItemTypeId");

                    b.ToTable("ItemTypes");

                    b.HasData(
                        new
                        {
                            ItemTypeId = (byte)1,
                            ItemTypeNameAr = "بضاعة",
                            ItemTypeNameEn = "Goods"
                        },
                        new
                        {
                            ItemTypeId = (byte)2,
                            ItemTypeNameAr = "مجمع",
                            ItemTypeNameEn = "Combined"
                        },
                        new
                        {
                            ItemTypeId = (byte)3,
                            ItemTypeNameAr = "مصنع",
                            ItemTypeNameEn = "Manufactured"
                        },
                        new
                        {
                            ItemTypeId = (byte)4,
                            ItemTypeNameAr = "مركب",
                            ItemTypeNameEn = "Assembled"
                        },
                        new
                        {
                            ItemTypeId = (byte)5,
                            ItemTypeNameAr = "خدمة",
                            ItemTypeNameEn = "Service"
                        },
                        new
                        {
                            ItemTypeId = (byte)6,
                            ItemTypeNameAr = "ملاحظة",
                            ItemTypeNameEn = "Note"
                        });
                });

            modelBuilder.Entity("Shared.CoreOne.Models.Domain.Items.MainItem", b =>
                {
                    b.Property<int>("MainItemId")
                        .HasColumnType("int")
                        .HasColumnOrder(1);

                    b.Property<int>("CompanyId")
                        .HasColumnType("int")
                        .HasColumnOrder(6);

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnOrder(200);

                    b.Property<bool?>("Hide")
                        .HasColumnType("tinyint(1)")
                        .HasColumnOrder(206);

                    b.Property<string>("IpAddressCreated")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnOrder(204);

                    b.Property<string>("IpAddressModified")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnOrder(205);

                    b.Property<int>("ItemSubSectionId")
                        .HasColumnType("int")
                        .HasColumnOrder(3);

                    b.Property<int>("MainItemCode")
                        .HasColumnType("int")
                        .HasColumnOrder(2);

                    b.Property<string>("MainItemNameAr")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnOrder(4);

                    b.Property<string>("MainItemNameEn")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnOrder(5);

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnOrder(201);

                    b.Property<string>("UserNameCreated")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnOrder(202);

                    b.Property<string>("UserNameModified")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnOrder(203);

                    b.HasKey("MainItemId");

                    b.HasIndex("CompanyId");

                    b.HasIndex("ItemSubSectionId");

                    b.ToTable("MainItems");
                });

            modelBuilder.Entity("Shared.CoreOne.Models.Domain.Journal.CostCenterJournalDetail", b =>
                {
                    b.Property<int>("CostCenterJournalDetailId")
                        .HasColumnType("int")
                        .HasColumnOrder(1);

                    b.Property<int>("CostCenterId")
                        .HasColumnType("int")
                        .HasColumnOrder(4);

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnOrder(200);

                    b.Property<decimal>("CreditValue")
                        .HasColumnType("decimal(30,15)")
                        .HasColumnOrder(10);

                    b.Property<decimal>("DebitValue")
                        .HasColumnType("decimal(30,15)")
                        .HasColumnOrder(9);

                    b.Property<bool?>("Hide")
                        .HasColumnType("tinyint(1)")
                        .HasColumnOrder(206);

                    b.Property<string>("IpAddressCreated")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnOrder(204);

                    b.Property<string>("IpAddressModified")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnOrder(205);

                    b.Property<bool?>("IsCostCenterDistributed")
                        .HasColumnType("tinyint(1)")
                        .HasColumnOrder(11);

                    b.Property<int?>("ItemId")
                        .HasColumnType("int")
                        .HasColumnOrder(3);

                    b.Property<int?>("JournalDetailId")
                        .HasColumnType("int")
                        .HasColumnOrder(2);

                    b.Property<short?>("MenuCode")
                        .HasColumnType("smallint")
                        .HasColumnOrder(5);

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnOrder(201);

                    b.Property<int?>("ReferenceDetailId")
                        .HasColumnType("int")
                        .HasColumnOrder(7);

                    b.Property<int?>("ReferenceHeaderId")
                        .HasColumnType("int")
                        .HasColumnOrder(6);

                    b.Property<string>("RemarksAr")
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)")
                        .HasColumnOrder(12);

                    b.Property<string>("RemarksEn")
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)")
                        .HasColumnOrder(13);

                    b.Property<int>("Serial")
                        .HasColumnType("int")
                        .HasColumnOrder(8);

                    b.Property<string>("UserNameCreated")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnOrder(202);

                    b.Property<string>("UserNameModified")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnOrder(203);

                    b.HasKey("CostCenterJournalDetailId");

                    b.HasIndex("CostCenterId");

                    b.HasIndex("ItemId");

                    b.HasIndex("JournalDetailId");

                    b.HasIndex("MenuCode");

                    b.ToTable("CostCenterJournalDetails");
                });

            modelBuilder.Entity("Shared.CoreOne.Models.Domain.Journal.JournalDetail", b =>
                {
                    b.Property<int>("JournalDetailId")
                        .HasColumnType("int")
                        .HasColumnOrder(1);

                    b.Property<int>("AccountId")
                        .HasColumnType("int")
                        .HasColumnOrder(4);

                    b.Property<string>("AutomaticRemarks")
                        .HasMaxLength(2000)
                        .HasColumnType("varchar(2000)")
                        .HasColumnOrder(18);

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnOrder(200);

                    b.Property<decimal>("CreditValue")
                        .HasColumnType("decimal(30,15)")
                        .HasColumnOrder(9);

                    b.Property<decimal>("CreditValueAccount")
                        .HasColumnType("decimal(30,15)")
                        .HasColumnOrder(10);

                    b.Property<short>("CurrencyId")
                        .HasColumnType("smallint")
                        .HasColumnOrder(5);

                    b.Property<decimal>("CurrencyRate")
                        .HasColumnType("decimal(30,15)")
                        .HasColumnOrder(6);

                    b.Property<decimal>("DebitValue")
                        .HasColumnType("decimal(30,15)")
                        .HasColumnOrder(7);

                    b.Property<decimal>("DebitValueAccount")
                        .HasColumnType("decimal(30,15)")
                        .HasColumnOrder(8);

                    b.Property<string>("EntityEmail")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnOrder(24);

                    b.Property<int?>("EntityId")
                        .HasColumnType("int")
                        .HasColumnOrder(20);

                    b.Property<string>("EntityNameAr")
                        .HasMaxLength(300)
                        .HasColumnType("varchar(300)")
                        .HasColumnOrder(21);

                    b.Property<string>("EntityNameEn")
                        .HasMaxLength(300)
                        .HasColumnType("varchar(300)")
                        .HasColumnOrder(22);

                    b.Property<byte?>("EntityTypeId")
                        .HasColumnType("tinyint unsigned")
                        .HasColumnOrder(19);

                    b.Property<bool?>("Hide")
                        .HasColumnType("tinyint(1)")
                        .HasColumnOrder(206);

                    b.Property<string>("IpAddressCreated")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnOrder(204);

                    b.Property<string>("IpAddressModified")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnOrder(205);

                    b.Property<bool?>("IsCostCenterDistributed")
                        .HasColumnType("tinyint(1)")
                        .HasColumnOrder(28);

                    b.Property<bool>("IsCostRelated")
                        .HasColumnType("tinyint(1)")
                        .HasColumnOrder(30);

                    b.Property<bool?>("IsLinkedToCostCenters")
                        .HasColumnType("tinyint(1)")
                        .HasColumnOrder(27);

                    b.Property<bool>("IsSystematic")
                        .HasColumnType("tinyint(1)")
                        .HasColumnOrder(29);

                    b.Property<bool>("IsTax")
                        .HasColumnType("tinyint(1)")
                        .HasColumnOrder(11);

                    b.Property<int>("JournalHeaderId")
                        .HasColumnType("int")
                        .HasColumnOrder(2);

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnOrder(201);

                    b.Property<string>("RemarksAr")
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)")
                        .HasColumnOrder(16);

                    b.Property<string>("RemarksEn")
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)")
                        .HasColumnOrder(17);

                    b.Property<int>("Serial")
                        .HasColumnType("int")
                        .HasColumnOrder(3);

                    b.Property<string>("TaxCode")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnOrder(23);

                    b.Property<DateTime?>("TaxDate")
                        .HasColumnType("Date")
                        .HasColumnOrder(26);

                    b.Property<int?>("TaxId")
                        .HasColumnType("int")
                        .HasColumnOrder(13);

                    b.Property<int?>("TaxParentId")
                        .HasColumnType("int")
                        .HasColumnOrder(14);

                    b.Property<decimal>("TaxPercent")
                        .HasColumnType("decimal(30,15)")
                        .HasColumnOrder(15);

                    b.Property<string>("TaxReference")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnOrder(25);

                    b.Property<byte?>("TaxTypeId")
                        .HasColumnType("tinyint unsigned")
                        .HasColumnOrder(12);

                    b.Property<string>("UserNameCreated")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnOrder(202);

                    b.Property<string>("UserNameModified")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnOrder(203);

                    b.HasKey("JournalDetailId");

                    b.HasIndex("AccountId");

                    b.HasIndex("CurrencyId");

                    b.HasIndex("EntityTypeId");

                    b.HasIndex("JournalHeaderId");

                    b.HasIndex("TaxId");

                    b.HasIndex("TaxTypeId");

                    b.ToTable("JournalDetails");
                });

            modelBuilder.Entity("Shared.CoreOne.Models.Domain.Journal.JournalHeader", b =>
                {
                    b.Property<int>("JournalHeaderId")
                        .HasColumnType("int")
                        .HasColumnOrder(1);

                    b.Property<int?>("ArchiveHeaderId")
                        .HasColumnType("int")
                        .HasColumnOrder(24);

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnOrder(200);

                    b.Property<string>("DocumentReference")
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)")
                        .HasColumnOrder(9);

                    b.Property<DateTime>("EntryDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnOrder(10);

                    b.Property<bool?>("Hide")
                        .HasColumnType("tinyint(1)")
                        .HasColumnOrder(206);

                    b.Property<string>("IpAddressCreated")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnOrder(204);

                    b.Property<string>("IpAddressModified")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnOrder(205);

                    b.Property<bool>("IsCancelled")
                        .HasColumnType("tinyint(1)")
                        .HasColumnOrder(20);

                    b.Property<bool>("IsClosed")
                        .HasColumnType("tinyint(1)")
                        .HasColumnOrder(19);

                    b.Property<bool>("IsSystematic")
                        .HasColumnType("tinyint(1)")
                        .HasColumnOrder(21);

                    b.Property<int>("JournalCode")
                        .HasColumnType("int")
                        .HasColumnOrder(7);

                    b.Property<int>("JournalId")
                        .HasColumnType("int")
                        .HasColumnOrder(2);

                    b.Property<byte>("JournalTypeId")
                        .HasColumnType("tinyint unsigned")
                        .HasColumnOrder(3);

                    b.Property<short?>("MenuCode")
                        .HasColumnType("smallint")
                        .HasColumnOrder(22);

                    b.Property<int?>("MenuReferenceId")
                        .HasColumnType("int")
                        .HasColumnOrder(23);

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnOrder(201);

                    b.Property<string>("PeerReference")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnOrder(12);

                    b.Property<string>("Prefix")
                        .HasMaxLength(10)
                        .HasColumnType("varchar(10)")
                        .HasColumnOrder(6);

                    b.Property<string>("RemarksAr")
                        .HasMaxLength(2000)
                        .HasColumnType("varchar(2000)")
                        .HasColumnOrder(17);

                    b.Property<string>("RemarksEn")
                        .HasMaxLength(2000)
                        .HasColumnType("varchar(2000)")
                        .HasColumnOrder(18);

                    b.Property<int>("StoreId")
                        .HasColumnType("int")
                        .HasColumnOrder(5);

                    b.Property<string>("Suffix")
                        .HasMaxLength(10)
                        .HasColumnType("varchar(10)")
                        .HasColumnOrder(8);

                    b.Property<DateTime>("TicketDate")
                        .HasColumnType("Date")
                        .HasColumnOrder(11);

                    b.Property<int>("TicketId")
                        .HasColumnType("int")
                        .HasColumnOrder(4);

                    b.Property<decimal>("TotalCreditValue")
                        .HasColumnType("decimal(30,15)")
                        .HasColumnOrder(15);

                    b.Property<decimal>("TotalCreditValueAccount")
                        .HasColumnType("decimal(30,15)")
                        .HasColumnOrder(16);

                    b.Property<decimal>("TotalDebitValue")
                        .HasColumnType("decimal(30,15)")
                        .HasColumnOrder(13);

                    b.Property<decimal>("TotalDebitValueAccount")
                        .HasColumnType("decimal(30,15)")
                        .HasColumnOrder(14);

                    b.Property<string>("UserNameCreated")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnOrder(202);

                    b.Property<string>("UserNameModified")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnOrder(203);

                    b.HasKey("JournalHeaderId");

                    b.HasIndex("ArchiveHeaderId");

                    b.HasIndex("JournalTypeId");

                    b.HasIndex("MenuCode");

                    b.HasIndex("StoreId");

                    b.ToTable("JournalHeaders");
                });

            modelBuilder.Entity("Shared.CoreOne.Models.Domain.Journal.JournalType", b =>
                {
                    b.Property<byte>("JournalTypeId")
                        .HasColumnType("tinyint unsigned")
                        .HasColumnOrder(1);

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnOrder(200);

                    b.Property<bool?>("Hide")
                        .HasColumnType("tinyint(1)")
                        .HasColumnOrder(206);

                    b.Property<string>("IpAddressCreated")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnOrder(204);

                    b.Property<string>("IpAddressModified")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnOrder(205);

                    b.Property<string>("JournalTypeNameAr")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnOrder(2);

                    b.Property<string>("JournalTypeNameEn")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnOrder(3);

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnOrder(201);

                    b.Property<string>("UserNameCreated")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnOrder(202);

                    b.Property<string>("UserNameModified")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnOrder(203);

                    b.HasKey("JournalTypeId");

                    b.ToTable("JournalTypes");

                    b.HasData(
                        new
                        {
                            JournalTypeId = (byte)1,
                            JournalTypeNameAr = "رصيد افتتاحي",
                            JournalTypeNameEn = "Opening Balance"
                        },
                        new
                        {
                            JournalTypeId = (byte)2,
                            JournalTypeNameAr = "فاتورة بيع نقداً",
                            JournalTypeNameEn = "Cash Sales Invoice"
                        },
                        new
                        {
                            JournalTypeId = (byte)3,
                            JournalTypeNameAr = "فاتورة بيع آجل",
                            JournalTypeNameEn = "Credit Sales Invoice"
                        },
                        new
                        {
                            JournalTypeId = (byte)4,
                            JournalTypeNameAr = "فاتورة مرتجع بيع نقداً",
                            JournalTypeNameEn = "Cash Invoice Return"
                        },
                        new
                        {
                            JournalTypeId = (byte)5,
                            JournalTypeNameAr = "فاتورة مرتجع بيع آجل",
                            JournalTypeNameEn = "Credit Sales Invoice Return"
                        },
                        new
                        {
                            JournalTypeId = (byte)6,
                            JournalTypeNameAr = "فاتورة شراء نقداً",
                            JournalTypeNameEn = "Cash Purchase Invoice"
                        },
                        new
                        {
                            JournalTypeId = (byte)7,
                            JournalTypeNameAr = "فاتورة شراء آجل",
                            JournalTypeNameEn = "Credit Purchase Invoice"
                        },
                        new
                        {
                            JournalTypeId = (byte)8,
                            JournalTypeNameAr = "فاتورة مرتجع شراء نقداً",
                            JournalTypeNameEn = "Cash Purchase Invoice Return"
                        },
                        new
                        {
                            JournalTypeId = (byte)9,
                            JournalTypeNameAr = "فاتورة مرتجع شراء آجل",
                            JournalTypeNameEn = "Credit Purchase Invoice Return"
                        },
                        new
                        {
                            JournalTypeId = (byte)10,
                            JournalTypeNameAr = "سند صرف شيكات",
                            JournalTypeNameEn = "Check Cashing Voucher"
                        },
                        new
                        {
                            JournalTypeId = (byte)11,
                            JournalTypeNameAr = "قيد يومية",
                            JournalTypeNameEn = "Journal Entry"
                        },
                        new
                        {
                            JournalTypeId = (byte)12,
                            JournalTypeNameAr = "سند قبض",
                            JournalTypeNameEn = "Receipt Voucher"
                        },
                        new
                        {
                            JournalTypeId = (byte)13,
                            JournalTypeNameAr = "سند قبض إيجار",
                            JournalTypeNameEn = "Rent Receipt Voucher"
                        },
                        new
                        {
                            JournalTypeId = (byte)14,
                            JournalTypeNameAr = "سند صرف",
                            JournalTypeNameEn = "Cashing Voucher"
                        },
                        new
                        {
                            JournalTypeId = (byte)15,
                            JournalTypeNameAr = "فاتورة صرف",
                            JournalTypeNameEn = "Cashing Invoice"
                        },
                        new
                        {
                            JournalTypeId = (byte)16,
                            JournalTypeNameAr = "فاتورة استلام",
                            JournalTypeNameEn = "Receipt Invoice"
                        },
                        new
                        {
                            JournalTypeId = (byte)17,
                            JournalTypeNameAr = "قيد ايجار",
                            JournalTypeNameEn = "Rent Entry"
                        },
                        new
                        {
                            JournalTypeId = (byte)18,
                            JournalTypeNameAr = "إشعار مدين المورد",
                            JournalTypeNameEn = "Supplier Debit Notice"
                        },
                        new
                        {
                            JournalTypeId = (byte)19,
                            JournalTypeNameAr = "إشعار دائن المورد",
                            JournalTypeNameEn = "Supplier Credit Notice"
                        },
                        new
                        {
                            JournalTypeId = (byte)20,
                            JournalTypeNameAr = "إشعار مدين للعميل",
                            JournalTypeNameEn = "Client Debit Notice"
                        },
                        new
                        {
                            JournalTypeId = (byte)21,
                            JournalTypeNameAr = "إشعار دائن للعميل",
                            JournalTypeNameEn = "Client Credit Notice"
                        },
                        new
                        {
                            JournalTypeId = (byte)22,
                            JournalTypeNameAr = "أصل ثابت",
                            JournalTypeNameEn = "Fixed Asset"
                        },
                        new
                        {
                            JournalTypeId = (byte)23,
                            JournalTypeNameAr = "فاتورة مشتريات بضاعة بالطريق نقداً",
                            JournalTypeNameEn = "Purchase Invoice On The Way Cash"
                        },
                        new
                        {
                            JournalTypeId = (byte)24,
                            JournalTypeNameAr = "فاتورة مشتريات بضاعة بالطريق آجل",
                            JournalTypeNameEn = "Purchase Invoice On The Way Credit"
                        },
                        new
                        {
                            JournalTypeId = (byte)25,
                            JournalTypeNameAr = "فاتورة مشتريات مرحلية",
                            JournalTypeNameEn = "Purchase Invoice Interim"
                        },
                        new
                        {
                            JournalTypeId = (byte)26,
                            JournalTypeNameAr = "فاتورة بيع حجز نقدي",
                            JournalTypeNameEn = "Cash Reservation Sales Invoice"
                        },
                        new
                        {
                            JournalTypeId = (byte)27,
                            JournalTypeNameAr = "فاتورة بيع حجز آجل",
                            JournalTypeNameEn = "Credit Reservation Sales Invoice"
                        },
                        new
                        {
                            JournalTypeId = (byte)28,
                            JournalTypeNameAr = "فاتورة بيع مرحلية",
                            JournalTypeNameEn = "Sales Invoice Interim"
                        },
                        new
                        {
                            JournalTypeId = (byte)29,
                            JournalTypeNameAr = "فاتورة مرتجع شراء بضاعة بالطريق",
                            JournalTypeNameEn = "Purchase Invoice Return On The Way"
                        },
                        new
                        {
                            JournalTypeId = (byte)30,
                            JournalTypeNameAr = "فاتورة مرتجع ما بعد الشراء",
                            JournalTypeNameEn = "Purchase Invoice Return"
                        },
                        new
                        {
                            JournalTypeId = (byte)31,
                            JournalTypeNameAr = "فاتورة مرتجع بيع لتصفية الحجز",
                            JournalTypeNameEn = "Reservation Sales Invoice Close Out"
                        },
                        new
                        {
                            JournalTypeId = (byte)32,
                            JournalTypeNameAr = "فاتورة مرتجع ما بعد البيع",
                            JournalTypeNameEn = "Sales Invoice Return"
                        },
                        new
                        {
                            JournalTypeId = (byte)33,
                            JournalTypeNameAr = "اهلاك اصل ثابت",
                            JournalTypeNameEn = "Fixed Asset Depreciation"
                        },
                        new
                        {
                            JournalTypeId = (byte)34,
                            JournalTypeNameAr = "استبعاد اصل ثابت",
                            JournalTypeNameEn = "Fixed Asset Exclusion"
                        });
                });

            modelBuilder.Entity("Shared.CoreOne.Models.Domain.Journal.TransactionType", b =>
                {
                    b.Property<byte>("TransactionTypeId")
                        .HasColumnType("tinyint unsigned")
                        .HasColumnOrder(1);

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnOrder(200);

                    b.Property<bool?>("Hide")
                        .HasColumnType("tinyint(1)")
                        .HasColumnOrder(206);

                    b.Property<string>("IpAddressCreated")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnOrder(204);

                    b.Property<string>("IpAddressModified")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnOrder(205);

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnOrder(201);

                    b.Property<string>("TransactionTypeNameAr")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("varchar(10)")
                        .HasColumnOrder(2);

                    b.Property<string>("TransactionTypeNameEn")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("varchar(10)")
                        .HasColumnOrder(3);

                    b.Property<string>("UserNameCreated")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnOrder(202);

                    b.Property<string>("UserNameModified")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnOrder(203);

                    b.HasKey("TransactionTypeId");

                    b.ToTable("TransactionTypes");

                    b.HasData(
                        new
                        {
                            TransactionTypeId = (byte)1,
                            TransactionTypeNameAr = "مدين",
                            TransactionTypeNameEn = "Debit"
                        },
                        new
                        {
                            TransactionTypeId = (byte)2,
                            TransactionTypeNameAr = "دائن",
                            TransactionTypeNameEn = "Credit"
                        });
                });

            modelBuilder.Entity("Shared.CoreOne.Models.Domain.Menus.Menu", b =>
                {
                    b.Property<short>("MenuCode")
                        .HasColumnType("smallint")
                        .HasColumnOrder(1);

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnOrder(200);

                    b.Property<bool>("HasApprove")
                        .HasColumnType("tinyint(1)")
                        .HasColumnOrder(5);

                    b.Property<bool>("HasEncoding")
                        .HasColumnType("tinyint(1)")
                        .HasColumnOrder(7);

                    b.Property<bool>("HasNotes")
                        .HasColumnType("tinyint(1)")
                        .HasColumnOrder(6);

                    b.Property<bool?>("Hide")
                        .HasColumnType("tinyint(1)")
                        .HasColumnOrder(206);

                    b.Property<string>("IpAddressCreated")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnOrder(204);

                    b.Property<string>("IpAddressModified")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnOrder(205);

                    b.Property<bool>("IsFavorite")
                        .HasColumnType("tinyint(1)")
                        .HasColumnOrder(8);

                    b.Property<bool>("IsReport")
                        .HasColumnType("tinyint(1)")
                        .HasColumnOrder(9);

                    b.Property<string>("MenuNameAr")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnOrder(2);

                    b.Property<string>("MenuNameEn")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnOrder(3);

                    b.Property<string>("MenuUrl")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnOrder(4);

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnOrder(201);

                    b.Property<string>("UserNameCreated")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnOrder(202);

                    b.Property<string>("UserNameModified")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnOrder(203);

                    b.HasKey("MenuCode");

                    b.ToTable("Menus");

                    b.HasData(
                        new
                        {
                            MenuCode = (short)1,
                            HasApprove = false,
                            HasEncoding = false,
                            HasNotes = false,
                            IsFavorite = false,
                            IsReport = false,
                            MenuNameAr = "الطلبات",
                            MenuNameEn = "Requests",
                            MenuUrl = "/request"
                        },
                        new
                        {
                            MenuCode = (short)2,
                            HasApprove = false,
                            HasEncoding = false,
                            HasNotes = false,
                            IsFavorite = false,
                            IsReport = false,
                            MenuNameAr = "تعريف الموافقات ومراحلها",
                            MenuNameEn = "Approvals Steps",
                            MenuUrl = "/approve"
                        },
                        new
                        {
                            MenuCode = (short)3,
                            HasApprove = false,
                            HasEncoding = false,
                            HasNotes = false,
                            IsFavorite = false,
                            IsReport = false,
                            MenuNameAr = "الموافقة علي المستندات",
                            MenuNameEn = "Documents Approvals",
                            MenuUrl = "/approverequest"
                        },
                        new
                        {
                            MenuCode = (short)4,
                            HasApprove = false,
                            HasEncoding = false,
                            HasNotes = false,
                            IsFavorite = false,
                            IsReport = false,
                            MenuNameAr = "استيراد البيانات الأساسية",
                            MenuNameEn = "Import Basic Data",
                            MenuUrl = "/task/importfiles"
                        },
                        new
                        {
                            MenuCode = (short)5,
                            HasApprove = false,
                            HasEncoding = false,
                            HasNotes = false,
                            IsFavorite = false,
                            IsReport = false,
                            MenuNameAr = "ترميز أكواد المستندات",
                            MenuNameEn = "Menu Encoding",
                            MenuUrl = "/menuencoding"
                        },
                        new
                        {
                            MenuCode = (short)6,
                            HasApprove = false,
                            HasEncoding = false,
                            HasNotes = false,
                            IsFavorite = false,
                            IsReport = false,
                            MenuNameAr = "إعدادات البرنامج",
                            MenuNameEn = "Application Settings",
                            MenuUrl = "/setting"
                        },
                        new
                        {
                            MenuCode = (short)7,
                            HasApprove = false,
                            HasEncoding = false,
                            HasNotes = false,
                            IsFavorite = false,
                            IsReport = false,
                            MenuNameAr = "الدول",
                            MenuNameEn = "Countries",
                            MenuUrl = "/country"
                        },
                        new
                        {
                            MenuCode = (short)8,
                            HasApprove = false,
                            HasEncoding = false,
                            HasNotes = false,
                            IsFavorite = false,
                            IsReport = false,
                            MenuNameAr = "المناطق الإدارية",
                            MenuNameEn = "States",
                            MenuUrl = "/state"
                        },
                        new
                        {
                            MenuCode = (short)9,
                            HasApprove = false,
                            HasEncoding = false,
                            HasNotes = false,
                            IsFavorite = false,
                            IsReport = false,
                            MenuNameAr = "المدن",
                            MenuNameEn = "Cities",
                            MenuUrl = "/city"
                        },
                        new
                        {
                            MenuCode = (short)10,
                            HasApprove = false,
                            HasEncoding = false,
                            HasNotes = false,
                            IsFavorite = false,
                            IsReport = false,
                            MenuNameAr = "الأحياء",
                            MenuNameEn = "Districts",
                            MenuUrl = "/district"
                        },
                        new
                        {
                            MenuCode = (short)11,
                            HasApprove = false,
                            HasEncoding = false,
                            HasNotes = false,
                            IsFavorite = false,
                            IsReport = false,
                            MenuNameAr = "الأنشطة",
                            MenuNameEn = "Business",
                            MenuUrl = "/company"
                        },
                        new
                        {
                            MenuCode = (short)12,
                            HasApprove = false,
                            HasEncoding = false,
                            HasNotes = false,
                            IsFavorite = false,
                            IsReport = false,
                            MenuNameAr = "الفروع",
                            MenuNameEn = "Branches",
                            MenuUrl = "/branch"
                        },
                        new
                        {
                            MenuCode = (short)13,
                            HasApprove = false,
                            HasEncoding = false,
                            HasNotes = false,
                            IsFavorite = false,
                            IsReport = false,
                            MenuNameAr = "المواقع",
                            MenuNameEn = "Stores",
                            MenuUrl = "/store"
                        },
                        new
                        {
                            MenuCode = (short)14,
                            HasApprove = false,
                            HasEncoding = false,
                            HasNotes = false,
                            IsFavorite = false,
                            IsReport = false,
                            MenuNameAr = "الموردين",
                            MenuNameEn = "Suppliers",
                            MenuUrl = "/supplier"
                        },
                        new
                        {
                            MenuCode = (short)15,
                            HasApprove = false,
                            HasEncoding = false,
                            HasNotes = false,
                            IsFavorite = false,
                            IsReport = false,
                            MenuNameAr = "العملاء",
                            MenuNameEn = "Clients",
                            MenuUrl = "/client"
                        },
                        new
                        {
                            MenuCode = (short)16,
                            HasApprove = false,
                            HasEncoding = false,
                            HasNotes = false,
                            IsFavorite = false,
                            IsReport = false,
                            MenuNameAr = "مندوبي المبيعات",
                            MenuNameEn = "Sellers",
                            MenuUrl = "/seller"
                        },
                        new
                        {
                            MenuCode = (short)17,
                            HasApprove = false,
                            HasEncoding = false,
                            HasNotes = false,
                            IsFavorite = false,
                            IsReport = false,
                            MenuNameAr = "البنوك",
                            MenuNameEn = "Banks",
                            MenuUrl = "/bank"
                        },
                        new
                        {
                            MenuCode = (short)18,
                            HasApprove = false,
                            HasEncoding = false,
                            HasNotes = false,
                            IsFavorite = false,
                            IsReport = false,
                            MenuNameAr = "معرفات الملاحظات",
                            MenuNameEn = "Notes Identifiers",
                            MenuUrl = "/noteidentifier"
                        },
                        new
                        {
                            MenuCode = (short)19,
                            HasApprove = false,
                            HasEncoding = false,
                            HasNotes = false,
                            IsFavorite = false,
                            IsReport = false,
                            MenuNameAr = "اسماء شرائح عمولة المناديب",
                            MenuNameEn = "Seller Commission Names",
                            MenuUrl = "/sellercommissionmethod"
                        },
                        new
                        {
                            MenuCode = (short)20,
                            HasApprove = false,
                            HasEncoding = false,
                            HasNotes = false,
                            IsFavorite = false,
                            IsReport = false,
                            MenuNameAr = "أنواع مصاريف الفاتورة",
                            MenuNameEn = "Invoice Expense Types",
                            MenuUrl = "/invoiceexpensetype"
                        },
                        new
                        {
                            MenuCode = (short)21,
                            HasApprove = false,
                            HasEncoding = false,
                            HasNotes = false,
                            IsFavorite = false,
                            IsReport = false,
                            MenuNameAr = "طرق الشحن",
                            MenuNameEn = "Shipment Types",
                            MenuUrl = "/shipmenttype"
                        },
                        new
                        {
                            MenuCode = (short)22,
                            HasApprove = false,
                            HasEncoding = false,
                            HasNotes = false,
                            IsFavorite = false,
                            IsReport = false,
                            MenuNameAr = "أنواع حالات الشحن",
                            MenuNameEn = "Shipping Status Types",
                            MenuUrl = "/shippingstatus"
                        },
                        new
                        {
                            MenuCode = (short)23,
                            HasApprove = false,
                            HasEncoding = false,
                            HasNotes = false,
                            IsFavorite = false,
                            IsReport = false,
                            MenuNameAr = "شرائح عمولات مندوبي المبيعات",
                            MenuNameEn = "Sellers Commision Methods",
                            MenuUrl = "/sellercommission"
                        },
                        new
                        {
                            MenuCode = (short)24,
                            HasApprove = false,
                            HasEncoding = false,
                            HasNotes = false,
                            IsFavorite = false,
                            IsReport = false,
                            MenuNameAr = "الضرائب",
                            MenuNameEn = "Taxes",
                            MenuUrl = "/tax"
                        },
                        new
                        {
                            MenuCode = (short)25,
                            HasApprove = false,
                            HasEncoding = false,
                            HasNotes = false,
                            IsFavorite = false,
                            IsReport = false,
                            MenuNameAr = "طرق القبض/الدفع",
                            MenuNameEn = "Payment/Receiving Methods",
                            MenuUrl = "/paymentmethod"
                        },
                        new
                        {
                            MenuCode = (short)26,
                            HasApprove = false,
                            HasEncoding = false,
                            HasNotes = false,
                            IsFavorite = false,
                            IsReport = false,
                            MenuNameAr = "العملات",
                            MenuNameEn = "Currencies",
                            MenuUrl = "/currency"
                        },
                        new
                        {
                            MenuCode = (short)27,
                            HasApprove = false,
                            HasEncoding = false,
                            HasNotes = false,
                            IsFavorite = false,
                            IsReport = false,
                            MenuNameAr = "أسعار العملات",
                            MenuNameEn = "Currencies Rates",
                            MenuUrl = "/currencyrate"
                        },
                        new
                        {
                            MenuCode = (short)28,
                            HasApprove = false,
                            HasEncoding = false,
                            HasNotes = true,
                            IsFavorite = false,
                            IsReport = false,
                            MenuNameAr = "الأصناف",
                            MenuNameEn = "Items",
                            MenuUrl = "/item"
                        },
                        new
                        {
                            MenuCode = (short)29,
                            HasApprove = false,
                            HasEncoding = false,
                            HasNotes = false,
                            IsFavorite = false,
                            IsReport = false,
                            MenuNameAr = "وحدات الأصناف",
                            MenuNameEn = "Items Packages",
                            MenuUrl = "/itempackage"
                        },
                        new
                        {
                            MenuCode = (short)30,
                            HasApprove = false,
                            HasEncoding = false,
                            HasNotes = false,
                            IsFavorite = false,
                            IsReport = false,
                            MenuNameAr = "تقسيمات الأصناف",
                            MenuNameEn = "Items Categories",
                            MenuUrl = "/itemdivision"
                        },
                        new
                        {
                            MenuCode = (short)31,
                            HasApprove = false,
                            HasEncoding = false,
                            HasNotes = false,
                            IsFavorite = false,
                            IsReport = false,
                            MenuNameAr = "الشركات المصنعة",
                            MenuNameEn = "Vendors",
                            MenuUrl = "/vendor"
                        },
                        new
                        {
                            MenuCode = (short)32,
                            HasApprove = false,
                            HasEncoding = false,
                            HasNotes = false,
                            IsFavorite = false,
                            IsReport = false,
                            MenuNameAr = "سمات الأصناف",
                            MenuNameEn = "Item Attributes",
                            MenuUrl = "/itemattribute"
                        },
                        new
                        {
                            MenuCode = (short)33,
                            HasApprove = false,
                            HasEncoding = false,
                            HasNotes = false,
                            IsFavorite = false,
                            IsReport = false,
                            MenuNameAr = "الرصيد الافتتاحي",
                            MenuNameEn = "Open Balance",
                            MenuUrl = "/openbalance"
                        },
                        new
                        {
                            MenuCode = (short)34,
                            HasApprove = false,
                            HasEncoding = false,
                            HasNotes = false,
                            IsFavorite = false,
                            IsReport = false,
                            MenuNameAr = "رصيد المخزن",
                            MenuNameEn = "Current Balance",
                            MenuUrl = "/currentbalance"
                        },
                        new
                        {
                            MenuCode = (short)35,
                            HasApprove = false,
                            HasEncoding = false,
                            HasNotes = false,
                            IsFavorite = false,
                            IsReport = false,
                            MenuNameAr = "أسعار التكلفة",
                            MenuNameEn = "Item Cost",
                            MenuUrl = "/itemcost"
                        },
                        new
                        {
                            MenuCode = (short)36,
                            HasApprove = true,
                            HasEncoding = true,
                            HasNotes = true,
                            IsFavorite = false,
                            IsReport = false,
                            MenuNameAr = "الجرد والأرصدة الافتتاحية",
                            MenuNameEn = "StockTaking And Open Balances",
                            MenuUrl = "/stocktakingopenbalance"
                        },
                        new
                        {
                            MenuCode = (short)37,
                            HasApprove = true,
                            HasEncoding = true,
                            HasNotes = true,
                            IsFavorite = false,
                            IsReport = false,
                            MenuNameAr = "اعتماد الجرد كرصيد إفتتاحي",
                            MenuNameEn = "Approval of StockTaking as Open Balance",
                            MenuUrl = "/stocktakingcarryoveropenbalance"
                        },
                        new
                        {
                            MenuCode = (short)38,
                            HasApprove = true,
                            HasEncoding = true,
                            HasNotes = true,
                            IsFavorite = false,
                            IsReport = false,
                            MenuNameAr = "الجرد والأرصدة الحالية",
                            MenuNameEn = "StockTaking And Current Balances",
                            MenuUrl = "/stocktakingcurrentbalance"
                        },
                        new
                        {
                            MenuCode = (short)39,
                            HasApprove = true,
                            HasEncoding = true,
                            HasNotes = true,
                            IsFavorite = false,
                            IsReport = false,
                            MenuNameAr = "اعتماد الجرد كرصيد حالي",
                            MenuNameEn = "Approval of StockTaking as Current Balance",
                            MenuUrl = "/stocktakingcarryovercurrentbalance"
                        },
                        new
                        {
                            MenuCode = (short)40,
                            HasApprove = true,
                            HasEncoding = true,
                            HasNotes = true,
                            IsFavorite = false,
                            IsReport = false,
                            MenuNameAr = "سند استلام",
                            MenuNameEn = "Inventory In",
                            MenuUrl = "/inventoryin"
                        },
                        new
                        {
                            MenuCode = (short)41,
                            HasApprove = true,
                            HasEncoding = true,
                            HasNotes = true,
                            IsFavorite = false,
                            IsReport = false,
                            MenuNameAr = "سند تسليم",
                            MenuNameEn = "Inventory Out",
                            MenuUrl = "/inventoryout"
                        },
                        new
                        {
                            MenuCode = (short)42,
                            HasApprove = true,
                            HasEncoding = true,
                            HasNotes = true,
                            IsFavorite = false,
                            IsReport = false,
                            MenuNameAr = "نقل بضاعة داخلي",
                            MenuNameEn = "Internal Transfer Items",
                            MenuUrl = "/internaltransfer"
                        },
                        new
                        {
                            MenuCode = (short)43,
                            HasApprove = true,
                            HasEncoding = true,
                            HasNotes = true,
                            IsFavorite = false,
                            IsReport = false,
                            MenuNameAr = "استلام بضاعة داخلي",
                            MenuNameEn = "Internal Receive Items",
                            MenuUrl = "/internaltransferreceive"
                        },
                        new
                        {
                            MenuCode = (short)44,
                            HasApprove = true,
                            HasEncoding = true,
                            HasNotes = true,
                            IsFavorite = false,
                            IsReport = false,
                            MenuNameAr = "الدليل المحاسبي",
                            MenuNameEn = "Charts of Account",
                            MenuUrl = "/account"
                        },
                        new
                        {
                            MenuCode = (short)45,
                            HasApprove = true,
                            HasEncoding = true,
                            HasNotes = true,
                            IsFavorite = false,
                            IsReport = false,
                            MenuNameAr = "قيد يومية",
                            MenuNameEn = "Journal Entry",
                            MenuUrl = "/journalentry"
                        },
                        new
                        {
                            MenuCode = (short)46,
                            HasApprove = true,
                            HasEncoding = true,
                            HasNotes = true,
                            IsFavorite = false,
                            IsReport = false,
                            MenuNameAr = "سند قبض",
                            MenuNameEn = "Receipt Voucher",
                            MenuUrl = "/receiptvoucher"
                        },
                        new
                        {
                            MenuCode = (short)47,
                            HasApprove = true,
                            HasEncoding = true,
                            HasNotes = true,
                            IsFavorite = false,
                            IsReport = false,
                            MenuNameAr = "سند صرف",
                            MenuNameEn = "Payment Voucher",
                            MenuUrl = "/paymentvoucher"
                        },
                        new
                        {
                            MenuCode = (short)48,
                            HasApprove = true,
                            HasEncoding = true,
                            HasNotes = true,
                            IsFavorite = false,
                            IsReport = false,
                            MenuNameAr = "مراكز التكلفة",
                            MenuNameEn = "Cost Center",
                            MenuUrl = "/costcenter"
                        },
                        new
                        {
                            MenuCode = (short)49,
                            HasApprove = true,
                            HasEncoding = true,
                            HasNotes = true,
                            IsFavorite = false,
                            IsReport = false,
                            MenuNameAr = "طلب بضاعة",
                            MenuNameEn = "Product Request",
                            MenuUrl = "/productrequest"
                        },
                        new
                        {
                            MenuCode = (short)50,
                            HasApprove = true,
                            HasEncoding = true,
                            HasNotes = true,
                            IsFavorite = false,
                            IsReport = false,
                            MenuNameAr = "طلب تسعير بضاعة",
                            MenuNameEn = "Product Request Price",
                            MenuUrl = "/productrequestprice"
                        },
                        new
                        {
                            MenuCode = (short)51,
                            HasApprove = true,
                            HasEncoding = true,
                            HasNotes = true,
                            IsFavorite = false,
                            IsReport = false,
                            MenuNameAr = "عرض أسعار المورد",
                            MenuNameEn = "Supplier Quotation",
                            MenuUrl = "/supplierquotation"
                        },
                        new
                        {
                            MenuCode = (short)52,
                            HasApprove = true,
                            HasEncoding = true,
                            HasNotes = true,
                            IsFavorite = false,
                            IsReport = false,
                            MenuNameAr = "فاتورة شراء نقداً",
                            MenuNameEn = "Cash Purchase Invoice",
                            MenuUrl = "/purchaseinvoicecash"
                        },
                        new
                        {
                            MenuCode = (short)53,
                            HasApprove = true,
                            HasEncoding = true,
                            HasNotes = true,
                            IsFavorite = false,
                            IsReport = false,
                            MenuNameAr = "فاتورة شراء آجل",
                            MenuNameEn = "Credit Purchase Invoice",
                            MenuUrl = "/purchaseinvoicecredit"
                        },
                        new
                        {
                            MenuCode = (short)54,
                            HasApprove = true,
                            HasEncoding = true,
                            HasNotes = true,
                            IsFavorite = false,
                            IsReport = false,
                            MenuNameAr = "فاتورة مرتجع شراء نقداً",
                            MenuNameEn = "Cash Purchase Invoice Return",
                            MenuUrl = "/purchaseinvoicereturncash"
                        },
                        new
                        {
                            MenuCode = (short)55,
                            HasApprove = true,
                            HasEncoding = true,
                            HasNotes = true,
                            IsFavorite = false,
                            IsReport = false,
                            MenuNameAr = "فاتورة مرتجع شراء آجل",
                            MenuNameEn = "Credit Purchase Invoice Return",
                            MenuUrl = "/purchaseinvoicereturncredit"
                        },
                        new
                        {
                            MenuCode = (short)56,
                            HasApprove = true,
                            HasEncoding = true,
                            HasNotes = true,
                            IsFavorite = false,
                            IsReport = false,
                            MenuNameAr = "اتفاقية شراء",
                            MenuNameEn = "Purchase Order",
                            MenuUrl = "/purchaseorder"
                        },
                        new
                        {
                            MenuCode = (short)57,
                            HasApprove = true,
                            HasEncoding = true,
                            HasNotes = true,
                            IsFavorite = false,
                            IsReport = false,
                            MenuNameAr = "بيان استلام",
                            MenuNameEn = "Receipt Statement",
                            MenuUrl = "/stockinfrompurchaseorder"
                        },
                        new
                        {
                            MenuCode = (short)58,
                            HasApprove = true,
                            HasEncoding = true,
                            HasNotes = true,
                            IsFavorite = false,
                            IsReport = false,
                            MenuNameAr = "مرتجع من بيان استلام",
                            MenuNameEn = "Receipt Statement Return",
                            MenuUrl = "/stockinreturnfromstockin"
                        },
                        new
                        {
                            MenuCode = (short)59,
                            HasApprove = true,
                            HasEncoding = true,
                            HasNotes = true,
                            IsFavorite = false,
                            IsReport = false,
                            MenuNameAr = "فاتورة مشتريات مرحلية",
                            MenuNameEn = "Purchase Invoice Interim ",
                            MenuUrl = "/purchaseinvoice"
                        },
                        new
                        {
                            MenuCode = (short)60,
                            HasApprove = true,
                            HasEncoding = true,
                            HasNotes = true,
                            IsFavorite = false,
                            IsReport = false,
                            MenuNameAr = "فاتورة مشتريات بضاعة بالطريق نقداً",
                            MenuNameEn = "Purchase Invoice On The Way Cash",
                            MenuUrl = "/purchaseinvoicecashonway"
                        },
                        new
                        {
                            MenuCode = (short)61,
                            HasApprove = true,
                            HasEncoding = true,
                            HasNotes = true,
                            IsFavorite = false,
                            IsReport = false,
                            MenuNameAr = "فاتورة مشتريات بضاعة بالطريق آجل",
                            MenuNameEn = "Purchase Invoice On The Way Credit",
                            MenuUrl = "/purchaseinvoicecreditonway"
                        },
                        new
                        {
                            MenuCode = (short)62,
                            HasApprove = true,
                            HasEncoding = true,
                            HasNotes = true,
                            IsFavorite = false,
                            IsReport = false,
                            MenuNameAr = "استلام من فاتورة بضاعة بالطريق",
                            MenuNameEn = "Receipt From Purchase Invoice On The Way ",
                            MenuUrl = "/stockinfrompurchaseinvoiceonway"
                        },
                        new
                        {
                            MenuCode = (short)63,
                            HasApprove = true,
                            HasEncoding = true,
                            HasNotes = true,
                            IsFavorite = false,
                            IsReport = false,
                            MenuNameAr = "مرتجع من استلام فاتورة بضاعة بالطريق",
                            MenuNameEn = "Receipt From Purchase Invoice On The Way Return",
                            MenuUrl = "/stockinreturnfromstockinonway"
                        },
                        new
                        {
                            MenuCode = (short)64,
                            HasApprove = true,
                            HasEncoding = true,
                            HasNotes = true,
                            IsFavorite = false,
                            IsReport = false,
                            MenuNameAr = "فاتورة مرتجع بضاعة بالطريق",
                            MenuNameEn = "Purchase Invoice Return On The Way",
                            MenuUrl = "/purchaseinvoicereturnonway"
                        },
                        new
                        {
                            MenuCode = (short)65,
                            HasApprove = true,
                            HasEncoding = true,
                            HasNotes = true,
                            IsFavorite = false,
                            IsReport = false,
                            MenuNameAr = "مرتجع من فاتورة المشتريات",
                            MenuNameEn = "Return From Purchase Invoice",
                            MenuUrl = "/stockinreturnfrompurchaseinvoice"
                        },
                        new
                        {
                            MenuCode = (short)66,
                            HasApprove = true,
                            HasEncoding = true,
                            HasNotes = true,
                            IsFavorite = false,
                            IsReport = false,
                            MenuNameAr = "فاتورة مرتجع المشتريات",
                            MenuNameEn = "Purchase Invoice Return",
                            MenuUrl = "/purchaseinvoicereturn"
                        },
                        new
                        {
                            MenuCode = (short)67,
                            HasApprove = true,
                            HasEncoding = true,
                            HasNotes = true,
                            IsFavorite = false,
                            IsReport = false,
                            MenuNameAr = "إشعار مدين المورد",
                            MenuNameEn = "Supplier Debit Memo",
                            MenuUrl = "/supplierdebitmemo"
                        },
                        new
                        {
                            MenuCode = (short)68,
                            HasApprove = true,
                            HasEncoding = true,
                            HasNotes = true,
                            IsFavorite = false,
                            IsReport = false,
                            MenuNameAr = "إشعار دائن المورد",
                            MenuNameEn = "Supplier Credit Memo",
                            MenuUrl = "/suppliercreditmemo"
                        },
                        new
                        {
                            MenuCode = (short)69,
                            HasApprove = true,
                            HasEncoding = true,
                            HasNotes = true,
                            IsFavorite = false,
                            IsReport = false,
                            MenuNameAr = "طلب تسعير",
                            MenuNameEn = "Client Price Request",
                            MenuUrl = "/clientpricerequest"
                        },
                        new
                        {
                            MenuCode = (short)70,
                            HasApprove = true,
                            HasEncoding = true,
                            HasNotes = true,
                            IsFavorite = false,
                            IsReport = false,
                            MenuNameAr = "عرض أسعار",
                            MenuNameEn = "Client Quotation",
                            MenuUrl = "/clientquotation"
                        },
                        new
                        {
                            MenuCode = (short)71,
                            HasApprove = true,
                            HasEncoding = true,
                            HasNotes = true,
                            IsFavorite = false,
                            IsReport = false,
                            MenuNameAr = "اعتماد عرض أسعار",
                            MenuNameEn = "Client Quotation Approval",
                            MenuUrl = "/clientquotationapproval"
                        },
                        new
                        {
                            MenuCode = (short)72,
                            HasApprove = true,
                            HasEncoding = true,
                            HasNotes = true,
                            IsFavorite = false,
                            IsReport = false,
                            MenuNameAr = "فاتورة بيع نقداً",
                            MenuNameEn = "Cash Sales Invoice",
                            MenuUrl = "/cashsalesinvoice"
                        },
                        new
                        {
                            MenuCode = (short)73,
                            HasApprove = true,
                            HasEncoding = true,
                            HasNotes = true,
                            IsFavorite = false,
                            IsReport = false,
                            MenuNameAr = "فاتورة بيع آجل",
                            MenuNameEn = "Credit Sales Invoice",
                            MenuUrl = "/creditsalesinvoice"
                        },
                        new
                        {
                            MenuCode = (short)74,
                            HasApprove = true,
                            HasEncoding = true,
                            HasNotes = true,
                            IsFavorite = false,
                            IsReport = false,
                            MenuNameAr = "فاتورة مرتجع بيع نقداً",
                            MenuNameEn = "Cash Sales Invoice Return",
                            MenuUrl = "/cashsalesinvoicereturn"
                        },
                        new
                        {
                            MenuCode = (short)75,
                            HasApprove = true,
                            HasEncoding = true,
                            HasNotes = true,
                            IsFavorite = false,
                            IsReport = false,
                            MenuNameAr = "فاتورة مرتجع بيع آجل",
                            MenuNameEn = "Credit Sales Invoice Return",
                            MenuUrl = "/creditsalesinvoicereturn"
                        },
                        new
                        {
                            MenuCode = (short)76,
                            HasApprove = true,
                            HasEncoding = true,
                            HasNotes = true,
                            IsFavorite = false,
                            IsReport = false,
                            MenuNameAr = "اتفاقية بيع",
                            MenuNameEn = "Proforma Invoice",
                            MenuUrl = "/proformainvoice"
                        },
                        new
                        {
                            MenuCode = (short)77,
                            HasApprove = true,
                            HasEncoding = true,
                            HasNotes = true,
                            IsFavorite = false,
                            IsReport = false,
                            MenuNameAr = "بيان تسليم",
                            MenuNameEn = "Stock Out From Proforma Invoice",
                            MenuUrl = "/stockoutfromproformainvoice"
                        },
                        new
                        {
                            MenuCode = (short)78,
                            HasApprove = true,
                            HasEncoding = true,
                            HasNotes = true,
                            IsFavorite = false,
                            IsReport = false,
                            MenuNameAr = "مرتجع من بيان تسليم",
                            MenuNameEn = "Stock Out Return From Stock Out",
                            MenuUrl = "/stockoutreturnfromstockout"
                        },
                        new
                        {
                            MenuCode = (short)79,
                            HasApprove = true,
                            HasEncoding = true,
                            HasNotes = true,
                            IsFavorite = false,
                            IsReport = false,
                            MenuNameAr = "فاتورة مرحلية",
                            MenuNameEn = "Sales Invoice Interim",
                            MenuUrl = "/salesinvoice"
                        },
                        new
                        {
                            MenuCode = (short)80,
                            HasApprove = true,
                            HasEncoding = true,
                            HasNotes = true,
                            IsFavorite = false,
                            IsReport = false,
                            MenuNameAr = "فاتورة حجز نقدي",
                            MenuNameEn = "Cash Reservation Invoice",
                            MenuUrl = "/cashreservationinvoice"
                        },
                        new
                        {
                            MenuCode = (short)81,
                            HasApprove = true,
                            HasEncoding = true,
                            HasNotes = true,
                            IsFavorite = false,
                            IsReport = false,
                            MenuNameAr = "فاتورة حجز آجل",
                            MenuNameEn = "Credit Reservation Invoice",
                            MenuUrl = "/creditreservationinvoice"
                        },
                        new
                        {
                            MenuCode = (short)82,
                            HasApprove = true,
                            HasEncoding = true,
                            HasNotes = true,
                            IsFavorite = false,
                            IsReport = false,
                            MenuNameAr = "تسليم محجوز",
                            MenuNameEn = "Stock Out From Reservation",
                            MenuUrl = "/stockoutfromreservationinvoice"
                        },
                        new
                        {
                            MenuCode = (short)83,
                            HasApprove = true,
                            HasEncoding = true,
                            HasNotes = true,
                            IsFavorite = false,
                            IsReport = false,
                            MenuNameAr = "مرتجع من تسليم محجوز",
                            MenuNameEn = "Stock Out Return From Reservation",
                            MenuUrl = "/stockoutreturnfromreservationinvoice"
                        },
                        new
                        {
                            MenuCode = (short)84,
                            HasApprove = true,
                            HasEncoding = true,
                            HasNotes = true,
                            IsFavorite = false,
                            IsReport = false,
                            MenuNameAr = "فاتورة تصفية حجز",
                            MenuNameEn = "Reservation Invoice Close Out",
                            MenuUrl = "/reservationinvoicecloseout"
                        },
                        new
                        {
                            MenuCode = (short)85,
                            HasApprove = true,
                            HasEncoding = true,
                            HasNotes = true,
                            IsFavorite = false,
                            IsReport = false,
                            MenuNameAr = "مرتجع من فاتورة المبيعات",
                            MenuNameEn = "Stock Out Return From Invoice",
                            MenuUrl = "/stockoutreturnfromsalesinvoice"
                        },
                        new
                        {
                            MenuCode = (short)86,
                            HasApprove = true,
                            HasEncoding = true,
                            HasNotes = true,
                            IsFavorite = false,
                            IsReport = false,
                            MenuNameAr = "فاتورة مرتجع المبيعات",
                            MenuNameEn = "Sales Invoice Return",
                            MenuUrl = "/salesinvoicereturn"
                        },
                        new
                        {
                            MenuCode = (short)87,
                            HasApprove = true,
                            HasEncoding = true,
                            HasNotes = true,
                            IsFavorite = false,
                            IsReport = false,
                            MenuNameAr = "إشعار مدين للعميل",
                            MenuNameEn = "Client Debit Memo",
                            MenuUrl = "/clientdebitmemo"
                        },
                        new
                        {
                            MenuCode = (short)88,
                            HasApprove = true,
                            HasEncoding = true,
                            HasNotes = true,
                            IsFavorite = false,
                            IsReport = false,
                            MenuNameAr = "إشعار دائن للعميل",
                            MenuNameEn = "Client Credit Memo",
                            MenuUrl = "/clientcreditmemo"
                        },
                        new
                        {
                            MenuCode = (short)89,
                            HasApprove = false,
                            HasEncoding = false,
                            HasNotes = false,
                            IsFavorite = false,
                            IsReport = false,
                            MenuNameAr = "فك وحدات الأصناف",
                            MenuNameEn = "Disassemble Item Packages",
                            MenuUrl = "/disassembleitempackages"
                        },
                        new
                        {
                            MenuCode = (short)90,
                            HasApprove = false,
                            HasEncoding = false,
                            HasNotes = false,
                            IsFavorite = false,
                            IsReport = false,
                            MenuNameAr = "بيان فك وحدات الأصناف",
                            MenuNameEn = "Disassemble Item Packages Statement",
                            MenuUrl = "/disassemblestatement"
                        },
                        new
                        {
                            MenuCode = (short)91,
                            HasApprove = false,
                            HasEncoding = false,
                            HasNotes = false,
                            IsFavorite = false,
                            IsReport = true,
                            MenuNameAr = "ميزان مراجعة أساسي",
                            MenuNameEn = "Basic Trial Balance",
                            MenuUrl = "/reports/accounting/basictrialbalance"
                        },
                        new
                        {
                            MenuCode = (short)92,
                            HasApprove = false,
                            HasEncoding = false,
                            HasNotes = false,
                            IsFavorite = false,
                            IsReport = true,
                            MenuNameAr = "ميزان مراجعة فرعي",
                            MenuNameEn = "Sub-Trial Balance",
                            MenuUrl = "/reports/accounting/subtrialbalance"
                        },
                        new
                        {
                            MenuCode = (short)93,
                            HasApprove = false,
                            HasEncoding = false,
                            HasNotes = false,
                            IsFavorite = false,
                            IsReport = true,
                            MenuNameAr = "أرصدة الحسابات  ",
                            MenuNameEn = "Account Balances",
                            MenuUrl = "/reports/accounting/accountbalances"
                        },
                        new
                        {
                            MenuCode = (short)94,
                            HasApprove = false,
                            HasEncoding = false,
                            HasNotes = false,
                            IsFavorite = false,
                            IsReport = true,
                            MenuNameAr = "قائمة الدخل",
                            MenuNameEn = "Income Statement",
                            MenuUrl = "/reports/accounting/incomestatement"
                        },
                        new
                        {
                            MenuCode = (short)95,
                            HasApprove = false,
                            HasEncoding = false,
                            HasNotes = false,
                            IsFavorite = false,
                            IsReport = true,
                            MenuNameAr = "ميزانية عمومية",
                            MenuNameEn = "Balance Sheet",
                            MenuUrl = "/reports/accounting/balancesheet"
                        },
                        new
                        {
                            MenuCode = (short)96,
                            HasApprove = false,
                            HasEncoding = false,
                            HasNotes = false,
                            IsFavorite = false,
                            IsReport = true,
                            MenuNameAr = "بيانات الحسابات الجزئية",
                            MenuNameEn = "Individual Account Statement",
                            MenuUrl = "/reports/accounting/individualaccountstatement"
                        },
                        new
                        {
                            MenuCode = (short)97,
                            HasApprove = false,
                            HasEncoding = false,
                            HasNotes = false,
                            IsFavorite = false,
                            IsReport = true,
                            MenuNameAr = "كشف حساب مفصل",
                            MenuNameEn = "Detailed Account Statement",
                            MenuUrl = "/reports/accounting/accountstatementdetailed"
                        },
                        new
                        {
                            MenuCode = (short)98,
                            HasApprove = false,
                            HasEncoding = false,
                            HasNotes = false,
                            IsFavorite = false,
                            IsReport = true,
                            MenuNameAr = "كشف حساب لمجموعة حسابات",
                            MenuNameEn = "Account Statement for Group of Accounts",
                            MenuUrl = "/reports/accounting/accountstatementgrouped"
                        },
                        new
                        {
                            MenuCode = (short)99,
                            HasApprove = false,
                            HasEncoding = false,
                            HasNotes = false,
                            IsFavorite = false,
                            IsReport = true,
                            MenuNameAr = "دفتر قيود اليومية",
                            MenuNameEn = "General Journal",
                            MenuUrl = "/reports/accounting/generaljournal"
                        },
                        new
                        {
                            MenuCode = (short)100,
                            HasApprove = false,
                            HasEncoding = false,
                            HasNotes = false,
                            IsFavorite = false,
                            IsReport = true,
                            MenuNameAr = "أرقام السندات المفقودة",
                            MenuNameEn = "Missing Documents Numbers",
                            MenuUrl = "/reports/accounting/missingdocumentsnumbers"
                        },
                        new
                        {
                            MenuCode = (short)101,
                            HasApprove = false,
                            HasEncoding = false,
                            HasNotes = false,
                            IsFavorite = false,
                            IsReport = true,
                            MenuNameAr = "تقرير اجمالي الدخل للموقع",
                            MenuNameEn = "Gross Income Report On Store",
                            MenuUrl = "/reports/accounting/grossincome"
                        },
                        new
                        {
                            MenuCode = (short)102,
                            HasApprove = false,
                            HasEncoding = false,
                            HasNotes = false,
                            IsFavorite = false,
                            IsReport = true,
                            MenuNameAr = "تقرير طرق التحصيلات النقدية",
                            MenuNameEn = "Cash Collections Methods Report",
                            MenuUrl = "/reports/accounting/cashmethodsreport"
                        },
                        new
                        {
                            MenuCode = (short)103,
                            HasApprove = false,
                            HasEncoding = false,
                            HasNotes = false,
                            IsFavorite = false,
                            IsReport = true,
                            MenuNameAr = "التقرير الضريبي النموذجي",
                            MenuNameEn = "Typical Tax Report",
                            MenuUrl = "/reports/tax/typicaltaxreport"
                        },
                        new
                        {
                            MenuCode = (short)104,
                            HasApprove = false,
                            HasEncoding = false,
                            HasNotes = false,
                            IsFavorite = false,
                            IsReport = true,
                            MenuNameAr = "تقرير تفصيلي الضريبة",
                            MenuNameEn = "Detailed Tax Report",
                            MenuUrl = "/reports/tax/detailedtaxreport"
                        },
                        new
                        {
                            MenuCode = (short)105,
                            HasApprove = false,
                            HasEncoding = false,
                            HasNotes = false,
                            IsFavorite = false,
                            IsReport = true,
                            MenuNameAr = "تقرير الضرائب الأخرى",
                            MenuNameEn = "Other Tax Report",
                            MenuUrl = "/reports/tax/othertaxreport"
                        },
                        new
                        {
                            MenuCode = (short)106,
                            HasApprove = false,
                            HasEncoding = false,
                            HasNotes = false,
                            IsFavorite = false,
                            IsReport = true,
                            MenuNameAr = "تفصيلي الضرائب الأخرى",
                            MenuNameEn = "Detailed Other Tax Report",
                            MenuUrl = "/reports/tax/detailedothertaxreport"
                        },
                        new
                        {
                            MenuCode = (short)107,
                            HasApprove = false,
                            HasEncoding = false,
                            HasNotes = false,
                            IsFavorite = false,
                            IsReport = true,
                            MenuNameAr = "مجمع مراكز التكلفة الأساسي",
                            MenuNameEn = "Main Cost Center Consolidated",
                            MenuUrl = "/reports/costcenter/maincenterconsolidated"
                        },
                        new
                        {
                            MenuCode = (short)108,
                            HasApprove = false,
                            HasEncoding = false,
                            HasNotes = false,
                            IsFavorite = false,
                            IsReport = true,
                            MenuNameAr = "مجمع مراكز التكلفة الجزئي",
                            MenuNameEn = "Individual Cost Center Consolidated",
                            MenuUrl = "/reports/costcenter/individualcenterconsolidated"
                        },
                        new
                        {
                            MenuCode = (short)109,
                            HasApprove = false,
                            HasEncoding = false,
                            HasNotes = false,
                            IsFavorite = false,
                            IsReport = true,
                            MenuNameAr = "دفتر قيود يومية لمركز تكلفة",
                            MenuNameEn = "Cost Center Journal",
                            MenuUrl = "/reports/costcenter/costcenterjournal"
                        },
                        new
                        {
                            MenuCode = (short)110,
                            HasApprove = false,
                            HasEncoding = false,
                            HasNotes = false,
                            IsFavorite = false,
                            IsReport = true,
                            MenuNameAr = "حسابات مراكز التكلفة",
                            MenuNameEn = "Cost Center Accounts",
                            MenuUrl = "/reports/costcenter/costcenteraccounts"
                        },
                        new
                        {
                            MenuCode = (short)111,
                            HasApprove = false,
                            HasEncoding = false,
                            HasNotes = false,
                            IsFavorite = false,
                            IsReport = true,
                            MenuNameAr = "استهلاك الأصول الثابتة",
                            MenuNameEn = "Fixed Assets Depreciation",
                            MenuUrl = "/reports/fixedasset/fixedassetsdepreciation"
                        },
                        new
                        {
                            MenuCode = (short)112,
                            HasApprove = false,
                            HasEncoding = false,
                            HasNotes = false,
                            IsFavorite = false,
                            IsReport = true,
                            MenuNameAr = "الحركة الأصلية في مركز التكلفة (المشروع)",
                            MenuNameEn = "Original Movement in Cost Center (Project)",
                            MenuUrl = "/reports/fixedasset/originalmovementincostcenter"
                        },
                        new
                        {
                            MenuCode = (short)113,
                            HasApprove = false,
                            HasEncoding = false,
                            HasNotes = false,
                            IsFavorite = false,
                            IsReport = true,
                            MenuNameAr = "جرد البضاعة",
                            MenuNameEn = "Inventory Of Goods",
                            MenuUrl = "/reports/inventory/inventoryofgoods"
                        },
                        new
                        {
                            MenuCode = (short)114,
                            HasApprove = false,
                            HasEncoding = false,
                            HasNotes = false,
                            IsFavorite = false,
                            IsReport = true,
                            MenuNameAr = "قيمة البضاعة",
                            MenuNameEn = "Value Of Goods",
                            MenuUrl = "/reports/inventory/valueofgoods"
                        },
                        new
                        {
                            MenuCode = (short)115,
                            HasApprove = false,
                            HasEncoding = false,
                            HasNotes = false,
                            IsFavorite = false,
                            IsReport = true,
                            MenuNameAr = "حركة تفصيلية لصنف",
                            MenuNameEn = "Detailed Transaction Of An Item",
                            MenuUrl = "/reports/inventory/transactionofitem"
                        },
                        new
                        {
                            MenuCode = (short)116,
                            HasApprove = false,
                            HasEncoding = false,
                            HasNotes = false,
                            IsFavorite = false,
                            IsReport = true,
                            MenuNameAr = "حركة الأصناف",
                            MenuNameEn = "Transaction Of Items",
                            MenuUrl = "/reports/inventory/transactionofitems"
                        },
                        new
                        {
                            MenuCode = (short)117,
                            HasApprove = false,
                            HasEncoding = false,
                            HasNotes = false,
                            IsFavorite = false,
                            IsReport = true,
                            MenuNameAr = "الحركة التجارية للمشتريات",
                            MenuNameEn = "Commercial Movement Of Purchases",
                            MenuUrl = "/reports/purchases/commercialmovementpurchases"
                        },
                        new
                        {
                            MenuCode = (short)118,
                            HasApprove = false,
                            HasEncoding = false,
                            HasNotes = false,
                            IsFavorite = false,
                            IsReport = true,
                            MenuNameAr = "الأصناف منتهية الصلاحية",
                            MenuNameEn = "Expired Items",
                            MenuUrl = "/reports/inventory/expireditems"
                        },
                        new
                        {
                            MenuCode = (short)119,
                            HasApprove = false,
                            HasEncoding = false,
                            HasNotes = false,
                            IsFavorite = false,
                            IsReport = true,
                            MenuNameAr = "الأصناف التي ستنتهي صلاحيتها خلال مدة",
                            MenuNameEn = "Items That Will Expire Within A Period",
                            MenuUrl = "/reports/inventory/itemswillexpire"
                        },
                        new
                        {
                            MenuCode = (short)120,
                            HasApprove = false,
                            HasEncoding = false,
                            HasNotes = false,
                            IsFavorite = false,
                            IsReport = true,
                            MenuNameAr = "الأصناف الراكدة لم ينفذ لها بيع منذ مدة",
                            MenuNameEn = "Stagnant Items That Haven't Been Sold For A Period",
                            MenuUrl = "/reports/inventory/stagnantitems"
                        },
                        new
                        {
                            MenuCode = (short)121,
                            HasApprove = false,
                            HasEncoding = false,
                            HasNotes = false,
                            IsFavorite = false,
                            IsReport = true,
                            MenuNameAr = "الأصناف الأكثر ربيحة",
                            MenuNameEn = "Most Profitable Items",
                            MenuUrl = "/reports/inventory/mostprofitableitems"
                        },
                        new
                        {
                            MenuCode = (short)122,
                            HasApprove = false,
                            HasEncoding = false,
                            HasNotes = false,
                            IsFavorite = false,
                            IsReport = true,
                            MenuNameAr = "الأصناف الأكثر دوران",
                            MenuNameEn = "Most Circulating Items",
                            MenuUrl = "/reports/inventory/mostcirculatingitems"
                        },
                        new
                        {
                            MenuCode = (short)123,
                            HasApprove = false,
                            HasEncoding = false,
                            HasNotes = false,
                            IsFavorite = false,
                            IsReport = true,
                            MenuNameAr = "الأصناف التي وصلت لحد الطلب",
                            MenuNameEn = "Items That Have Reached The Demand Limit",
                            MenuUrl = "/reports/inventory/itemsdemandlimit"
                        },
                        new
                        {
                            MenuCode = (short)124,
                            HasApprove = false,
                            HasEncoding = false,
                            HasNotes = false,
                            IsFavorite = false,
                            IsReport = true,
                            MenuNameAr = "فواتير البيع المعمرة",
                            MenuNameEn = "Outstanding Sales Invoices",
                            MenuUrl = "/reports/client/outstandingsalesinvoices"
                        },
                        new
                        {
                            MenuCode = (short)125,
                            HasApprove = false,
                            HasEncoding = false,
                            HasNotes = false,
                            IsFavorite = false,
                            IsReport = true,
                            MenuNameAr = "فواتير البيع الغيرة مسددة",
                            MenuNameEn = "Unpaid Sales Invoices",
                            MenuUrl = "/reports/client/unpaidsalesinvoices"
                        },
                        new
                        {
                            MenuCode = (short)126,
                            HasApprove = false,
                            HasEncoding = false,
                            HasNotes = false,
                            IsFavorite = false,
                            IsReport = true,
                            MenuNameAr = "عملاء تجاوز رصيدهم حد الائتمان",
                            MenuNameEn = "Clients with Credit Limit Exceeded",
                            MenuUrl = "/reports/client/clientslimitexceeded"
                        },
                        new
                        {
                            MenuCode = (short)127,
                            HasApprove = false,
                            HasEncoding = false,
                            HasNotes = false,
                            IsFavorite = false,
                            IsReport = true,
                            MenuNameAr = "فواتير بيع سيحل موعد سدادها خلال فترة",
                            MenuNameEn = "Sales Invoices Due in a Period",
                            MenuUrl = "/reports/client/salesinaperiod"
                        },
                        new
                        {
                            MenuCode = (short)128,
                            HasApprove = false,
                            HasEncoding = false,
                            HasNotes = false,
                            IsFavorite = false,
                            IsReport = true,
                            MenuNameAr = "فواتير مبيعات نسبة الربح فيها أقل من",
                            MenuNameEn = "Sales Invoices with a Profit Rate Less than",
                            MenuUrl = "/reports/client/saleslessthan"
                        },
                        new
                        {
                            MenuCode = (short)129,
                            HasApprove = false,
                            HasEncoding = false,
                            HasNotes = false,
                            IsFavorite = false,
                            IsReport = true,
                            MenuNameAr = "فواتير مبيعات نسبة الخصم فيها أكبر من",
                            MenuNameEn = "Sales Invoices with a Discount Rate Greater than",
                            MenuUrl = "/reports/client/salesgreaterthan"
                        },
                        new
                        {
                            MenuCode = (short)130,
                            HasApprove = false,
                            HasEncoding = false,
                            HasNotes = false,
                            IsFavorite = false,
                            IsReport = true,
                            MenuNameAr = "تقرير النشاط التجاري",
                            MenuNameEn = "Business Activity Report",
                            MenuUrl = "/reports/client/businessactivityreport"
                        },
                        new
                        {
                            MenuCode = (short)131,
                            HasApprove = false,
                            HasEncoding = false,
                            HasNotes = false,
                            IsFavorite = false,
                            IsReport = true,
                            MenuNameAr = "العملاء الأكثر مبيعاً (مبالغ)",
                            MenuNameEn = "Top Selling Clients (Amounts)",
                            MenuUrl = "/reports/client/topsellingclients"
                        },
                        new
                        {
                            MenuCode = (short)132,
                            HasApprove = false,
                            HasEncoding = false,
                            HasNotes = false,
                            IsFavorite = false,
                            IsReport = true,
                            MenuNameAr = "العملاء الأكثر دورية (عدد فواتير)",
                            MenuNameEn = "Top Frequent Clients (No of Invoices)",
                            MenuUrl = "/reports/client/topfrequentclients"
                        },
                        new
                        {
                            MenuCode = (short)133,
                            HasApprove = false,
                            HasEncoding = false,
                            HasNotes = false,
                            IsFavorite = false,
                            IsReport = true,
                            MenuNameAr = "العملاء الأكثر ربحية",
                            MenuNameEn = "Top Profitable Clients",
                            MenuUrl = "/reports/client/topprofitableclients"
                        },
                        new
                        {
                            MenuCode = (short)134,
                            HasApprove = false,
                            HasEncoding = false,
                            HasNotes = false,
                            IsFavorite = false,
                            IsReport = true,
                            MenuNameAr = "فواتير الشراء المعمرة",
                            MenuNameEn = "Outstanding Purchase Invoices",
                            MenuUrl = "/reports/supplier/outstandingpurchaseinvoices"
                        },
                        new
                        {
                            MenuCode = (short)135,
                            HasApprove = false,
                            HasEncoding = false,
                            HasNotes = false,
                            IsFavorite = false,
                            IsReport = true,
                            MenuNameAr = "فواتير الشراء الغير مسددة",
                            MenuNameEn = "Unpaid Purchase Invoices",
                            MenuUrl = "/reports/supplier/unpaidpurchaseinvoices"
                        },
                        new
                        {
                            MenuCode = (short)136,
                            HasApprove = false,
                            HasEncoding = false,
                            HasNotes = false,
                            IsFavorite = false,
                            IsReport = true,
                            MenuNameAr = "موردين تجاوز رصيدهم حد الائتمان",
                            MenuNameEn = "Suppliers Over Credit Limit",
                            MenuUrl = "/reports/supplier/supplierscreditlimit"
                        },
                        new
                        {
                            MenuCode = (short)137,
                            HasApprove = false,
                            HasEncoding = false,
                            HasNotes = false,
                            IsFavorite = false,
                            IsReport = true,
                            MenuNameAr = "فواتير شراء سيحل موعد سدادها خلال فترة",
                            MenuNameEn = "Purchase Invoices Due Within a Period",
                            MenuUrl = "/reports/supplier/purchaseinaperiod"
                        },
                        new
                        {
                            MenuCode = (short)138,
                            HasApprove = false,
                            HasEncoding = false,
                            HasNotes = false,
                            IsFavorite = false,
                            IsReport = true,
                            MenuNameAr = "تقرير النشاط التجاري لفواتير الشراء",
                            MenuNameEn = "Business Activity Report for Purchase Invoices",
                            MenuUrl = "/reports/supplier/businesspurchaseinvoices"
                        },
                        new
                        {
                            MenuCode = (short)139,
                            HasApprove = false,
                            HasEncoding = false,
                            HasNotes = false,
                            IsFavorite = false,
                            IsReport = true,
                            MenuNameAr = "تقرير عمولات المناديب",
                            MenuNameEn = "Sellers Commission Report",
                            MenuUrl = "/reports/seller/sellerscommissionreport"
                        },
                        new
                        {
                            MenuCode = (short)140,
                            HasApprove = false,
                            HasEncoding = false,
                            HasNotes = false,
                            IsFavorite = false,
                            IsReport = true,
                            MenuNameAr = "متابعة طلبات البضاعة",
                            MenuNameEn = "Products Request Follow-up",
                            MenuUrl = "/reports/purchases/productrequestfollowup"
                        },
                        new
                        {
                            MenuCode = (short)141,
                            HasApprove = false,
                            HasEncoding = false,
                            HasNotes = false,
                            IsFavorite = false,
                            IsReport = true,
                            MenuNameAr = "متابعة طلبات التسعير للموردين",
                            MenuNameEn = "Products Requests Price Follow-up",
                            MenuUrl = "/reports/purchases/productrequestpricefollowup"
                        },
                        new
                        {
                            MenuCode = (short)142,
                            HasApprove = false,
                            HasEncoding = false,
                            HasNotes = false,
                            IsFavorite = false,
                            IsReport = true,
                            MenuNameAr = "متابعة عروض أسعار الموردين",
                            MenuNameEn = "Suppliers Quotations Follow-up",
                            MenuUrl = "/reports/purchases/supplierquotationfollowup"
                        },
                        new
                        {
                            MenuCode = (short)143,
                            HasApprove = false,
                            HasEncoding = false,
                            HasNotes = false,
                            IsFavorite = false,
                            IsReport = true,
                            MenuNameAr = "متابعة اتفاقيات شراء",
                            MenuNameEn = "Purchase Order Follow-up",
                            MenuUrl = "/reports/purchases/purchaseorderfollowup"
                        },
                        new
                        {
                            MenuCode = (short)144,
                            HasApprove = false,
                            HasEncoding = false,
                            HasNotes = false,
                            IsFavorite = false,
                            IsReport = true,
                            MenuNameAr = "متابعة بيانات استلام",
                            MenuNameEn = "Receipt Statements Follow-up",
                            MenuUrl = "/reports/purchases/receiptstatementfollowup"
                        },
                        new
                        {
                            MenuCode = (short)145,
                            HasApprove = false,
                            HasEncoding = false,
                            HasNotes = false,
                            IsFavorite = false,
                            IsReport = true,
                            MenuNameAr = "متابعة مرتجع من بيانات استلام",
                            MenuNameEn = "Receipt Statements Return Follow-up",
                            MenuUrl = "/reports/purchases/receiptstatementreturnfollowup"
                        },
                        new
                        {
                            MenuCode = (short)146,
                            HasApprove = false,
                            HasEncoding = false,
                            HasNotes = false,
                            IsFavorite = false,
                            IsReport = true,
                            MenuNameAr = "متابعة فاتورة مشتريات مرحلية",
                            MenuNameEn = "Purchase Invoices Interim Follow-up",
                            MenuUrl = "/reports/purchases/purchaseinvoicefollowup"
                        },
                        new
                        {
                            MenuCode = (short)147,
                            HasApprove = false,
                            HasEncoding = false,
                            HasNotes = false,
                            IsFavorite = false,
                            IsReport = true,
                            MenuNameAr = "متابعة مرتجع كميات من فاتورة مشتريات مرحلية",
                            MenuNameEn = "Purchase Invoices Interim Return Follow-up",
                            MenuUrl = "/reports/purchases/purchaseinvoiceinterimfollowup"
                        },
                        new
                        {
                            MenuCode = (short)148,
                            HasApprove = false,
                            HasEncoding = false,
                            HasNotes = false,
                            IsFavorite = false,
                            IsReport = true,
                            MenuNameAr = "متابعة بضاعة بالطريق",
                            MenuNameEn = "Products On The Way Follow-up",
                            MenuUrl = "/reports/purchases/productonthewayfollowup"
                        },
                        new
                        {
                            MenuCode = (short)149,
                            HasApprove = false,
                            HasEncoding = false,
                            HasNotes = false,
                            IsFavorite = false,
                            IsReport = true,
                            MenuNameAr = "متابعة طلبات التسعير للعملاء",
                            MenuNameEn = "Client Price Requests Follow-up",
                            MenuUrl = "/reports/sales/clientpricerequestfollowup"
                        },
                        new
                        {
                            MenuCode = (short)150,
                            HasApprove = false,
                            HasEncoding = false,
                            HasNotes = false,
                            IsFavorite = false,
                            IsReport = true,
                            MenuNameAr = "متابعة عروض الأسعار للعملاء",
                            MenuNameEn = "Client Quotations Follow-up",
                            MenuUrl = "/reports/sales/clientquotationfollowup"
                        },
                        new
                        {
                            MenuCode = (short)151,
                            HasApprove = false,
                            HasEncoding = false,
                            HasNotes = false,
                            IsFavorite = false,
                            IsReport = true,
                            MenuNameAr = "متابعة اعتمادات عروض الأسعار للعملاء",
                            MenuNameEn = "Client Quotations Approval Follow-up",
                            MenuUrl = "/reports/sales/clientquotationapprovalfollowup"
                        },
                        new
                        {
                            MenuCode = (short)152,
                            HasApprove = false,
                            HasEncoding = false,
                            HasNotes = false,
                            IsFavorite = false,
                            IsReport = true,
                            MenuNameAr = "متابعة اتفاقيات بيع",
                            MenuNameEn = "Proforma Invoices Follow-up",
                            MenuUrl = "/reports/sales/proformainvoicefollowup"
                        },
                        new
                        {
                            MenuCode = (short)153,
                            HasApprove = false,
                            HasEncoding = false,
                            HasNotes = false,
                            IsFavorite = false,
                            IsReport = true,
                            MenuNameAr = "متابعة بيان تسليم",
                            MenuNameEn = "Stock Out Follow-up",
                            MenuUrl = "/reports/sales/stockoutfollowup"
                        },
                        new
                        {
                            MenuCode = (short)154,
                            HasApprove = false,
                            HasEncoding = false,
                            HasNotes = false,
                            IsFavorite = false,
                            IsReport = true,
                            MenuNameAr = "متابعة مرتجع من بيان تسليم",
                            MenuNameEn = "Stock Out Return Follow-up",
                            MenuUrl = "/reports/sales/stockoutreturnfollowup"
                        },
                        new
                        {
                            MenuCode = (short)155,
                            HasApprove = false,
                            HasEncoding = false,
                            HasNotes = false,
                            IsFavorite = false,
                            IsReport = true,
                            MenuNameAr = "متابعة فاتورة  بيع مرحلية",
                            MenuNameEn = "Sales Invoice Interim Follow-up",
                            MenuUrl = "/reports/sales/salesinvoiceinterimfollowup"
                        },
                        new
                        {
                            MenuCode = (short)156,
                            HasApprove = false,
                            HasEncoding = false,
                            HasNotes = false,
                            IsFavorite = false,
                            IsReport = true,
                            MenuNameAr = "متابعة مرتجع كميات من فاتورة مرحلية",
                            MenuNameEn = "Sales Invoice Interim Return Follow-up",
                            MenuUrl = "/reports/sales/salesinvoiceinterimreturnfollowup"
                        },
                        new
                        {
                            MenuCode = (short)157,
                            HasApprove = false,
                            HasEncoding = false,
                            HasNotes = false,
                            IsFavorite = false,
                            IsReport = true,
                            MenuNameAr = "متابعة بضاعة محجوزة",
                            MenuNameEn = "Reservation Invoice Follow-up",
                            MenuUrl = "/reports/sales/reservationinvoicefollowup"
                        },
                        new
                        {
                            MenuCode = (short)158,
                            HasApprove = true,
                            HasEncoding = true,
                            HasNotes = true,
                            IsFavorite = false,
                            IsReport = false,
                            MenuNameAr = "الأصول الثابتة",
                            MenuNameEn = "Fixed Assets",
                            MenuUrl = "/fixedasset"
                        },
                        new
                        {
                            MenuCode = (short)159,
                            HasApprove = true,
                            HasEncoding = true,
                            HasNotes = true,
                            IsFavorite = false,
                            IsReport = false,
                            MenuNameAr = "نقل أصل ثابت",
                            MenuNameEn = "Fixed Asset Movement",
                            MenuUrl = "/fixedassetmovement"
                        },
                        new
                        {
                            MenuCode = (short)160,
                            HasApprove = true,
                            HasEncoding = true,
                            HasNotes = true,
                            IsFavorite = false,
                            IsReport = false,
                            MenuNameAr = "إضافة أصل ثابت",
                            MenuNameEn = "Fixed Asset Addition",
                            MenuUrl = "/fixedassetaddition"
                        },
                        new
                        {
                            MenuCode = (short)161,
                            HasApprove = true,
                            HasEncoding = true,
                            HasNotes = true,
                            IsFavorite = false,
                            IsReport = false,
                            MenuNameAr = "استبعاد أصل ثابت",
                            MenuNameEn = "Fixed Asset Exclusion",
                            MenuUrl = "/fixedassetexclusion"
                        },
                        new
                        {
                            MenuCode = (short)162,
                            HasApprove = true,
                            HasEncoding = true,
                            HasNotes = true,
                            IsFavorite = false,
                            IsReport = false,
                            MenuNameAr = "إهلاك أصل ثابت",
                            MenuNameEn = "Fixed Asset Depreciation",
                            MenuUrl = "/fixedassetdepreciation"
                        },
                        new
                        {
                            MenuCode = (short)163,
                            HasApprove = false,
                            HasEncoding = false,
                            HasNotes = false,
                            IsFavorite = false,
                            IsReport = true,
                            MenuNameAr = "الحركة التجارية للمبيعات",
                            MenuNameEn = "Commercial Movement Of Sales",
                            MenuUrl = "/reports/purchases/commercialmovementsales"
                        });
                });

            modelBuilder.Entity("Shared.CoreOne.Models.Domain.Menus.MenuCompany", b =>
                {
                    b.Property<int>("MenuCompanyId")
                        .HasColumnType("int")
                        .HasColumnOrder(1);

                    b.Property<int>("CompanyId")
                        .HasColumnType("int")
                        .HasColumnOrder(3);

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnOrder(200);

                    b.Property<bool?>("Hide")
                        .HasColumnType("tinyint(1)")
                        .HasColumnOrder(206);

                    b.Property<string>("IpAddressCreated")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnOrder(204);

                    b.Property<string>("IpAddressModified")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnOrder(205);

                    b.Property<bool>("IsFavorite")
                        .HasColumnType("tinyint(1)")
                        .HasColumnOrder(6);

                    b.Property<short>("MenuCode")
                        .HasColumnType("smallint")
                        .HasColumnOrder(2);

                    b.Property<string>("MenuNameAr")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnOrder(4);

                    b.Property<string>("MenuNameEn")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnOrder(5);

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnOrder(201);

                    b.Property<string>("UserNameCreated")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnOrder(202);

                    b.Property<string>("UserNameModified")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnOrder(203);

                    b.HasKey("MenuCompanyId");

                    b.HasIndex("CompanyId");

                    b.HasIndex("MenuCode");

                    b.ToTable("MenuCompanies");
                });

            modelBuilder.Entity("Shared.CoreOne.Models.Domain.Menus.MenuEncoding", b =>
                {
                    b.Property<int>("MenuEncodingId")
                        .HasColumnType("int")
                        .HasColumnOrder(1);

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnOrder(200);

                    b.Property<bool?>("Hide")
                        .HasColumnType("tinyint(1)")
                        .HasColumnOrder(206);

                    b.Property<string>("IpAddressCreated")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnOrder(204);

                    b.Property<string>("IpAddressModified")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnOrder(205);

                    b.Property<short>("MenuCode")
                        .HasColumnType("smallint")
                        .HasColumnOrder(3);

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnOrder(201);

                    b.Property<string>("Prefix")
                        .HasMaxLength(10)
                        .HasColumnType("varchar(10)")
                        .HasColumnOrder(4);

                    b.Property<int>("StoreId")
                        .HasColumnType("int")
                        .HasColumnOrder(2);

                    b.Property<string>("Suffix")
                        .HasMaxLength(10)
                        .HasColumnType("varchar(10)")
                        .HasColumnOrder(5);

                    b.Property<string>("UserNameCreated")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnOrder(202);

                    b.Property<string>("UserNameModified")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnOrder(203);

                    b.HasKey("MenuEncodingId");

                    b.HasIndex("MenuCode");

                    b.HasIndex("StoreId");

                    b.ToTable("MenuEncodings");
                });

            modelBuilder.Entity("Shared.CoreOne.Models.Domain.Menus.MenuNote", b =>
                {
                    b.Property<int>("MenuNoteId")
                        .HasColumnType("int")
                        .HasColumnOrder(1);

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnOrder(200);

                    b.Property<bool?>("Hide")
                        .HasColumnType("tinyint(1)")
                        .HasColumnOrder(206);

                    b.Property<string>("IpAddressCreated")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnOrder(204);

                    b.Property<string>("IpAddressModified")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnOrder(205);

                    b.Property<short>("MenuCode")
                        .HasColumnType("smallint")
                        .HasColumnOrder(2);

                    b.Property<int>("MenuNoteIdentifierId")
                        .HasColumnType("int")
                        .HasColumnOrder(3);

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnOrder(201);

                    b.Property<string>("Note")
                        .HasMaxLength(2000)
                        .HasColumnType("varchar(2000)")
                        .HasColumnOrder(6);

                    b.Property<string>("NoteValue")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("varchar(2000)")
                        .HasColumnOrder(5);

                    b.Property<int>("ReferenceId")
                        .HasColumnType("int")
                        .HasColumnOrder(4);

                    b.Property<bool>("ShowInReports")
                        .HasColumnType("tinyint(1)")
                        .HasColumnOrder(7);

                    b.Property<bool>("ShowOnPrint")
                        .HasColumnType("tinyint(1)")
                        .HasColumnOrder(8);

                    b.Property<bool>("ShowOnSelection")
                        .HasColumnType("tinyint(1)")
                        .HasColumnOrder(9);

                    b.Property<string>("UserNameCreated")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnOrder(202);

                    b.Property<string>("UserNameModified")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnOrder(203);

                    b.HasKey("MenuNoteId");

                    b.HasIndex("MenuCode");

                    b.HasIndex("MenuNoteIdentifierId");

                    b.ToTable("MenuNotes");
                });

            modelBuilder.Entity("Shared.CoreOne.Models.Domain.Menus.MenuNoteIdentifier", b =>
                {
                    b.Property<int>("MenuNoteIdentifierId")
                        .HasColumnType("int")
                        .HasColumnOrder(1);

                    b.Property<byte>("ColumnIdentifierId")
                        .HasColumnType("tinyint unsigned")
                        .HasColumnOrder(6);

                    b.Property<int>("CompanyId")
                        .HasColumnType("int")
                        .HasColumnOrder(5);

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnOrder(200);

                    b.Property<bool?>("Hide")
                        .HasColumnType("tinyint(1)")
                        .HasColumnOrder(206);

                    b.Property<string>("IpAddressCreated")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnOrder(204);

                    b.Property<string>("IpAddressModified")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnOrder(205);

                    b.Property<short?>("MenuCode")
                        .HasColumnType("smallint")
                        .HasColumnOrder(7);

                    b.Property<int>("MenuNoteIdentifierCode")
                        .HasColumnType("int")
                        .HasColumnOrder(2);

                    b.Property<string>("MenuNoteIdentifierNameAr")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)")
                        .HasColumnOrder(3);

                    b.Property<string>("MenuNoteIdentifierNameEn")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)")
                        .HasColumnOrder(4);

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnOrder(201);

                    b.Property<string>("UserNameCreated")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnOrder(202);

                    b.Property<string>("UserNameModified")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnOrder(203);

                    b.HasKey("MenuNoteIdentifierId");

                    b.HasIndex("ColumnIdentifierId");

                    b.HasIndex("CompanyId");

                    b.HasIndex("MenuCode");

                    b.ToTable("MenuNoteIdentifiers");
                });

            modelBuilder.Entity("Shared.CoreOne.Models.Domain.Modules.Bank", b =>
                {
                    b.Property<int>("BankId")
                        .HasColumnType("int")
                        .HasColumnOrder(1);

                    b.Property<int?>("AccountId")
                        .HasColumnType("int")
                        .HasColumnOrder(18);

                    b.Property<string>("AccountNumber")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnOrder(6);

                    b.Property<string>("Address")
                        .HasMaxLength(300)
                        .HasColumnType("varchar(300)")
                        .HasColumnOrder(12);

                    b.Property<int?>("ArchiveHeaderId")
                        .HasColumnType("int")
                        .HasColumnOrder(22);

                    b.Property<int>("BankCode")
                        .HasColumnType("int")
                        .HasColumnOrder(2);

                    b.Property<string>("BankNameAr")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnOrder(3);

                    b.Property<string>("BankNameEn")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnOrder(4);

                    b.Property<int>("CompanyId")
                        .HasColumnType("int")
                        .HasColumnOrder(5);

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnOrder(200);

                    b.Property<string>("Email")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnOrder(11);

                    b.Property<string>("Fax")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnOrder(9);

                    b.Property<bool?>("Hide")
                        .HasColumnType("tinyint(1)")
                        .HasColumnOrder(206);

                    b.Property<string>("IBAN")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnOrder(7);

                    b.Property<string>("InActiveReasons")
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)")
                        .HasColumnOrder(21);

                    b.Property<string>("IpAddressCreated")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnOrder(204);

                    b.Property<string>("IpAddressModified")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnOrder(205);

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)")
                        .HasColumnOrder(20);

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnOrder(201);

                    b.Property<string>("Phone")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnOrder(8);

                    b.Property<string>("ResponsibleEmail")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnOrder(17);

                    b.Property<string>("ResponsibleFax")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnOrder(16);

                    b.Property<string>("ResponsibleName")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnOrder(14);

                    b.Property<string>("ResponsiblePhone")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnOrder(15);

                    b.Property<string>("TaxCode")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnOrder(13);

                    b.Property<string>("UserNameCreated")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnOrder(202);

                    b.Property<string>("UserNameModified")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnOrder(203);

                    b.Property<decimal>("VisaFees")
                        .HasColumnType("decimal(4,2)")
                        .HasColumnOrder(19);

                    b.Property<string>("Website")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnOrder(10);

                    b.HasKey("BankId");

                    b.HasIndex("AccountId");

                    b.HasIndex("ArchiveHeaderId");

                    b.HasIndex("CompanyId");

                    b.ToTable("Banks");
                });

            modelBuilder.Entity("Shared.CoreOne.Models.Domain.Modules.Branch", b =>
                {
                    b.Property<int>("BranchId")
                        .HasColumnType("int")
                        .HasColumnOrder(1);

                    b.Property<string>("BranchAddress")
                        .HasMaxLength(2000)
                        .HasColumnType("varchar(2000)")
                        .HasColumnOrder(10);

                    b.Property<int>("BranchCode")
                        .HasColumnType("int")
                        .HasColumnOrder(2);

                    b.Property<string>("BranchEmail")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnOrder(8);

                    b.Property<string>("BranchNameAr")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("varchar(1000)")
                        .HasColumnOrder(3);

                    b.Property<string>("BranchNameEn")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("varchar(1000)")
                        .HasColumnOrder(4);

                    b.Property<string>("BranchPhone")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnOrder(6);

                    b.Property<string>("BranchWebsite")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnOrder(9);

                    b.Property<string>("BranchWhatsApp")
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)")
                        .HasColumnOrder(7);

                    b.Property<int>("CompanyId")
                        .HasColumnType("int")
                        .HasColumnOrder(5);

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnOrder(200);

                    b.Property<bool?>("Hide")
                        .HasColumnType("tinyint(1)")
                        .HasColumnOrder(206);

                    b.Property<string>("InActiveReasons")
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)")
                        .HasColumnOrder(18);

                    b.Property<string>("IpAddressCreated")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnOrder(204);

                    b.Property<string>("IpAddressModified")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnOrder(205);

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)")
                        .HasColumnOrder(17);

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnOrder(201);

                    b.Property<string>("ResponsibleAddress")
                        .HasMaxLength(2000)
                        .HasColumnType("varchar(2000)")
                        .HasColumnOrder(16);

                    b.Property<string>("ResponsibleEmail")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnOrder(15);

                    b.Property<string>("ResponsibleNameAr")
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)")
                        .HasColumnOrder(11);

                    b.Property<string>("ResponsibleNameEn")
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)")
                        .HasColumnOrder(12);

                    b.Property<string>("ResponsiblePhone")
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)")
                        .HasColumnOrder(13);

                    b.Property<string>("ResponsibleWhatsApp")
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)")
                        .HasColumnOrder(14);

                    b.Property<string>("UserNameCreated")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnOrder(202);

                    b.Property<string>("UserNameModified")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnOrder(203);

                    b.HasKey("BranchId");

                    b.HasIndex("CompanyId");

                    b.ToTable("Branches");
                });

            modelBuilder.Entity("Shared.CoreOne.Models.Domain.Modules.Client", b =>
                {
                    b.Property<int>("ClientId")
                        .HasColumnType("int")
                        .HasColumnOrder(1);

                    b.Property<int?>("AccountId")
                        .HasColumnType("int")
                        .HasColumnOrder(7);

                    b.Property<string>("AdditionalNumber")
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)")
                        .HasColumnOrder(23);

                    b.Property<string>("Address1")
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)")
                        .HasColumnOrder(25);

                    b.Property<string>("Address2")
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)")
                        .HasColumnOrder(26);

                    b.Property<string>("Address3")
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)")
                        .HasColumnOrder(27);

                    b.Property<string>("Address4")
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)")
                        .HasColumnOrder(28);

                    b.Property<int?>("ArchiveHeaderId")
                        .HasColumnType("int")
                        .HasColumnOrder(38);

                    b.Property<string>("BuildingNumber")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnOrder(19);

                    b.Property<int?>("CityId")
                        .HasColumnType("int")
                        .HasColumnOrder(16);

                    b.Property<int>("ClientCode")
                        .HasColumnType("int")
                        .HasColumnOrder(2);

                    b.Property<string>("ClientNameAr")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)")
                        .HasColumnOrder(3);

                    b.Property<string>("ClientNameEn")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)")
                        .HasColumnOrder(4);

                    b.Property<string>("CommercialRegister")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnOrder(20);

                    b.Property<int>("CompanyId")
                        .HasColumnType("int")
                        .HasColumnOrder(6);

                    b.Property<DateTime>("ContractDate")
                        .HasColumnType("Date")
                        .HasColumnOrder(5);

                    b.Property<string>("CountryCode")
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)")
                        .HasColumnOrder(24);

                    b.Property<int?>("CountryId")
                        .HasColumnType("int")
                        .HasColumnOrder(14);

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnOrder(200);

                    b.Property<int>("CreditLimitDays")
                        .HasColumnType("int")
                        .HasColumnOrder(8);

                    b.Property<decimal>("CreditLimitValues")
                        .HasColumnType("decimal(30,15)")
                        .HasColumnOrder(10);

                    b.Property<int>("DebitLimitDays")
                        .HasColumnType("int")
                        .HasColumnOrder(9);

                    b.Property<int?>("DistrictId")
                        .HasColumnType("int")
                        .HasColumnOrder(17);

                    b.Property<int?>("EmployeeId")
                        .HasColumnType("int")
                        .HasColumnOrder(12);

                    b.Property<string>("FirstResponsibleEmail")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnOrder(31);

                    b.Property<string>("FirstResponsibleName")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnOrder(29);

                    b.Property<string>("FirstResponsiblePhone")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnOrder(30);

                    b.Property<bool?>("Hide")
                        .HasColumnType("tinyint(1)")
                        .HasColumnOrder(206);

                    b.Property<string>("InActiveReasons")
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)")
                        .HasColumnOrder(37);

                    b.Property<string>("IpAddressCreated")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnOrder(204);

                    b.Property<string>("IpAddressModified")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnOrder(205);

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)")
                        .HasColumnOrder(36);

                    b.Property<bool>("IsCredit")
                        .HasColumnType("tinyint(1)")
                        .HasColumnOrder(35);

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnOrder(201);

                    b.Property<string>("PostalCode")
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)")
                        .HasColumnOrder(18);

                    b.Property<string>("SecondResponsibleEmail")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnOrder(34);

                    b.Property<string>("SecondResponsibleName")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnOrder(32);

                    b.Property<string>("SecondResponsiblePhone")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnOrder(33);

                    b.Property<int?>("SellerId")
                        .HasColumnType("int")
                        .HasColumnOrder(11);

                    b.Property<int?>("StateId")
                        .HasColumnType("int")
                        .HasColumnOrder(15);

                    b.Property<string>("Street1")
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)")
                        .HasColumnOrder(21);

                    b.Property<string>("Street2")
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)")
                        .HasColumnOrder(22);

                    b.Property<string>("TaxCode")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnOrder(13);

                    b.Property<string>("UserNameCreated")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnOrder(202);

                    b.Property<string>("UserNameModified")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnOrder(203);

                    b.HasKey("ClientId");

                    b.HasIndex("AccountId");

                    b.HasIndex("ArchiveHeaderId");

                    b.HasIndex("CompanyId");

                    b.HasIndex("SellerId");

                    b.ToTable("Clients");
                });

            modelBuilder.Entity("Shared.CoreOne.Models.Domain.Modules.Company", b =>
                {
                    b.Property<int>("CompanyId")
                        .HasColumnType("int")
                        .HasColumnOrder(1);

                    b.Property<string>("Address")
                        .HasMaxLength(2000)
                        .HasColumnType("varchar(2000)")
                        .HasColumnOrder(10);

                    b.Property<string>("CompanyNameAr")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("varchar(1000)")
                        .HasColumnOrder(2);

                    b.Property<string>("CompanyNameEn")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("varchar(1000)")
                        .HasColumnOrder(3);

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnOrder(200);

                    b.Property<short>("CurrencyId")
                        .HasColumnType("smallint")
                        .HasColumnOrder(5);

                    b.Property<string>("Email")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnOrder(8);

                    b.Property<string>("FooterUrl")
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)")
                        .HasColumnOrder(13);

                    b.Property<string>("HeaderUrl")
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)")
                        .HasColumnOrder(12);

                    b.Property<bool?>("Hide")
                        .HasColumnType("tinyint(1)")
                        .HasColumnOrder(206);

                    b.Property<string>("InActiveReasons")
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)")
                        .HasColumnOrder(15);

                    b.Property<string>("IpAddressCreated")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnOrder(204);

                    b.Property<string>("IpAddressModified")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnOrder(205);

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)")
                        .HasColumnOrder(14);

                    b.Property<string>("LogoUrl")
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)")
                        .HasColumnOrder(11);

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnOrder(201);

                    b.Property<string>("Phone")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnOrder(6);

                    b.Property<string>("TaxCode")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnOrder(4);

                    b.Property<string>("UserNameCreated")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnOrder(202);

                    b.Property<string>("UserNameModified")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnOrder(203);

                    b.Property<string>("Website")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnOrder(9);

                    b.Property<string>("WhatsApp")
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)")
                        .HasColumnOrder(7);

                    b.HasKey("CompanyId");

                    b.HasIndex("CurrencyId");

                    b.ToTable("Companies");
                });

            modelBuilder.Entity("Shared.CoreOne.Models.Domain.Modules.Currency", b =>
                {
                    b.Property<short>("CurrencyId")
                        .HasColumnType("smallint")
                        .HasColumnOrder(1);

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnOrder(200);

                    b.Property<string>("CurrencyNameAr")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnOrder(2);

                    b.Property<string>("CurrencyNameEn")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnOrder(3);

                    b.Property<string>("FractionalUnitAr")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnOrder(6);

                    b.Property<string>("FractionalUnitEn")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnOrder(7);

                    b.Property<bool?>("Hide")
                        .HasColumnType("tinyint(1)")
                        .HasColumnOrder(206);

                    b.Property<string>("IpAddressCreated")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnOrder(204);

                    b.Property<string>("IpAddressModified")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnOrder(205);

                    b.Property<string>("IsoCode")
                        .HasMaxLength(10)
                        .HasColumnType("varchar(10)")
                        .HasColumnOrder(4);

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnOrder(201);

                    b.Property<short>("NumberToBasic")
                        .HasColumnType("smallint")
                        .HasColumnOrder(8);

                    b.Property<string>("Symbol")
                        .HasMaxLength(10)
                        .HasColumnType("varchar(10)")
                        .HasColumnOrder(5);

                    b.Property<string>("UserNameCreated")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnOrder(202);

                    b.Property<string>("UserNameModified")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnOrder(203);

                    b.HasKey("CurrencyId");

                    b.ToTable("Currencies");
                });

            modelBuilder.Entity("Shared.CoreOne.Models.Domain.Modules.CurrencyRate", b =>
                {
                    b.Property<int>("CurrencyRateId")
                        .HasColumnType("int")
                        .HasColumnOrder(1);

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnOrder(200);

                    b.Property<decimal>("CurrencyRateValue")
                        .HasColumnType("decimal(30,15)")
                        .HasColumnOrder(4);

                    b.Property<short>("FromCurrencyId")
                        .HasColumnType("smallint")
                        .HasColumnOrder(2);

                    b.Property<bool?>("Hide")
                        .HasColumnType("tinyint(1)")
                        .HasColumnOrder(206);

                    b.Property<string>("IpAddressCreated")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnOrder(204);

                    b.Property<string>("IpAddressModified")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnOrder(205);

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnOrder(201);

                    b.Property<short>("ToCurrencyId")
                        .HasColumnType("smallint")
                        .HasColumnOrder(3);

                    b.Property<string>("UserNameCreated")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnOrder(202);

                    b.Property<string>("UserNameModified")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnOrder(203);

                    b.HasKey("CurrencyRateId");

                    b.HasIndex("FromCurrencyId");

                    b.HasIndex("ToCurrencyId");

                    b.ToTable("CurrencyRates");
                });

            modelBuilder.Entity("Shared.CoreOne.Models.Domain.Modules.DocumentType", b =>
                {
                    b.Property<short>("DocumentTypeId")
                        .HasColumnType("smallint")
                        .HasColumnOrder(1);

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnOrder(200);

                    b.Property<string>("DocumentTypeNameAr")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("DocumentTypeNameEn")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<bool?>("Hide")
                        .HasColumnType("tinyint(1)")
                        .HasColumnOrder(206);

                    b.Property<string>("IpAddressCreated")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnOrder(204);

                    b.Property<string>("IpAddressModified")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnOrder(205);

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnOrder(201);

                    b.Property<string>("UserNameCreated")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnOrder(202);

                    b.Property<string>("UserNameModified")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnOrder(203);

                    b.HasKey("DocumentTypeId");

                    b.ToTable("DocumentTypes");

                    b.HasData(
                        new
                        {
                            DocumentTypeId = (short)1,
                            DocumentTypeNameAr = "الجرد والأرصدة الافتتاحية",
                            DocumentTypeNameEn = "StockTaking And Open Balances"
                        },
                        new
                        {
                            DocumentTypeId = (short)2,
                            DocumentTypeNameAr = "اعتماد الجرد كرصيد إفتتاحي",
                            DocumentTypeNameEn = "Approval of StockTaking as Open Balance"
                        },
                        new
                        {
                            DocumentTypeId = (short)3,
                            DocumentTypeNameAr = "الجرد والأرصدة الحالية",
                            DocumentTypeNameEn = "StockTaking And Current Balances"
                        },
                        new
                        {
                            DocumentTypeId = (short)4,
                            DocumentTypeNameAr = "اعتماد الجرد كرصيد حالي",
                            DocumentTypeNameEn = "Approval of StockTaking as Current Balance"
                        },
                        new
                        {
                            DocumentTypeId = (short)5,
                            DocumentTypeNameAr = "سند استلام",
                            DocumentTypeNameEn = "Inventory In"
                        },
                        new
                        {
                            DocumentTypeId = (short)6,
                            DocumentTypeNameAr = "سند تسليم",
                            DocumentTypeNameEn = "Inventory Out"
                        },
                        new
                        {
                            DocumentTypeId = (short)7,
                            DocumentTypeNameAr = "نقل بضاعة داخلي",
                            DocumentTypeNameEn = "Internal Transfer Items"
                        },
                        new
                        {
                            DocumentTypeId = (short)8,
                            DocumentTypeNameAr = "استلام بضاعة داخلي",
                            DocumentTypeNameEn = "Internal Receive Items"
                        },
                        new
                        {
                            DocumentTypeId = (short)9,
                            DocumentTypeNameAr = "قيد يومية",
                            DocumentTypeNameEn = "Journal Entry"
                        },
                        new
                        {
                            DocumentTypeId = (short)10,
                            DocumentTypeNameAr = "سند قبض",
                            DocumentTypeNameEn = "Receipt Voucher"
                        },
                        new
                        {
                            DocumentTypeId = (short)11,
                            DocumentTypeNameAr = "سند صرف",
                            DocumentTypeNameEn = "Payment Voucher"
                        },
                        new
                        {
                            DocumentTypeId = (short)12,
                            DocumentTypeNameAr = "طلب بضاعة",
                            DocumentTypeNameEn = "Product Request"
                        },
                        new
                        {
                            DocumentTypeId = (short)13,
                            DocumentTypeNameAr = "طلب تسعير بضاعة",
                            DocumentTypeNameEn = "Product Request Price"
                        },
                        new
                        {
                            DocumentTypeId = (short)14,
                            DocumentTypeNameAr = "عرض أسعار المورد",
                            DocumentTypeNameEn = "Supplier Quotation"
                        },
                        new
                        {
                            DocumentTypeId = (short)15,
                            DocumentTypeNameAr = "فاتورة شراء نقداً",
                            DocumentTypeNameEn = "Cash Purchase Invoice"
                        },
                        new
                        {
                            DocumentTypeId = (short)16,
                            DocumentTypeNameAr = "فاتورة شراء آجل",
                            DocumentTypeNameEn = "Credit Purchase Invoice"
                        },
                        new
                        {
                            DocumentTypeId = (short)17,
                            DocumentTypeNameAr = "فاتورة مرتجع شراء نقداً",
                            DocumentTypeNameEn = "Cash Purchase Invoice Return"
                        },
                        new
                        {
                            DocumentTypeId = (short)18,
                            DocumentTypeNameAr = "فاتورة مرتجع شراء آجل",
                            DocumentTypeNameEn = "Credit Purchase Invoice Return"
                        },
                        new
                        {
                            DocumentTypeId = (short)19,
                            DocumentTypeNameAr = "اتفاقية شراء",
                            DocumentTypeNameEn = "Purchase Order"
                        },
                        new
                        {
                            DocumentTypeId = (short)20,
                            DocumentTypeNameAr = "بيان استلام",
                            DocumentTypeNameEn = "Receipt Statement"
                        },
                        new
                        {
                            DocumentTypeId = (short)21,
                            DocumentTypeNameAr = "مرتجع من بيان استلام",
                            DocumentTypeNameEn = "Receipt Statement Return"
                        },
                        new
                        {
                            DocumentTypeId = (short)22,
                            DocumentTypeNameAr = "فاتورة مشتريات مرحلية",
                            DocumentTypeNameEn = "Purchase Invoice Interim "
                        },
                        new
                        {
                            DocumentTypeId = (short)23,
                            DocumentTypeNameAr = "فاتورة مشتريات بضاعة بالطريق نقداً",
                            DocumentTypeNameEn = "Purchase Invoice On The Way Cash"
                        },
                        new
                        {
                            DocumentTypeId = (short)24,
                            DocumentTypeNameAr = "فاتورة مشتريات بضاعة بالطريق آجل",
                            DocumentTypeNameEn = "Purchase Invoice On The Way Credit"
                        },
                        new
                        {
                            DocumentTypeId = (short)25,
                            DocumentTypeNameAr = "استلام من فاتورة بضاعة بالطريق",
                            DocumentTypeNameEn = "Receipt From Purchase Invoice On The Way "
                        },
                        new
                        {
                            DocumentTypeId = (short)26,
                            DocumentTypeNameAr = "فاتورة مرتجع بضاعة بالطريق",
                            DocumentTypeNameEn = "Purchase Invoice Return On The Way"
                        },
                        new
                        {
                            DocumentTypeId = (short)27,
                            DocumentTypeNameAr = "مرتجع من فاتورة المشتريات",
                            DocumentTypeNameEn = "Return From Purchase Invoice"
                        },
                        new
                        {
                            DocumentTypeId = (short)28,
                            DocumentTypeNameAr = "فاتورة مرتجع المشتريات",
                            DocumentTypeNameEn = "Purchase Invoice Return"
                        },
                        new
                        {
                            DocumentTypeId = (short)29,
                            DocumentTypeNameAr = "إشعار مدين",
                            DocumentTypeNameEn = "Supplier Debit Memo"
                        },
                        new
                        {
                            DocumentTypeId = (short)30,
                            DocumentTypeNameAr = "إشعار دائن",
                            DocumentTypeNameEn = "Supplier Credit Memo"
                        },
                        new
                        {
                            DocumentTypeId = (short)31,
                            DocumentTypeNameAr = "طلب تسعير",
                            DocumentTypeNameEn = "Client Price Request"
                        },
                        new
                        {
                            DocumentTypeId = (short)32,
                            DocumentTypeNameAr = "عرض أسعار",
                            DocumentTypeNameEn = "Client Quotation"
                        },
                        new
                        {
                            DocumentTypeId = (short)33,
                            DocumentTypeNameAr = "اعتماد عرض أسعار",
                            DocumentTypeNameEn = "Client Quotation Approval"
                        },
                        new
                        {
                            DocumentTypeId = (short)34,
                            DocumentTypeNameAr = "فاتورة بيع نقداً",
                            DocumentTypeNameEn = "Cash Sales Invoice"
                        },
                        new
                        {
                            DocumentTypeId = (short)35,
                            DocumentTypeNameAr = "فاتورة بيع آجل",
                            DocumentTypeNameEn = "Credit Sales Invoice"
                        },
                        new
                        {
                            DocumentTypeId = (short)36,
                            DocumentTypeNameAr = "فاتورة مرتجع بيع نقداً",
                            DocumentTypeNameEn = "Cash Sales Invoice Return"
                        },
                        new
                        {
                            DocumentTypeId = (short)37,
                            DocumentTypeNameAr = "فاتورة مرتجع بيع آجل",
                            DocumentTypeNameEn = "Credit Sales Invoice Return"
                        },
                        new
                        {
                            DocumentTypeId = (short)38,
                            DocumentTypeNameAr = "اتفاقية بيع",
                            DocumentTypeNameEn = "Proforma Invoice"
                        },
                        new
                        {
                            DocumentTypeId = (short)39,
                            DocumentTypeNameAr = "بيان تسليم",
                            DocumentTypeNameEn = "Stock Out From Proforma Invoice"
                        },
                        new
                        {
                            DocumentTypeId = (short)40,
                            DocumentTypeNameAr = "مرتجع من بيان تسليم",
                            DocumentTypeNameEn = "Stock Out Return From Stock Out"
                        },
                        new
                        {
                            DocumentTypeId = (short)41,
                            DocumentTypeNameAr = "فاتورة مرحلية",
                            DocumentTypeNameEn = "Sales Invoice Interim"
                        },
                        new
                        {
                            DocumentTypeId = (short)42,
                            DocumentTypeNameAr = "فاتورة حجز نقدي",
                            DocumentTypeNameEn = "Cash Reservation Invoice"
                        },
                        new
                        {
                            DocumentTypeId = (short)43,
                            DocumentTypeNameAr = "فاتورة حجز آجل",
                            DocumentTypeNameEn = "Credit Reservation Invoice"
                        },
                        new
                        {
                            DocumentTypeId = (short)44,
                            DocumentTypeNameAr = "تسليم محجوز",
                            DocumentTypeNameEn = "Stock Out From Reservation"
                        },
                        new
                        {
                            DocumentTypeId = (short)45,
                            DocumentTypeNameAr = "مرتجع من تسليم محجوز",
                            DocumentTypeNameEn = "Stock Out Return From Reservation"
                        },
                        new
                        {
                            DocumentTypeId = (short)46,
                            DocumentTypeNameAr = "فاتورة تصفية حجز",
                            DocumentTypeNameEn = "Reservation Invoice Close Out"
                        },
                        new
                        {
                            DocumentTypeId = (short)47,
                            DocumentTypeNameAr = "مرتجع من فاتورة",
                            DocumentTypeNameEn = "Stock Out Return From Invoice"
                        },
                        new
                        {
                            DocumentTypeId = (short)48,
                            DocumentTypeNameAr = "فاتورة مرتجع",
                            DocumentTypeNameEn = "Sales Invoice Return"
                        },
                        new
                        {
                            DocumentTypeId = (short)49,
                            DocumentTypeNameAr = "إشعار مدين للعميل",
                            DocumentTypeNameEn = "Debit Memo"
                        },
                        new
                        {
                            DocumentTypeId = (short)50,
                            DocumentTypeNameAr = "إشعار دائن للعميل",
                            DocumentTypeNameEn = "Credit Memo"
                        });
                });

            modelBuilder.Entity("Shared.CoreOne.Models.Domain.Modules.EntityType", b =>
                {
                    b.Property<byte>("EntityTypeId")
                        .HasColumnType("tinyint unsigned")
                        .HasColumnOrder(1);

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnOrder(200);

                    b.Property<string>("EntityTypeNameAr")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnOrder(2);

                    b.Property<string>("EntityTypeNameEn")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnOrder(3);

                    b.Property<bool?>("Hide")
                        .HasColumnType("tinyint(1)")
                        .HasColumnOrder(206);

                    b.Property<string>("IpAddressCreated")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnOrder(204);

                    b.Property<string>("IpAddressModified")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnOrder(205);

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnOrder(201);

                    b.Property<byte>("Order")
                        .HasColumnType("tinyint unsigned")
                        .HasColumnOrder(4);

                    b.Property<string>("UserNameCreated")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnOrder(202);

                    b.Property<string>("UserNameModified")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnOrder(203);

                    b.HasKey("EntityTypeId");

                    b.ToTable("EntityTypes");

                    b.HasData(
                        new
                        {
                            EntityTypeId = (byte)1,
                            EntityTypeNameAr = "مورد",
                            EntityTypeNameEn = "Supplier",
                            Order = (byte)1
                        },
                        new
                        {
                            EntityTypeId = (byte)2,
                            EntityTypeNameAr = "عميل",
                            EntityTypeNameEn = "Client",
                            Order = (byte)2
                        },
                        new
                        {
                            EntityTypeId = (byte)3,
                            EntityTypeNameAr = "مندوب مبيعات",
                            EntityTypeNameEn = "Seller",
                            Order = (byte)3
                        },
                        new
                        {
                            EntityTypeId = (byte)4,
                            EntityTypeNameAr = "بنك",
                            EntityTypeNameEn = "Bank",
                            Order = (byte)4
                        });
                });

            modelBuilder.Entity("Shared.CoreOne.Models.Domain.Modules.PaymentMethod", b =>
                {
                    b.Property<int>("PaymentMethodId")
                        .HasColumnType("int")
                        .HasColumnOrder(1);

                    b.Property<int?>("CommissionAccountId")
                        .HasColumnType("int")
                        .HasColumnOrder(12);

                    b.Property<bool>("CommissionHasVat")
                        .HasColumnType("tinyint(1)")
                        .HasColumnOrder(21);

                    b.Property<decimal>("CommissionPercent")
                        .HasColumnType("decimal(30,15)")
                        .HasColumnOrder(9);

                    b.Property<int?>("CommissionTaxAccountId")
                        .HasColumnType("int")
                        .HasColumnOrder(14);

                    b.Property<bool>("CommissionVatInclusive")
                        .HasColumnType("tinyint(1)")
                        .HasColumnOrder(22);

                    b.Property<int>("CompanyId")
                        .HasColumnType("int")
                        .HasColumnOrder(4);

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnOrder(200);

                    b.Property<bool>("FixedCommissionHasVat")
                        .HasColumnType("tinyint(1)")
                        .HasColumnOrder(19);

                    b.Property<decimal>("FixedCommissionValue")
                        .HasColumnType("decimal(30,15)")
                        .HasColumnOrder(8);

                    b.Property<bool>("FixedCommissionVatInclusive")
                        .HasColumnType("tinyint(1)")
                        .HasColumnOrder(20);

                    b.Property<bool?>("Hide")
                        .HasColumnType("tinyint(1)")
                        .HasColumnOrder(206);

                    b.Property<string>("InActiveReasons")
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)")
                        .HasColumnOrder(16);

                    b.Property<string>("IpAddressCreated")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnOrder(204);

                    b.Property<string>("IpAddressModified")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnOrder(205);

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)")
                        .HasColumnOrder(15);

                    b.Property<bool>("IsPaymentMethod")
                        .HasColumnType("tinyint(1)")
                        .HasColumnOrder(17);

                    b.Property<bool>("IsReceivingMethod")
                        .HasColumnType("tinyint(1)")
                        .HasColumnOrder(18);

                    b.Property<decimal>("MaxCommissionValue")
                        .HasColumnType("decimal(30,15)")
                        .HasColumnOrder(11);

                    b.Property<decimal>("MinCommissionValue")
                        .HasColumnType("decimal(30,15)")
                        .HasColumnOrder(10);

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnOrder(201);

                    b.Property<int>("PaymentAccountId")
                        .HasColumnType("int")
                        .HasColumnOrder(7);

                    b.Property<int>("PaymentMethodCode")
                        .HasColumnType("int")
                        .HasColumnOrder(2);

                    b.Property<string>("PaymentMethodNameAr")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnOrder(5);

                    b.Property<string>("PaymentMethodNameEn")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnOrder(6);

                    b.Property<byte>("PaymentTypeId")
                        .HasColumnType("tinyint unsigned")
                        .HasColumnOrder(3);

                    b.Property<int?>("TaxId")
                        .HasColumnType("int")
                        .HasColumnOrder(13);

                    b.Property<string>("UserNameCreated")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnOrder(202);

                    b.Property<string>("UserNameModified")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnOrder(203);

                    b.HasKey("PaymentMethodId");

                    b.HasIndex("CommissionAccountId");

                    b.HasIndex("CommissionTaxAccountId");

                    b.HasIndex("CompanyId");

                    b.HasIndex("PaymentAccountId");

                    b.HasIndex("PaymentTypeId");

                    b.HasIndex("TaxId");

                    b.ToTable("PaymentMethods");
                });

            modelBuilder.Entity("Shared.CoreOne.Models.Domain.Modules.PaymentType", b =>
                {
                    b.Property<byte>("PaymentTypeId")
                        .HasColumnType("tinyint unsigned")
                        .HasColumnOrder(1);

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnOrder(200);

                    b.Property<bool?>("Hide")
                        .HasColumnType("tinyint(1)")
                        .HasColumnOrder(206);

                    b.Property<string>("IpAddressCreated")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnOrder(204);

                    b.Property<string>("IpAddressModified")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnOrder(205);

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnOrder(201);

                    b.Property<string>("PaymentTypeCode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnOrder(2);

                    b.Property<string>("PaymentTypeNameAr")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnOrder(3);

                    b.Property<string>("PaymentTypeNameEn")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnOrder(4);

                    b.Property<string>("UserNameCreated")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnOrder(202);

                    b.Property<string>("UserNameModified")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnOrder(203);

                    b.HasKey("PaymentTypeId");

                    b.ToTable("PaymentTypes");

                    b.HasData(
                        new
                        {
                            PaymentTypeId = (byte)1,
                            PaymentTypeCode = "10",
                            PaymentTypeNameAr = "نقدي",
                            PaymentTypeNameEn = "Cash"
                        },
                        new
                        {
                            PaymentTypeId = (byte)2,
                            PaymentTypeCode = "42",
                            PaymentTypeNameAr = "حساب بنكي",
                            PaymentTypeNameEn = "Bank Account"
                        },
                        new
                        {
                            PaymentTypeId = (byte)3,
                            PaymentTypeCode = "48",
                            PaymentTypeNameAr = "بطاقة مصرفية",
                            PaymentTypeNameEn = "Bank Card"
                        },
                        new
                        {
                            PaymentTypeId = (byte)4,
                            PaymentTypeCode = "",
                            PaymentTypeNameAr = "تقسيط",
                            PaymentTypeNameEn = "Installment"
                        },
                        new
                        {
                            PaymentTypeId = (byte)5,
                            PaymentTypeCode = "30",
                            PaymentTypeNameAr = "تحويل رصيد",
                            PaymentTypeNameEn = "Credit Transfer"
                        });
                });

            modelBuilder.Entity("Shared.CoreOne.Models.Domain.Modules.Seller", b =>
                {
                    b.Property<int>("SellerId")
                        .HasColumnType("int")
                        .HasColumnOrder(1);

                    b.Property<string>("Address")
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)")
                        .HasColumnOrder(13);

                    b.Property<int?>("ArchiveHeaderId")
                        .HasColumnType("int")
                        .HasColumnOrder(18);

                    b.Property<decimal>("ClientsDebitLimit")
                        .HasColumnType("decimal(30,15)")
                        .HasColumnOrder(15);

                    b.Property<int>("CompanyId")
                        .HasColumnType("int")
                        .HasColumnOrder(7);

                    b.Property<DateTime>("ContractDate")
                        .HasColumnType("Date")
                        .HasColumnOrder(6);

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnOrder(200);

                    b.Property<string>("Email")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnOrder(14);

                    b.Property<int?>("EmployeeId")
                        .HasColumnType("int")
                        .HasColumnOrder(8);

                    b.Property<bool?>("Hide")
                        .HasColumnType("tinyint(1)")
                        .HasColumnOrder(206);

                    b.Property<string>("InActiveReasons")
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)")
                        .HasColumnOrder(17);

                    b.Property<string>("IpAddressCreated")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnOrder(204);

                    b.Property<string>("IpAddressModified")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnOrder(205);

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)")
                        .HasColumnOrder(16);

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnOrder(201);

                    b.Property<string>("OutSourcingCompany")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnOrder(9);

                    b.Property<string>("Phone")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnOrder(11);

                    b.Property<int>("SellerCode")
                        .HasColumnType("int")
                        .HasColumnOrder(2);

                    b.Property<short?>("SellerCommissionMethodId")
                        .HasColumnType("smallint")
                        .HasColumnOrder(10);

                    b.Property<string>("SellerNameAr")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnOrder(4);

                    b.Property<string>("SellerNameEn")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnOrder(5);

                    b.Property<byte>("SellerTypeId")
                        .HasColumnType("tinyint unsigned")
                        .HasColumnOrder(3);

                    b.Property<string>("UserNameCreated")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnOrder(202);

                    b.Property<string>("UserNameModified")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnOrder(203);

                    b.Property<string>("WhatsApp")
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)")
                        .HasColumnOrder(12);

                    b.HasKey("SellerId");

                    b.HasIndex("ArchiveHeaderId");

                    b.HasIndex("CompanyId");

                    b.HasIndex("SellerCommissionMethodId");

                    b.HasIndex("SellerTypeId");

                    b.ToTable("Sellers");
                });

            modelBuilder.Entity("Shared.CoreOne.Models.Domain.Modules.SellerCommission", b =>
                {
                    b.Property<int>("SellerCommissionId")
                        .HasColumnType("int")
                        .HasColumnOrder(1);

                    b.Property<decimal>("CommissionPercent")
                        .HasColumnType("decimal(5,2)")
                        .HasColumnOrder(5);

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnOrder(200);

                    b.Property<int>("From")
                        .HasColumnType("int")
                        .HasColumnOrder(3);

                    b.Property<bool?>("Hide")
                        .HasColumnType("tinyint(1)")
                        .HasColumnOrder(206);

                    b.Property<string>("IpAddressCreated")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnOrder(204);

                    b.Property<string>("IpAddressModified")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnOrder(205);

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnOrder(201);

                    b.Property<short>("SellerCommissionMethodId")
                        .HasColumnType("smallint")
                        .HasColumnOrder(2);

                    b.Property<int>("To")
                        .HasColumnType("int")
                        .HasColumnOrder(4);

                    b.Property<string>("UserNameCreated")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnOrder(202);

                    b.Property<string>("UserNameModified")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnOrder(203);

                    b.HasKey("SellerCommissionId");

                    b.HasIndex("SellerCommissionMethodId");

                    b.ToTable("SellerCommissions");
                });

            modelBuilder.Entity("Shared.CoreOne.Models.Domain.Modules.SellerCommissionMethod", b =>
                {
                    b.Property<short>("SellerCommissionMethodId")
                        .HasColumnType("smallint")
                        .HasColumnOrder(1);

                    b.Property<int>("CompanyId")
                        .HasColumnType("int")
                        .HasColumnOrder(6);

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnOrder(200);

                    b.Property<bool?>("Hide")
                        .HasColumnType("tinyint(1)")
                        .HasColumnOrder(206);

                    b.Property<string>("InActiveReasons")
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)")
                        .HasColumnOrder(8);

                    b.Property<string>("IpAddressCreated")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnOrder(204);

                    b.Property<string>("IpAddressModified")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnOrder(205);

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)")
                        .HasColumnOrder(7);

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnOrder(201);

                    b.Property<short>("SellerCommissionMethodCode")
                        .HasColumnType("smallint")
                        .HasColumnOrder(2);

                    b.Property<string>("SellerCommissionMethodNameAr")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnOrder(3);

                    b.Property<string>("SellerCommissionMethodNameEn")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnOrder(4);

                    b.Property<byte>("SellerCommissionTypeId")
                        .HasColumnType("tinyint unsigned")
                        .HasColumnOrder(5);

                    b.Property<string>("UserNameCreated")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnOrder(202);

                    b.Property<string>("UserNameModified")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnOrder(203);

                    b.HasKey("SellerCommissionMethodId");

                    b.HasIndex("CompanyId");

                    b.HasIndex("SellerCommissionTypeId");

                    b.ToTable("SellerCommissionMethod");
                });

            modelBuilder.Entity("Shared.CoreOne.Models.Domain.Modules.SellerCommissionType", b =>
                {
                    b.Property<byte>("SellerCommissionTypeId")
                        .HasColumnType("tinyint unsigned")
                        .HasColumnOrder(1);

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnOrder(200);

                    b.Property<bool?>("Hide")
                        .HasColumnType("tinyint(1)")
                        .HasColumnOrder(206);

                    b.Property<string>("IpAddressCreated")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnOrder(204);

                    b.Property<string>("IpAddressModified")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnOrder(205);

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnOrder(201);

                    b.Property<string>("SellerCommissionTypeNameAr")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnOrder(2);

                    b.Property<string>("SellerCommissionTypeNameEn")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnOrder(3);

                    b.Property<string>("UserNameCreated")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnOrder(202);

                    b.Property<string>("UserNameModified")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnOrder(203);

                    b.HasKey("SellerCommissionTypeId");

                    b.ToTable("SellerCommissionTypes");

                    b.HasData(
                        new
                        {
                            SellerCommissionTypeId = (byte)1,
                            SellerCommissionTypeNameAr = "حسب الدخل النقدي",
                            SellerCommissionTypeNameEn = "According To Cash Income"
                        },
                        new
                        {
                            SellerCommissionTypeId = (byte)2,
                            SellerCommissionTypeNameAr = "حسب عمر الدين المحصل",
                            SellerCommissionTypeNameEn = "According To Age Of Debt Collected"
                        });
                });

            modelBuilder.Entity("Shared.CoreOne.Models.Domain.Modules.SellerType", b =>
                {
                    b.Property<byte>("SellerTypeId")
                        .HasColumnType("tinyint unsigned")
                        .HasColumnOrder(1);

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnOrder(200);

                    b.Property<bool?>("Hide")
                        .HasColumnType("tinyint(1)")
                        .HasColumnOrder(206);

                    b.Property<string>("IpAddressCreated")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnOrder(204);

                    b.Property<string>("IpAddressModified")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnOrder(205);

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnOrder(201);

                    b.Property<string>("SellerTypeNameAr")
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)")
                        .HasColumnOrder(2);

                    b.Property<string>("SellerTypeNameEn")
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)")
                        .HasColumnOrder(3);

                    b.Property<string>("UserNameCreated")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnOrder(202);

                    b.Property<string>("UserNameModified")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnOrder(203);

                    b.HasKey("SellerTypeId");

                    b.ToTable("SellerTypes");

                    b.HasData(
                        new
                        {
                            SellerTypeId = (byte)1,
                            SellerTypeNameAr = "موظف",
                            SellerTypeNameEn = "Employee"
                        },
                        new
                        {
                            SellerTypeId = (byte)2,
                            SellerTypeNameAr = "توظيف خارجي",
                            SellerTypeNameEn = "OutSourcing"
                        },
                        new
                        {
                            SellerTypeId = (byte)3,
                            SellerTypeNameAr = "بالعمولة",
                            SellerTypeNameEn = "With a Commission"
                        },
                        new
                        {
                            SellerTypeId = (byte)4,
                            SellerTypeNameAr = "أخري",
                            SellerTypeNameEn = "Other"
                        });
                });

            modelBuilder.Entity("Shared.CoreOne.Models.Domain.Modules.ShipmentType", b =>
                {
                    b.Property<int>("ShipmentTypeId")
                        .HasColumnType("int")
                        .HasColumnOrder(1);

                    b.Property<int?>("CompanyId")
                        .HasColumnType("int")
                        .HasColumnOrder(5);

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnOrder(200);

                    b.Property<bool?>("Hide")
                        .HasColumnType("tinyint(1)")
                        .HasColumnOrder(206);

                    b.Property<string>("IpAddressCreated")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnOrder(204);

                    b.Property<string>("IpAddressModified")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnOrder(205);

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnOrder(201);

                    b.Property<int>("ShipmentTypeCode")
                        .HasColumnType("int")
                        .HasColumnOrder(2);

                    b.Property<string>("ShipmentTypeNameAr")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnOrder(3);

                    b.Property<string>("ShipmentTypeNameEn")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnOrder(4);

                    b.Property<string>("UserNameCreated")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnOrder(202);

                    b.Property<string>("UserNameModified")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnOrder(203);

                    b.HasKey("ShipmentTypeId");

                    b.HasIndex("CompanyId");

                    b.ToTable("ShipmentTypes");

                    b.HasData(
                        new
                        {
                            ShipmentTypeId = 1,
                            ShipmentTypeCode = 1,
                            ShipmentTypeNameAr = "سيارة",
                            ShipmentTypeNameEn = "Car"
                        },
                        new
                        {
                            ShipmentTypeId = 2,
                            ShipmentTypeCode = 2,
                            ShipmentTypeNameAr = "دراجة نارية",
                            ShipmentTypeNameEn = "Motorcycle"
                        },
                        new
                        {
                            ShipmentTypeId = 3,
                            ShipmentTypeCode = 3,
                            ShipmentTypeNameAr = "شاحنة",
                            ShipmentTypeNameEn = "Truck"
                        },
                        new
                        {
                            ShipmentTypeId = 4,
                            ShipmentTypeCode = 4,
                            ShipmentTypeNameAr = "الطائرة",
                            ShipmentTypeNameEn = "Plane"
                        },
                        new
                        {
                            ShipmentTypeId = 5,
                            ShipmentTypeCode = 5,
                            ShipmentTypeNameAr = "الباخرة",
                            ShipmentTypeNameEn = "Ship"
                        });
                });

            modelBuilder.Entity("Shared.CoreOne.Models.Domain.Modules.Store", b =>
                {
                    b.Property<int>("StoreId")
                        .HasColumnType("int")
                        .HasColumnOrder(1);

                    b.Property<string>("AdditionalNumber")
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)")
                        .HasColumnOrder(15);

                    b.Property<string>("Address1")
                        .HasMaxLength(2000)
                        .HasColumnType("varchar(2000)")
                        .HasColumnOrder(17);

                    b.Property<string>("Address2")
                        .HasMaxLength(2000)
                        .HasColumnType("varchar(2000)")
                        .HasColumnOrder(18);

                    b.Property<string>("Address3")
                        .HasMaxLength(2000)
                        .HasColumnType("varchar(2000)")
                        .HasColumnOrder(19);

                    b.Property<string>("Address4")
                        .HasMaxLength(2000)
                        .HasColumnType("varchar(2000)")
                        .HasColumnOrder(20);

                    b.Property<int>("BranchId")
                        .HasColumnType("int")
                        .HasColumnOrder(5);

                    b.Property<string>("BuildingNumber")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnOrder(11);

                    b.Property<bool>("CanAcceptDirectInternalTransfer")
                        .HasColumnType("tinyint(1)")
                        .HasColumnOrder(32);

                    b.Property<int?>("CityId")
                        .HasColumnType("int")
                        .HasColumnOrder(8);

                    b.Property<string>("CommercialRegister")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnOrder(12);

                    b.Property<string>("CountryCode")
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)")
                        .HasColumnOrder(16);

                    b.Property<int?>("CountryId")
                        .HasColumnType("int")
                        .HasColumnOrder(6);

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnOrder(200);

                    b.Property<int?>("DistrictId")
                        .HasColumnType("int")
                        .HasColumnOrder(9);

                    b.Property<int?>("ExpenseAccountId")
                        .HasColumnType("int")
                        .HasColumnOrder(23);

                    b.Property<string>("GMap")
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)")
                        .HasColumnOrder(26);

                    b.Property<bool?>("Hide")
                        .HasColumnType("tinyint(1)")
                        .HasColumnOrder(206);

                    b.Property<string>("InActiveReasons")
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)")
                        .HasColumnOrder(31);

                    b.Property<string>("IpAddressCreated")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnOrder(204);

                    b.Property<string>("IpAddressModified")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnOrder(205);

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)")
                        .HasColumnOrder(28);

                    b.Property<bool>("IsReservedStore")
                        .HasColumnType("tinyint(1)")
                        .HasColumnOrder(29);

                    b.Property<string>("Lat")
                        .HasMaxLength(300)
                        .HasColumnType("varchar(300)")
                        .HasColumnOrder(25);

                    b.Property<string>("Long")
                        .HasMaxLength(300)
                        .HasColumnType("varchar(300)")
                        .HasColumnOrder(24);

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnOrder(201);

                    b.Property<bool>("NoReplenishment")
                        .HasColumnType("tinyint(1)")
                        .HasColumnOrder(27);

                    b.Property<string>("PostalCode")
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)")
                        .HasColumnOrder(10);

                    b.Property<int?>("ReservedParentStoreId")
                        .HasColumnType("int")
                        .HasColumnOrder(30);

                    b.Property<int?>("StateId")
                        .HasColumnType("int")
                        .HasColumnOrder(7);

                    b.Property<int?>("StockCreditAccountId")
                        .HasColumnType("int")
                        .HasColumnOrder(22);

                    b.Property<int?>("StockDebitAccountId")
                        .HasColumnType("int")
                        .HasColumnOrder(21);

                    b.Property<byte>("StoreClassificationId")
                        .HasColumnType("tinyint unsigned")
                        .HasColumnOrder(4);

                    b.Property<string>("StoreNameAr")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("varchar(1000)")
                        .HasColumnOrder(2);

                    b.Property<string>("StoreNameEn")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("varchar(1000)")
                        .HasColumnOrder(3);

                    b.Property<string>("Street1")
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)")
                        .HasColumnOrder(13);

                    b.Property<string>("Street2")
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)")
                        .HasColumnOrder(14);

                    b.Property<string>("UserNameCreated")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnOrder(202);

                    b.Property<string>("UserNameModified")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnOrder(203);

                    b.HasKey("StoreId");

                    b.HasIndex("BranchId");

                    b.HasIndex("CityId");

                    b.HasIndex("CountryId");

                    b.HasIndex("DistrictId");

                    b.HasIndex("StateId");

                    b.HasIndex("StoreClassificationId");

                    b.ToTable("Stores");
                });

            modelBuilder.Entity("Shared.CoreOne.Models.Domain.Modules.StoreClassification", b =>
                {
                    b.Property<byte>("StoreClassificationId")
                        .HasColumnType("tinyint unsigned")
                        .HasColumnOrder(1);

                    b.Property<string>("ClassificationNameAr")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnOrder(2);

                    b.Property<string>("ClassificationNameEn")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnOrder(3);

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnOrder(200);

                    b.Property<bool?>("Hide")
                        .HasColumnType("tinyint(1)")
                        .HasColumnOrder(206);

                    b.Property<string>("IpAddressCreated")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnOrder(204);

                    b.Property<string>("IpAddressModified")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnOrder(205);

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnOrder(201);

                    b.Property<string>("UserNameCreated")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnOrder(202);

                    b.Property<string>("UserNameModified")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnOrder(203);

                    b.HasKey("StoreClassificationId");

                    b.ToTable("StoreClassifications");

                    b.HasData(
                        new
                        {
                            StoreClassificationId = (byte)1,
                            ClassificationNameAr = "تجاري",
                            ClassificationNameEn = "Commercial"
                        },
                        new
                        {
                            StoreClassificationId = (byte)2,
                            ClassificationNameAr = "صناعي",
                            ClassificationNameEn = "Industrial"
                        },
                        new
                        {
                            StoreClassificationId = (byte)3,
                            ClassificationNameAr = "خدمي",
                            ClassificationNameEn = "Services"
                        },
                        new
                        {
                            StoreClassificationId = (byte)4,
                            ClassificationNameAr = "إداري",
                            ClassificationNameEn = "Managerial"
                        });
                });

            modelBuilder.Entity("Shared.CoreOne.Models.Domain.Modules.Supplier", b =>
                {
                    b.Property<int>("SupplierId")
                        .HasColumnType("int")
                        .HasColumnOrder(1);

                    b.Property<int?>("AccountId")
                        .HasColumnType("int")
                        .HasColumnOrder(7);

                    b.Property<string>("AdditionalNumber")
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)")
                        .HasColumnOrder(22);

                    b.Property<string>("Address1")
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)")
                        .HasColumnOrder(24);

                    b.Property<string>("Address2")
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)")
                        .HasColumnOrder(25);

                    b.Property<string>("Address3")
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)")
                        .HasColumnOrder(26);

                    b.Property<string>("Address4")
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)")
                        .HasColumnOrder(27);

                    b.Property<int?>("ArchiveHeaderId")
                        .HasColumnType("int")
                        .HasColumnOrder(37);

                    b.Property<string>("BuildingNumber")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnOrder(18);

                    b.Property<int?>("CityId")
                        .HasColumnType("int")
                        .HasColumnOrder(15);

                    b.Property<string>("CommercialRegister")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnOrder(19);

                    b.Property<int>("CompanyId")
                        .HasColumnType("int")
                        .HasColumnOrder(6);

                    b.Property<DateTime>("ContractDate")
                        .HasColumnType("Date")
                        .HasColumnOrder(5);

                    b.Property<string>("CountryCode")
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)")
                        .HasColumnOrder(23);

                    b.Property<int?>("CountryId")
                        .HasColumnType("int")
                        .HasColumnOrder(13);

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnOrder(200);

                    b.Property<int>("CreditLimitDays")
                        .HasColumnType("int")
                        .HasColumnOrder(8);

                    b.Property<decimal>("CreditLimitValues")
                        .HasColumnType("decimal(30,15)")
                        .HasColumnOrder(9);

                    b.Property<int>("DebitLimitDays")
                        .HasColumnType("int")
                        .HasColumnOrder(10);

                    b.Property<int?>("DistrictId")
                        .HasColumnType("int")
                        .HasColumnOrder(16);

                    b.Property<string>("FirstResponsibleEmail")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnOrder(30);

                    b.Property<string>("FirstResponsibleName")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnOrder(28);

                    b.Property<string>("FirstResponsiblePhone")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnOrder(29);

                    b.Property<bool?>("Hide")
                        .HasColumnType("tinyint(1)")
                        .HasColumnOrder(206);

                    b.Property<string>("InActiveReasons")
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)")
                        .HasColumnOrder(36);

                    b.Property<string>("IpAddressCreated")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnOrder(204);

                    b.Property<string>("IpAddressModified")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnOrder(205);

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)")
                        .HasColumnOrder(35);

                    b.Property<bool>("IsCredit")
                        .HasColumnType("tinyint(1)")
                        .HasColumnOrder(34);

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnOrder(201);

                    b.Property<string>("PostalCode")
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)")
                        .HasColumnOrder(17);

                    b.Property<string>("SecondResponsibleEmail")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnOrder(33);

                    b.Property<string>("SecondResponsibleName")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnOrder(31);

                    b.Property<string>("SecondResponsiblePhone")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnOrder(32);

                    b.Property<int?>("ShipmentTypeId")
                        .HasColumnType("int")
                        .HasColumnOrder(12);

                    b.Property<int?>("StateId")
                        .HasColumnType("int")
                        .HasColumnOrder(14);

                    b.Property<string>("Street1")
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)")
                        .HasColumnOrder(20);

                    b.Property<string>("Street2")
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)")
                        .HasColumnOrder(21);

                    b.Property<int>("SupplierCode")
                        .HasColumnType("int")
                        .HasColumnOrder(2);

                    b.Property<string>("SupplierNameAr")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)")
                        .HasColumnOrder(3);

                    b.Property<string>("SupplierNameEn")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)")
                        .HasColumnOrder(4);

                    b.Property<string>("TaxCode")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnOrder(11);

                    b.Property<string>("UserNameCreated")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnOrder(202);

                    b.Property<string>("UserNameModified")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnOrder(203);

                    b.HasKey("SupplierId");

                    b.HasIndex("AccountId");

                    b.HasIndex("ArchiveHeaderId");

                    b.HasIndex("CompanyId");

                    b.HasIndex("ShipmentTypeId");

                    b.ToTable("Suppliers");
                });

            modelBuilder.Entity("Shared.CoreOne.Models.Domain.Modules.Vendor", b =>
                {
                    b.Property<int>("VendorId")
                        .HasColumnType("int")
                        .HasColumnOrder(1);

                    b.Property<int>("CompanyId")
                        .HasColumnType("int")
                        .HasColumnOrder(5);

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnOrder(200);

                    b.Property<bool?>("Hide")
                        .HasColumnType("tinyint(1)")
                        .HasColumnOrder(206);

                    b.Property<string>("IpAddressCreated")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnOrder(204);

                    b.Property<string>("IpAddressModified")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnOrder(205);

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnOrder(201);

                    b.Property<string>("UserNameCreated")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnOrder(202);

                    b.Property<string>("UserNameModified")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnOrder(203);

                    b.Property<int>("VendorCode")
                        .HasColumnType("int")
                        .HasColumnOrder(2);

                    b.Property<string>("VendorNameAr")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnOrder(3);

                    b.Property<string>("VendorNameEn")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnOrder(4);

                    b.HasKey("VendorId");

                    b.HasIndex("CompanyId");

                    b.ToTable("Vendors");
                });

            modelBuilder.Entity("Shared.CoreOne.Models.Domain.Notifications.NotificationDetail", b =>
                {
                    b.Property<int>("NotificationDetailId")
                        .HasColumnType("int")
                        .HasColumnOrder(1);

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnOrder(200);

                    b.Property<bool?>("Hide")
                        .HasColumnType("tinyint(1)")
                        .HasColumnOrder(206);

                    b.Property<string>("IpAddressCreated")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnOrder(204);

                    b.Property<string>("IpAddressModified")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnOrder(205);

                    b.Property<bool>("IsRead")
                        .HasColumnType("tinyint(1)")
                        .HasColumnOrder(4);

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnOrder(201);

                    b.Property<int>("NotificationHeaderId")
                        .HasColumnType("int")
                        .HasColumnOrder(2);

                    b.Property<DateTime?>("ReadTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnOrder(5);

                    b.Property<string>("ToUserName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnOrder(3);

                    b.Property<string>("UserNameCreated")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnOrder(202);

                    b.Property<string>("UserNameModified")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnOrder(203);

                    b.HasKey("NotificationDetailId");

                    b.HasIndex("NotificationHeaderId");

                    b.ToTable("NotificationDetails");
                });

            modelBuilder.Entity("Shared.CoreOne.Models.Domain.Notifications.NotificationHeader", b =>
                {
                    b.Property<int>("NotificationHeaderId")
                        .HasColumnType("int")
                        .HasColumnOrder(1);

                    b.Property<string>("Body")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)")
                        .HasColumnOrder(4);

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnOrder(200);

                    b.Property<DateTime>("EntryDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnOrder(6);

                    b.Property<string>("FromUserName")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnOrder(5);

                    b.Property<bool?>("Hide")
                        .HasColumnType("tinyint(1)")
                        .HasColumnOrder(206);

                    b.Property<string>("IpAddressCreated")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnOrder(204);

                    b.Property<string>("IpAddressModified")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnOrder(205);

                    b.Property<bool>("IsHighPriority")
                        .HasColumnType("tinyint(1)")
                        .HasColumnOrder(7);

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnOrder(201);

                    b.Property<int>("NotificationTypeId")
                        .HasColumnType("int")
                        .HasColumnOrder(2);

                    b.Property<DateTime>("NotifyTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnOrder(9);

                    b.Property<int?>("ReferenceId")
                        .HasColumnType("int")
                        .HasColumnOrder(10);

                    b.Property<bool>("SendLater")
                        .HasColumnType("tinyint(1)")
                        .HasColumnOrder(8);

                    b.Property<string>("Subject")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnOrder(3);

                    b.Property<string>("UserNameCreated")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnOrder(202);

                    b.Property<string>("UserNameModified")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnOrder(203);

                    b.HasKey("NotificationHeaderId");

                    b.HasIndex("NotificationTypeId");

                    b.ToTable("NotificationHeaders");
                });

            modelBuilder.Entity("Shared.CoreOne.Models.Domain.Notifications.NotificationType", b =>
                {
                    b.Property<int>("NotificationTypeId")
                        .HasColumnType("int")
                        .HasColumnOrder(1);

                    b.Property<short>("AutomatedNotifyBeforeDays")
                        .HasColumnType("smallint")
                        .HasColumnOrder(4);

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnOrder(200);

                    b.Property<bool?>("Hide")
                        .HasColumnType("tinyint(1)")
                        .HasColumnOrder(206);

                    b.Property<string>("IpAddressCreated")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnOrder(204);

                    b.Property<string>("IpAddressModified")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnOrder(205);

                    b.Property<bool>("IsHighPriority")
                        .HasColumnType("tinyint(1)")
                        .HasColumnOrder(6);

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnOrder(201);

                    b.Property<string>("NotificationTypeNameAr")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnOrder(2);

                    b.Property<string>("NotificationTypeNameEn")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnOrder(3);

                    b.Property<short>("NotifyAfterDays")
                        .HasColumnType("smallint")
                        .HasColumnOrder(5);

                    b.Property<string>("UserNameCreated")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnOrder(202);

                    b.Property<string>("UserNameModified")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnOrder(203);

                    b.HasKey("NotificationTypeId");

                    b.ToTable("NotificationTypes");
                });

            modelBuilder.Entity("Shared.CoreOne.Models.Domain.Settings.ApplicationFlagDetail", b =>
                {
                    b.Property<int>("ApplicationFlagDetailId")
                        .HasColumnType("int")
                        .HasColumnOrder(1);

                    b.Property<int>("ApplicationFlagHeaderId")
                        .HasColumnType("int")
                        .HasColumnOrder(2);

                    b.Property<byte>("ApplicationFlagTypeId")
                        .HasColumnType("tinyint unsigned")
                        .HasColumnOrder(3);

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnOrder(200);

                    b.Property<string>("FlagNameAr")
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)")
                        .HasColumnOrder(4);

                    b.Property<string>("FlagNameEn")
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)")
                        .HasColumnOrder(5);

                    b.Property<string>("FlagValue")
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)")
                        .HasColumnOrder(6);

                    b.Property<bool?>("Hide")
                        .HasColumnType("tinyint(1)")
                        .HasColumnOrder(206);

                    b.Property<string>("IpAddressCreated")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnOrder(204);

                    b.Property<string>("IpAddressModified")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnOrder(205);

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnOrder(201);

                    b.Property<short>("Order")
                        .HasColumnType("smallint")
                        .HasColumnOrder(7);

                    b.Property<string>("UserNameCreated")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnOrder(202);

                    b.Property<string>("UserNameModified")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnOrder(203);

                    b.HasKey("ApplicationFlagDetailId");

                    b.HasIndex("ApplicationFlagHeaderId");

                    b.HasIndex("ApplicationFlagTypeId");

                    b.ToTable("ApplicationFlagDetails");

                    b.HasData(
                        new
                        {
                            ApplicationFlagDetailId = 1,
                            ApplicationFlagHeaderId = 1,
                            ApplicationFlagTypeId = (byte)1,
                            FlagNameAr = "المستوى الأول بالعربية",
                            FlagNameEn = "First Level Ar",
                            FlagValue = "المستوى الأول",
                            Order = (short)1
                        },
                        new
                        {
                            ApplicationFlagDetailId = 2,
                            ApplicationFlagHeaderId = 1,
                            ApplicationFlagTypeId = (byte)1,
                            FlagNameAr = "المستوى الأول بالانجليزية",
                            FlagNameEn = "First Level En",
                            FlagValue = "First Level",
                            Order = (short)2
                        },
                        new
                        {
                            ApplicationFlagDetailId = 3,
                            ApplicationFlagHeaderId = 1,
                            ApplicationFlagTypeId = (byte)1,
                            FlagNameAr = "المستوى الثاني بالعربية",
                            FlagNameEn = "Second Level Ar",
                            FlagValue = "المستوى الثاني",
                            Order = (short)3
                        },
                        new
                        {
                            ApplicationFlagDetailId = 4,
                            ApplicationFlagHeaderId = 1,
                            ApplicationFlagTypeId = (byte)1,
                            FlagNameAr = "المستوى الثاني بالانجليزية",
                            FlagNameEn = "Second Level En",
                            FlagValue = "Second Level",
                            Order = (short)4
                        },
                        new
                        {
                            ApplicationFlagDetailId = 5,
                            ApplicationFlagHeaderId = 1,
                            ApplicationFlagTypeId = (byte)1,
                            FlagNameAr = "المستوى الثالث بالعربية",
                            FlagNameEn = "Third Level Ar",
                            FlagValue = "المستوى الثالث",
                            Order = (short)5
                        },
                        new
                        {
                            ApplicationFlagDetailId = 6,
                            ApplicationFlagHeaderId = 1,
                            ApplicationFlagTypeId = (byte)1,
                            FlagNameAr = "المستوى الثالث بالانجليزية",
                            FlagNameEn = "Third Level En",
                            FlagValue = "Third Level",
                            Order = (short)6
                        },
                        new
                        {
                            ApplicationFlagDetailId = 7,
                            ApplicationFlagHeaderId = 1,
                            ApplicationFlagTypeId = (byte)1,
                            FlagNameAr = "المستوى الرابع بالعربية",
                            FlagNameEn = "Forth Level Ar",
                            FlagValue = "المستوى الرابع",
                            Order = (short)7
                        },
                        new
                        {
                            ApplicationFlagDetailId = 8,
                            ApplicationFlagHeaderId = 1,
                            ApplicationFlagTypeId = (byte)1,
                            FlagNameAr = "المستوى الرابع بالانجليزية",
                            FlagNameEn = "Forth Level En",
                            FlagValue = "Forth Level",
                            Order = (short)8
                        },
                        new
                        {
                            ApplicationFlagDetailId = 9,
                            ApplicationFlagHeaderId = 1,
                            ApplicationFlagTypeId = (byte)1,
                            FlagNameAr = "المستوى الخامس بالعربية",
                            FlagNameEn = "Fifth Level Ar",
                            FlagValue = "المستوى الخامس",
                            Order = (short)9
                        },
                        new
                        {
                            ApplicationFlagDetailId = 10,
                            ApplicationFlagHeaderId = 1,
                            ApplicationFlagTypeId = (byte)1,
                            FlagNameAr = "المستوى الخامس بالانجليزية",
                            FlagNameEn = "Fifth Level En",
                            FlagValue = "Fifth Level",
                            Order = (short)10
                        },
                        new
                        {
                            ApplicationFlagDetailId = 11,
                            ApplicationFlagHeaderId = 2,
                            ApplicationFlagTypeId = (byte)2,
                            FlagNameAr = "عدد خانات التسلسل للحسابات العامة",
                            FlagNameEn = "Number of Code Width for Main Accounts",
                            FlagValue = "2",
                            Order = (short)1
                        },
                        new
                        {
                            ApplicationFlagDetailId = 12,
                            ApplicationFlagHeaderId = 2,
                            ApplicationFlagTypeId = (byte)2,
                            FlagNameAr = "عدد خانات التسلسل للحسابات الجزئية",
                            FlagNameEn = "Number of Code Width for Individual Accounts",
                            FlagValue = "4",
                            Order = (short)2
                        },
                        new
                        {
                            ApplicationFlagDetailId = 13,
                            ApplicationFlagHeaderId = 3,
                            ApplicationFlagTypeId = (byte)2,
                            FlagNameAr = "عدد خانات التسلسل للمراكز العامة",
                            FlagNameEn = "Number of Code Width for Main Centers",
                            FlagValue = "2",
                            Order = (short)1
                        },
                        new
                        {
                            ApplicationFlagDetailId = 14,
                            ApplicationFlagHeaderId = 3,
                            ApplicationFlagTypeId = (byte)2,
                            FlagNameAr = "عدد خانات التسلسل للمراكز الجزئية",
                            FlagNameEn = "Number of Code Width for Individual Centers",
                            FlagValue = "4",
                            Order = (short)2
                        },
                        new
                        {
                            ApplicationFlagDetailId = 15,
                            ApplicationFlagHeaderId = 4,
                            ApplicationFlagTypeId = (byte)7,
                            FlagNameAr = "طريقة احتساب سعر التكلفة للصنف",
                            FlagNameEn = "Item Cost Price Calculation Method",
                            FlagValue = "1",
                            Order = (short)1
                        },
                        new
                        {
                            ApplicationFlagDetailId = 16,
                            ApplicationFlagHeaderId = 5,
                            ApplicationFlagTypeId = (byte)6,
                            FlagNameAr = "الأسعار تشمل ضريبة القيمة المضافة",
                            FlagNameEn = "Prices VAT Inclusive",
                            FlagValue = "0",
                            Order = (short)1
                        },
                        new
                        {
                            ApplicationFlagDetailId = 17,
                            ApplicationFlagHeaderId = 6,
                            ApplicationFlagTypeId = (byte)6,
                            FlagNameAr = "فصل تسلسل النقدي عن الآجل",
                            FlagNameEn = "Separating the sequence of cash from credit",
                            FlagValue = "1",
                            Order = (short)1
                        },
                        new
                        {
                            ApplicationFlagDetailId = 18,
                            ApplicationFlagHeaderId = 6,
                            ApplicationFlagTypeId = (byte)2,
                            FlagNameAr = "عدد الأيام لإرتجاع الفاتورة",
                            FlagNameEn = "No of days to return the invoice",
                            FlagValue = "0",
                            Order = (short)2
                        },
                        new
                        {
                            ApplicationFlagDetailId = 19,
                            ApplicationFlagHeaderId = 7,
                            ApplicationFlagTypeId = (byte)6,
                            FlagNameAr = "فصل تسلسل النقدي عن الآجل",
                            FlagNameEn = "Separating the sequence of cash from credit",
                            FlagValue = "1",
                            Order = (short)1
                        },
                        new
                        {
                            ApplicationFlagDetailId = 20,
                            ApplicationFlagHeaderId = 8,
                            ApplicationFlagTypeId = (byte)2,
                            FlagNameAr = "عدد أيام صلاحية العرض",
                            FlagNameEn = "No of days the quotation is valid",
                            FlagValue = "0",
                            Order = (short)1
                        },
                        new
                        {
                            ApplicationFlagDetailId = 21,
                            ApplicationFlagHeaderId = 9,
                            ApplicationFlagTypeId = (byte)6,
                            FlagNameAr = "فصل تسلسل النقدي عن الآجل",
                            FlagNameEn = "Separating the sequence of cash from credit",
                            FlagValue = "1",
                            Order = (short)1
                        },
                        new
                        {
                            ApplicationFlagDetailId = 22,
                            ApplicationFlagHeaderId = 9,
                            ApplicationFlagTypeId = (byte)2,
                            FlagNameAr = "عدد الأيام لإرتجاع الفاتورة",
                            FlagNameEn = "No of days to return the invoice",
                            FlagValue = "0",
                            Order = (short)3
                        },
                        new
                        {
                            ApplicationFlagDetailId = 23,
                            ApplicationFlagHeaderId = 10,
                            ApplicationFlagTypeId = (byte)6,
                            FlagNameAr = "فصل تسلسل النقدي عن الآجل",
                            FlagNameEn = "Separating the sequence of cash from credit",
                            FlagValue = "1",
                            Order = (short)1
                        },
                        new
                        {
                            ApplicationFlagDetailId = 24,
                            ApplicationFlagHeaderId = 9,
                            ApplicationFlagTypeId = (byte)6,
                            FlagNameAr = "فصل تسلسل الفواتير لكل مندوب",
                            FlagNameEn = "Separating the sequence of invoices for each seller",
                            FlagValue = "0",
                            Order = (short)2
                        },
                        new
                        {
                            ApplicationFlagDetailId = 25,
                            ApplicationFlagHeaderId = 11,
                            ApplicationFlagTypeId = (byte)6,
                            FlagNameAr = "عرض الأصناف مجمعة",
                            FlagNameEn = "Show Items Grouped",
                            FlagValue = "0",
                            Order = (short)2
                        },
                        new
                        {
                            ApplicationFlagDetailId = 26,
                            ApplicationFlagHeaderId = 11,
                            ApplicationFlagTypeId = (byte)6,
                            FlagNameAr = "فصل تسلسل أرقام السندات لكل سنة",
                            FlagNameEn = "Separating the sequence of documents every year",
                            FlagValue = "1",
                            Order = (short)1
                        },
                        new
                        {
                            ApplicationFlagDetailId = 27,
                            ApplicationFlagHeaderId = 12,
                            ApplicationFlagTypeId = (byte)1,
                            FlagNameAr = "اسم المؤسسة بالعربية",
                            FlagNameEn = "Name of the institution Ar",
                            FlagValue = "",
                            Order = (short)1
                        },
                        new
                        {
                            ApplicationFlagDetailId = 28,
                            ApplicationFlagHeaderId = 12,
                            ApplicationFlagTypeId = (byte)1,
                            FlagNameAr = "اسم المؤسسة بالانجليزية",
                            FlagNameEn = "Name of the institution En",
                            FlagValue = "",
                            Order = (short)2
                        },
                        new
                        {
                            ApplicationFlagDetailId = 29,
                            ApplicationFlagHeaderId = 12,
                            ApplicationFlagTypeId = (byte)1,
                            FlagNameAr = "اسم آخر أسفل اسم المؤسسة بالعربية",
                            FlagNameEn = "Another name below the name of the institution Ar",
                            FlagValue = "",
                            Order = (short)3
                        },
                        new
                        {
                            ApplicationFlagDetailId = 30,
                            ApplicationFlagHeaderId = 12,
                            ApplicationFlagTypeId = (byte)1,
                            FlagNameAr = "اسم آخر أسفل اسم المؤسسة بالانجليزية",
                            FlagNameEn = "Another name below the name of the institution En",
                            FlagValue = "",
                            Order = (short)4
                        },
                        new
                        {
                            ApplicationFlagDetailId = 31,
                            ApplicationFlagHeaderId = 12,
                            ApplicationFlagTypeId = (byte)1,
                            FlagNameAr = "عنوان 1 بالعربية",
                            FlagNameEn = "Address 1 Ar",
                            FlagValue = "",
                            Order = (short)5
                        },
                        new
                        {
                            ApplicationFlagDetailId = 32,
                            ApplicationFlagHeaderId = 12,
                            ApplicationFlagTypeId = (byte)1,
                            FlagNameAr = "عنوان 1 بالانجليزية",
                            FlagNameEn = "Address 1 En",
                            FlagValue = "",
                            Order = (short)6
                        },
                        new
                        {
                            ApplicationFlagDetailId = 33,
                            ApplicationFlagHeaderId = 12,
                            ApplicationFlagTypeId = (byte)1,
                            FlagNameAr = "عنوان 2 بالعربية",
                            FlagNameEn = "Address 2 Ar",
                            FlagValue = "",
                            Order = (short)7
                        },
                        new
                        {
                            ApplicationFlagDetailId = 34,
                            ApplicationFlagHeaderId = 12,
                            ApplicationFlagTypeId = (byte)1,
                            FlagNameAr = "عنوان 2 بالانجليزية",
                            FlagNameEn = "Address 2 En",
                            FlagValue = "",
                            Order = (short)8
                        },
                        new
                        {
                            ApplicationFlagDetailId = 35,
                            ApplicationFlagHeaderId = 12,
                            ApplicationFlagTypeId = (byte)1,
                            FlagNameAr = "عنوان 3 بالعربية",
                            FlagNameEn = "Address 3 Ar",
                            FlagValue = "",
                            Order = (short)9
                        },
                        new
                        {
                            ApplicationFlagDetailId = 36,
                            ApplicationFlagHeaderId = 12,
                            ApplicationFlagTypeId = (byte)1,
                            FlagNameAr = "عنوان 3 بالانجليزية",
                            FlagNameEn = "Address 3 En",
                            FlagValue = "",
                            Order = (short)10
                        },
                        new
                        {
                            ApplicationFlagDetailId = 37,
                            ApplicationFlagHeaderId = 13,
                            ApplicationFlagTypeId = (byte)1,
                            FlagNameAr = "ملاحظات علوية في أول صفحة فقط بالعربية",
                            FlagNameEn = "Top notes on first page only Ar",
                            FlagValue = "",
                            Order = (short)11
                        },
                        new
                        {
                            ApplicationFlagDetailId = 38,
                            ApplicationFlagHeaderId = 13,
                            ApplicationFlagTypeId = (byte)1,
                            FlagNameAr = "ملاحظات علوية في أول صفحة فقط بالانجليزية",
                            FlagNameEn = "Top notes on first page only En",
                            FlagValue = "",
                            Order = (short)12
                        },
                        new
                        {
                            ApplicationFlagDetailId = 39,
                            ApplicationFlagHeaderId = 13,
                            ApplicationFlagTypeId = (byte)1,
                            FlagNameAr = "ملاحظات سفلية في آخر صفحة فقط بالعربية",
                            FlagNameEn = "Footnotes on last page only Ar",
                            FlagValue = "",
                            Order = (short)13
                        },
                        new
                        {
                            ApplicationFlagDetailId = 40,
                            ApplicationFlagHeaderId = 13,
                            ApplicationFlagTypeId = (byte)1,
                            FlagNameAr = "ملاحظات سفلية في آخر صفحة فقط بالانجليزية",
                            FlagNameEn = "Footnotes on last page only En",
                            FlagValue = "",
                            Order = (short)14
                        },
                        new
                        {
                            ApplicationFlagDetailId = 41,
                            ApplicationFlagHeaderId = 13,
                            ApplicationFlagTypeId = (byte)1,
                            FlagNameAr = "ملاحظات علوية متكررة في كل الصفحات بالعربية",
                            FlagNameEn = "Repeated top notes on all pages Ar",
                            FlagValue = "",
                            Order = (short)15
                        },
                        new
                        {
                            ApplicationFlagDetailId = 42,
                            ApplicationFlagHeaderId = 13,
                            ApplicationFlagTypeId = (byte)1,
                            FlagNameAr = "ملاحظات علوية متكررة في كل الصفحات بالانجليزية",
                            FlagNameEn = "Repeated top notes on all pages En",
                            FlagValue = "",
                            Order = (short)16
                        },
                        new
                        {
                            ApplicationFlagDetailId = 43,
                            ApplicationFlagHeaderId = 13,
                            ApplicationFlagTypeId = (byte)1,
                            FlagNameAr = "ملاحظات سفلية متكررة في كل الصفحات بالعربية",
                            FlagNameEn = "Repeated footnotes on all pages Ar",
                            FlagValue = "",
                            Order = (short)17
                        },
                        new
                        {
                            ApplicationFlagDetailId = 44,
                            ApplicationFlagHeaderId = 13,
                            ApplicationFlagTypeId = (byte)1,
                            FlagNameAr = "ملاحظات سفلية متكررة في كل الصفحات بالانجليزية",
                            FlagNameEn = "Repeated footnotes on all pages En",
                            FlagValue = "",
                            Order = (short)18
                        },
                        new
                        {
                            ApplicationFlagDetailId = 45,
                            ApplicationFlagHeaderId = 14,
                            ApplicationFlagTypeId = (byte)6,
                            FlagNameAr = "طباعة اسم النشاط والموقع؟",
                            FlagNameEn = "Print Business Name And Store?",
                            FlagValue = "1",
                            Order = (short)1
                        },
                        new
                        {
                            ApplicationFlagDetailId = 46,
                            ApplicationFlagHeaderId = 14,
                            ApplicationFlagTypeId = (byte)6,
                            FlagNameAr = "طباعة اسم المستخدم؟",
                            FlagNameEn = "Print User Name?",
                            FlagValue = "0",
                            Order = (short)2
                        },
                        new
                        {
                            ApplicationFlagDetailId = 47,
                            ApplicationFlagHeaderId = 14,
                            ApplicationFlagTypeId = (byte)6,
                            FlagNameAr = "طباعة تاريخ اليوم؟",
                            FlagNameEn = "Print datetime?",
                            FlagValue = "1",
                            Order = (short)3
                        },
                        new
                        {
                            ApplicationFlagDetailId = 48,
                            ApplicationFlagHeaderId = 15,
                            ApplicationFlagTypeId = (byte)2,
                            FlagNameAr = "حجم الخط لاسم المؤسسة",
                            FlagNameEn = "Font size for the institution name",
                            FlagValue = "16",
                            Order = (short)1
                        },
                        new
                        {
                            ApplicationFlagDetailId = 49,
                            ApplicationFlagHeaderId = 15,
                            ApplicationFlagTypeId = (byte)2,
                            FlagNameAr = "حجم الخط للاسم الآخر للمؤسسة",
                            FlagNameEn = "Font size for other name of the institution",
                            FlagValue = "14",
                            Order = (short)2
                        },
                        new
                        {
                            ApplicationFlagDetailId = 50,
                            ApplicationFlagHeaderId = 15,
                            ApplicationFlagTypeId = (byte)2,
                            FlagNameAr = "حجم الخط للنشاط والموقع",
                            FlagNameEn = "Font size for business and store name",
                            FlagValue = "14",
                            Order = (short)3
                        },
                        new
                        {
                            ApplicationFlagDetailId = 51,
                            ApplicationFlagHeaderId = 15,
                            ApplicationFlagTypeId = (byte)2,
                            FlagNameAr = "حجم الخط للعنوان الأول",
                            FlagNameEn = "Font size for first address",
                            FlagValue = "14",
                            Order = (short)4
                        },
                        new
                        {
                            ApplicationFlagDetailId = 52,
                            ApplicationFlagHeaderId = 15,
                            ApplicationFlagTypeId = (byte)2,
                            FlagNameAr = "حجم الخط للعنوان الثاني",
                            FlagNameEn = "Font size for second address",
                            FlagValue = "14",
                            Order = (short)5
                        },
                        new
                        {
                            ApplicationFlagDetailId = 53,
                            ApplicationFlagHeaderId = 15,
                            ApplicationFlagTypeId = (byte)2,
                            FlagNameAr = "حجم الخط للعنوان الثالث",
                            FlagNameEn = "Font size for third address",
                            FlagValue = "14",
                            Order = (short)6
                        },
                        new
                        {
                            ApplicationFlagDetailId = 54,
                            ApplicationFlagHeaderId = 15,
                            ApplicationFlagTypeId = (byte)2,
                            FlagNameAr = "حجم الخط لعنوان التقرير",
                            FlagNameEn = "Font size for report title",
                            FlagValue = "16",
                            Order = (short)7
                        },
                        new
                        {
                            ApplicationFlagDetailId = 55,
                            ApplicationFlagHeaderId = 15,
                            ApplicationFlagTypeId = (byte)2,
                            FlagNameAr = "حجم الخط للجدول",
                            FlagNameEn = "Font size for table",
                            FlagValue = "12",
                            Order = (short)9
                        },
                        new
                        {
                            ApplicationFlagDetailId = 56,
                            ApplicationFlagHeaderId = 15,
                            ApplicationFlagTypeId = (byte)2,
                            FlagNameAr = "حجم الخط للملاحظات العلوية الثابتة",
                            FlagNameEn = "Font size for fixed top notes",
                            FlagValue = "12",
                            Order = (short)10
                        },
                        new
                        {
                            ApplicationFlagDetailId = 57,
                            ApplicationFlagHeaderId = 15,
                            ApplicationFlagTypeId = (byte)2,
                            FlagNameAr = "حجم الخط للملاحظات العلوية المتكررة",
                            FlagNameEn = "Font size for repeated top notes",
                            FlagValue = "12",
                            Order = (short)11
                        },
                        new
                        {
                            ApplicationFlagDetailId = 58,
                            ApplicationFlagHeaderId = 15,
                            ApplicationFlagTypeId = (byte)2,
                            FlagNameAr = "حجم الخط للملاحظات السفلية الثابتة",
                            FlagNameEn = "Font size for fixed footnotes",
                            FlagValue = "12",
                            Order = (short)12
                        },
                        new
                        {
                            ApplicationFlagDetailId = 59,
                            ApplicationFlagHeaderId = 15,
                            ApplicationFlagTypeId = (byte)2,
                            FlagNameAr = "حجم الخط للملاحظات السفلية المتكررة",
                            FlagNameEn = "Font size for repeated footnotes",
                            FlagValue = "12",
                            Order = (short)13
                        },
                        new
                        {
                            ApplicationFlagDetailId = 60,
                            ApplicationFlagHeaderId = 16,
                            ApplicationFlagTypeId = (byte)2,
                            FlagNameAr = "الأرقام في الجدول",
                            FlagNameEn = "Numbers in grid",
                            FlagValue = "2",
                            Order = (short)1
                        },
                        new
                        {
                            ApplicationFlagDetailId = 61,
                            ApplicationFlagHeaderId = 16,
                            ApplicationFlagTypeId = (byte)2,
                            FlagNameAr = "الأرقام في المجاميع",
                            FlagNameEn = "Numbers in summation",
                            FlagValue = "2",
                            Order = (short)2
                        },
                        new
                        {
                            ApplicationFlagDetailId = 62,
                            ApplicationFlagHeaderId = 17,
                            ApplicationFlagTypeId = (byte)7,
                            FlagNameAr = "هيئة الورقة أثناء الطباعة",
                            FlagNameEn = "Paper Form During Printing",
                            FlagValue = "1",
                            Order = (short)1
                        },
                        new
                        {
                            ApplicationFlagDetailId = 63,
                            ApplicationFlagHeaderId = 18,
                            ApplicationFlagTypeId = (byte)8,
                            FlagNameAr = "شعار المؤسسة",
                            FlagNameEn = "Institution Logo",
                            FlagValue = "",
                            Order = (short)1
                        },
                        new
                        {
                            ApplicationFlagDetailId = 64,
                            ApplicationFlagHeaderId = 15,
                            ApplicationFlagTypeId = (byte)2,
                            FlagNameAr = "حجم الخط لفترة التقرير",
                            FlagNameEn = "Font size for report period",
                            FlagValue = "14",
                            Order = (short)8
                        },
                        new
                        {
                            ApplicationFlagDetailId = 65,
                            ApplicationFlagHeaderId = 19,
                            ApplicationFlagTypeId = (byte)2,
                            FlagNameAr = "الهامش العلوي",
                            FlagNameEn = "Top Margin",
                            FlagValue = "40",
                            Order = (short)1
                        },
                        new
                        {
                            ApplicationFlagDetailId = 66,
                            ApplicationFlagHeaderId = 19,
                            ApplicationFlagTypeId = (byte)2,
                            FlagNameAr = "هامش الجانب الأيمن",
                            FlagNameEn = "Right Margin",
                            FlagValue = "10",
                            Order = (short)2
                        },
                        new
                        {
                            ApplicationFlagDetailId = 67,
                            ApplicationFlagHeaderId = 19,
                            ApplicationFlagTypeId = (byte)2,
                            FlagNameAr = "الهامش السفلي",
                            FlagNameEn = "Bottom Margin",
                            FlagValue = "40",
                            Order = (short)3
                        },
                        new
                        {
                            ApplicationFlagDetailId = 68,
                            ApplicationFlagHeaderId = 19,
                            ApplicationFlagTypeId = (byte)2,
                            FlagNameAr = "هامش الجانب الأيسر",
                            FlagNameEn = "Left Margin",
                            FlagValue = "10",
                            Order = (short)4
                        },
                        new
                        {
                            ApplicationFlagDetailId = 69,
                            ApplicationFlagHeaderId = 14,
                            ApplicationFlagTypeId = (byte)6,
                            FlagNameAr = "طباعة شعار المؤسسة؟",
                            FlagNameEn = "Print Institution Logo?",
                            FlagValue = "1",
                            Order = (short)4
                        },
                        new
                        {
                            ApplicationFlagDetailId = 70,
                            ApplicationFlagHeaderId = 20,
                            ApplicationFlagTypeId = (byte)1,
                            FlagNameAr = "اسم المؤسسة بالعربية",
                            FlagNameEn = "Institution Name Ar",
                            FlagValue = "",
                            Order = (short)1
                        },
                        new
                        {
                            ApplicationFlagDetailId = 71,
                            ApplicationFlagHeaderId = 20,
                            ApplicationFlagTypeId = (byte)1,
                            FlagNameAr = "اسم المؤسسة بالانجليزية",
                            FlagNameEn = "Institution Name En",
                            FlagValue = "",
                            Order = (short)2
                        },
                        new
                        {
                            ApplicationFlagDetailId = 72,
                            ApplicationFlagHeaderId = 20,
                            ApplicationFlagTypeId = (byte)1,
                            FlagNameAr = "عنوان المؤسسة بالعربية",
                            FlagNameEn = "Institution address Ar",
                            FlagValue = "",
                            Order = (short)3
                        },
                        new
                        {
                            ApplicationFlagDetailId = 73,
                            ApplicationFlagHeaderId = 20,
                            ApplicationFlagTypeId = (byte)1,
                            FlagNameAr = "عنوان المؤسسة بالانجليزية",
                            FlagNameEn = "Institution address En",
                            FlagValue = "",
                            Order = (short)4
                        },
                        new
                        {
                            ApplicationFlagDetailId = 74,
                            ApplicationFlagHeaderId = 20,
                            ApplicationFlagTypeId = (byte)1,
                            FlagNameAr = "بيانات التواصل للمؤسسة بالعربية",
                            FlagNameEn = "Institution contact info Ar",
                            FlagValue = "",
                            Order = (short)5
                        },
                        new
                        {
                            ApplicationFlagDetailId = 75,
                            ApplicationFlagHeaderId = 20,
                            ApplicationFlagTypeId = (byte)1,
                            FlagNameAr = "بيانات التواصل للمؤسسة بالانجليزية",
                            FlagNameEn = "Institution contact info En",
                            FlagValue = "",
                            Order = (short)6
                        },
                        new
                        {
                            ApplicationFlagDetailId = 76,
                            ApplicationFlagHeaderId = 20,
                            ApplicationFlagTypeId = (byte)1,
                            FlagNameAr = "اسم المتجر بالعربية",
                            FlagNameEn = "Store Name Ar",
                            FlagValue = "",
                            Order = (short)7
                        },
                        new
                        {
                            ApplicationFlagDetailId = 77,
                            ApplicationFlagHeaderId = 20,
                            ApplicationFlagTypeId = (byte)1,
                            FlagNameAr = "اسم المتجر بالانجليزية",
                            FlagNameEn = "Store Name En",
                            FlagValue = "",
                            Order = (short)8
                        },
                        new
                        {
                            ApplicationFlagDetailId = 78,
                            ApplicationFlagHeaderId = 20,
                            ApplicationFlagTypeId = (byte)1,
                            FlagNameAr = "عنوان المتجر بالعربية",
                            FlagNameEn = "Store Address Ar",
                            FlagValue = "",
                            Order = (short)9
                        },
                        new
                        {
                            ApplicationFlagDetailId = 79,
                            ApplicationFlagHeaderId = 20,
                            ApplicationFlagTypeId = (byte)1,
                            FlagNameAr = "عنوان المتجر بالانجليزية",
                            FlagNameEn = "Store Address En",
                            FlagValue = "",
                            Order = (short)10
                        },
                        new
                        {
                            ApplicationFlagDetailId = 80,
                            ApplicationFlagHeaderId = 20,
                            ApplicationFlagTypeId = (byte)1,
                            FlagNameAr = "الرقم الضريبي",
                            FlagNameEn = "VAT no",
                            FlagValue = "",
                            Order = (short)11
                        },
                        new
                        {
                            ApplicationFlagDetailId = 81,
                            ApplicationFlagHeaderId = 21,
                            ApplicationFlagTypeId = (byte)6,
                            FlagNameAr = "عرض طريقة التحصيل؟",
                            FlagNameEn = "Show collection method?",
                            FlagValue = "1",
                            Order = (short)1
                        },
                        new
                        {
                            ApplicationFlagDetailId = 82,
                            ApplicationFlagHeaderId = 21,
                            ApplicationFlagTypeId = (byte)6,
                            FlagNameAr = "عرض تاريخ الاستحقاق؟",
                            FlagNameEn = "Show due date?",
                            FlagValue = "1",
                            Order = (short)2
                        },
                        new
                        {
                            ApplicationFlagDetailId = 83,
                            ApplicationFlagHeaderId = 21,
                            ApplicationFlagTypeId = (byte)6,
                            FlagNameAr = "عرض وقت الطباعة؟",
                            FlagNameEn = "Show print time?",
                            FlagValue = "1",
                            Order = (short)2
                        },
                        new
                        {
                            ApplicationFlagDetailId = 84,
                            ApplicationFlagHeaderId = 22,
                            ApplicationFlagTypeId = (byte)2,
                            FlagNameAr = "الأرقام في الجدول",
                            FlagNameEn = "Numbers in grid",
                            FlagValue = "2",
                            Order = (short)1
                        },
                        new
                        {
                            ApplicationFlagDetailId = 85,
                            ApplicationFlagHeaderId = 22,
                            ApplicationFlagTypeId = (byte)2,
                            FlagNameAr = "الأرقام في المجاميع",
                            FlagNameEn = "Numbers in summation",
                            FlagValue = "2",
                            Order = (short)2
                        },
                        new
                        {
                            ApplicationFlagDetailId = 86,
                            ApplicationFlagHeaderId = 23,
                            ApplicationFlagTypeId = (byte)8,
                            FlagNameAr = "شعار المؤسسة",
                            FlagNameEn = "Institution Logo",
                            FlagValue = "",
                            Order = (short)1
                        },
                        new
                        {
                            ApplicationFlagDetailId = 87,
                            ApplicationFlagHeaderId = 24,
                            ApplicationFlagTypeId = (byte)1,
                            FlagNameAr = "ملاحظة أساسية 1",
                            FlagNameEn = "Basic Note 1",
                            FlagValue = "",
                            Order = (short)1
                        },
                        new
                        {
                            ApplicationFlagDetailId = 88,
                            ApplicationFlagHeaderId = 24,
                            ApplicationFlagTypeId = (byte)1,
                            FlagNameAr = "ملاحظة أساسية 2",
                            FlagNameEn = "Basic Note 2",
                            FlagValue = "",
                            Order = (short)2
                        },
                        new
                        {
                            ApplicationFlagDetailId = 89,
                            ApplicationFlagHeaderId = 24,
                            ApplicationFlagTypeId = (byte)1,
                            FlagNameAr = "ملاحظة أساسية 3",
                            FlagNameEn = "Basic Note 3",
                            FlagValue = "",
                            Order = (short)3
                        },
                        new
                        {
                            ApplicationFlagDetailId = 90,
                            ApplicationFlagHeaderId = 24,
                            ApplicationFlagTypeId = (byte)1,
                            FlagNameAr = "ملاحظة جانبية 1",
                            FlagNameEn = "Side Note 1",
                            FlagValue = "",
                            Order = (short)4
                        },
                        new
                        {
                            ApplicationFlagDetailId = 91,
                            ApplicationFlagHeaderId = 24,
                            ApplicationFlagTypeId = (byte)1,
                            FlagNameAr = "ملاحظة جانبية 2",
                            FlagNameEn = "Side Note 2",
                            FlagValue = "",
                            Order = (short)5
                        },
                        new
                        {
                            ApplicationFlagDetailId = 92,
                            ApplicationFlagHeaderId = 24,
                            ApplicationFlagTypeId = (byte)1,
                            FlagNameAr = "ملاحظة جانبية 3",
                            FlagNameEn = "Side Note 3",
                            FlagValue = "",
                            Order = (short)6
                        },
                        new
                        {
                            ApplicationFlagDetailId = 93,
                            ApplicationFlagHeaderId = 24,
                            ApplicationFlagTypeId = (byte)1,
                            FlagNameAr = "ملاحظة جانبية 4",
                            FlagNameEn = "Side Note 4",
                            FlagValue = "",
                            Order = (short)7
                        },
                        new
                        {
                            ApplicationFlagDetailId = 94,
                            ApplicationFlagHeaderId = 24,
                            ApplicationFlagTypeId = (byte)1,
                            FlagNameAr = "ملاحظة جانبية 5",
                            FlagNameEn = "Side Note 5",
                            FlagValue = "",
                            Order = (short)8
                        },
                        new
                        {
                            ApplicationFlagDetailId = 95,
                            ApplicationFlagHeaderId = 24,
                            ApplicationFlagTypeId = (byte)1,
                            FlagNameAr = "ملاحظة جانبية 6",
                            FlagNameEn = "Side Note 6",
                            FlagValue = "",
                            Order = (short)9
                        },
                        new
                        {
                            ApplicationFlagDetailId = 96,
                            ApplicationFlagHeaderId = 24,
                            ApplicationFlagTypeId = (byte)1,
                            FlagNameAr = "ملاحظة جانبية 7",
                            FlagNameEn = "Side Note 7",
                            FlagValue = "",
                            Order = (short)10
                        },
                        new
                        {
                            ApplicationFlagDetailId = 97,
                            ApplicationFlagHeaderId = 24,
                            ApplicationFlagTypeId = (byte)1,
                            FlagNameAr = "ملاحظة جانبية 8",
                            FlagNameEn = "Side Note 8",
                            FlagValue = "",
                            Order = (short)11
                        },
                        new
                        {
                            ApplicationFlagDetailId = 98,
                            ApplicationFlagHeaderId = 24,
                            ApplicationFlagTypeId = (byte)1,
                            FlagNameAr = "ماحظة جانبية 9",
                            FlagNameEn = "Side Note 9",
                            FlagValue = "",
                            Order = (short)12
                        },
                        new
                        {
                            ApplicationFlagDetailId = 99,
                            ApplicationFlagHeaderId = 24,
                            ApplicationFlagTypeId = (byte)1,
                            FlagNameAr = "ملاحظة جانبية 10",
                            FlagNameEn = "Side Note 10",
                            FlagValue = "",
                            Order = (short)13
                        },
                        new
                        {
                            ApplicationFlagDetailId = 100,
                            ApplicationFlagHeaderId = 24,
                            ApplicationFlagTypeId = (byte)1,
                            FlagNameAr = "سطر ختامي 1",
                            FlagNameEn = "Closing line 1",
                            FlagValue = "",
                            Order = (short)14
                        },
                        new
                        {
                            ApplicationFlagDetailId = 101,
                            ApplicationFlagHeaderId = 24,
                            ApplicationFlagTypeId = (byte)1,
                            FlagNameAr = "سطر ختامي 2",
                            FlagNameEn = "Closing line 2",
                            FlagValue = "",
                            Order = (short)15
                        });
                });

            modelBuilder.Entity("Shared.CoreOne.Models.Domain.Settings.ApplicationFlagDetailCompany", b =>
                {
                    b.Property<int>("ApplicationFlagDetailCompanyId")
                        .HasColumnType("int")
                        .HasColumnOrder(1);

                    b.Property<int>("ApplicationFlagDetailId")
                        .HasColumnType("int")
                        .HasColumnOrder(3);

                    b.Property<int>("CompanyId")
                        .HasColumnType("int")
                        .HasColumnOrder(2);

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnOrder(200);

                    b.Property<string>("FlagValue")
                        .HasColumnType("longtext")
                        .HasColumnOrder(4);

                    b.Property<bool?>("Hide")
                        .HasColumnType("tinyint(1)")
                        .HasColumnOrder(206);

                    b.Property<string>("IpAddressCreated")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnOrder(204);

                    b.Property<string>("IpAddressModified")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnOrder(205);

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnOrder(201);

                    b.Property<string>("UserNameCreated")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnOrder(202);

                    b.Property<string>("UserNameModified")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnOrder(203);

                    b.HasKey("ApplicationFlagDetailCompanyId");

                    b.HasIndex("ApplicationFlagDetailId");

                    b.HasIndex("CompanyId");

                    b.ToTable("ApplicationFlagDetailCompanies");
                });

            modelBuilder.Entity("Shared.CoreOne.Models.Domain.Settings.ApplicationFlagDetailImage", b =>
                {
                    b.Property<int>("ApplicationFlagDetailImageId")
                        .HasColumnType("int")
                        .HasColumnOrder(1);

                    b.Property<int>("ApplicationFlagDetailCompanyId")
                        .HasColumnType("int")
                        .HasColumnOrder(2);

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnOrder(200);

                    b.Property<string>("FileName")
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)")
                        .HasColumnOrder(3);

                    b.Property<string>("FileType")
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)")
                        .HasColumnOrder(4);

                    b.Property<bool?>("Hide")
                        .HasColumnType("tinyint(1)")
                        .HasColumnOrder(206);

                    b.Property<byte[]>("Image")
                        .HasColumnType("longblob")
                        .HasColumnOrder(5);

                    b.Property<string>("IpAddressCreated")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnOrder(204);

                    b.Property<string>("IpAddressModified")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnOrder(205);

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnOrder(201);

                    b.Property<string>("UserNameCreated")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnOrder(202);

                    b.Property<string>("UserNameModified")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnOrder(203);

                    b.HasKey("ApplicationFlagDetailImageId");

                    b.HasIndex("ApplicationFlagDetailCompanyId");

                    b.ToTable("ApplicationFlagDetailImages");
                });

            modelBuilder.Entity("Shared.CoreOne.Models.Domain.Settings.ApplicationFlagDetailSelect", b =>
                {
                    b.Property<int>("ApplicationFlagDetailSelectId")
                        .HasColumnType("int")
                        .HasColumnOrder(1);

                    b.Property<int>("ApplicationFlagDetailId")
                        .HasColumnType("int")
                        .HasColumnOrder(2);

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnOrder(200);

                    b.Property<bool?>("Hide")
                        .HasColumnType("tinyint(1)")
                        .HasColumnOrder(206);

                    b.Property<string>("IpAddressCreated")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnOrder(204);

                    b.Property<string>("IpAddressModified")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnOrder(205);

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnOrder(201);

                    b.Property<short>("Order")
                        .HasColumnType("smallint")
                        .HasColumnOrder(6);

                    b.Property<short>("SelectId")
                        .HasColumnType("smallint")
                        .HasColumnOrder(3);

                    b.Property<string>("SelectNameAr")
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)")
                        .HasColumnOrder(4);

                    b.Property<string>("SelectNameEn")
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)")
                        .HasColumnOrder(5);

                    b.Property<string>("UserNameCreated")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnOrder(202);

                    b.Property<string>("UserNameModified")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnOrder(203);

                    b.HasKey("ApplicationFlagDetailSelectId");

                    b.HasIndex("ApplicationFlagDetailId");

                    b.ToTable("ApplicationFlagDetailSelects");

                    b.HasData(
                        new
                        {
                            ApplicationFlagDetailSelectId = 1,
                            ApplicationFlagDetailId = 15,
                            Order = (short)1,
                            SelectId = (short)1,
                            SelectNameAr = "المتوسط الفعلي",
                            SelectNameEn = "Actual average"
                        },
                        new
                        {
                            ApplicationFlagDetailSelectId = 2,
                            ApplicationFlagDetailId = 15,
                            Order = (short)2,
                            SelectId = (short)2,
                            SelectNameAr = "آخر سعر شراء",
                            SelectNameEn = "last Purchasing Price"
                        },
                        new
                        {
                            ApplicationFlagDetailSelectId = 3,
                            ApplicationFlagDetailId = 15,
                            Order = (short)3,
                            SelectId = (short)3,
                            SelectNameAr = "آخر سعر تكلفة",
                            SelectNameEn = "last Cost Price"
                        },
                        new
                        {
                            ApplicationFlagDetailSelectId = 4,
                            ApplicationFlagDetailId = 62,
                            Order = (short)1,
                            SelectId = (short)1,
                            SelectNameAr = "رسمي",
                            SelectNameEn = "Formal"
                        },
                        new
                        {
                            ApplicationFlagDetailSelectId = 5,
                            ApplicationFlagDetailId = 62,
                            Order = (short)2,
                            SelectId = (short)2,
                            SelectNameAr = "شبه رسمي",
                            SelectNameEn = "Semi-Formal"
                        });
                });

            modelBuilder.Entity("Shared.CoreOne.Models.Domain.Settings.ApplicationFlagHeader", b =>
                {
                    b.Property<int>("ApplicationFlagHeaderId")
                        .HasColumnType("int")
                        .HasColumnOrder(1);

                    b.Property<string>("ApplicationFlagHeaderNameAr")
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)")
                        .HasColumnOrder(3);

                    b.Property<string>("ApplicationFlagHeaderNameEn")
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)")
                        .HasColumnOrder(4);

                    b.Property<int>("ApplicationFlagTabId")
                        .HasColumnType("int")
                        .HasColumnOrder(2);

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnOrder(200);

                    b.Property<bool?>("Hide")
                        .HasColumnType("tinyint(1)")
                        .HasColumnOrder(206);

                    b.Property<string>("IpAddressCreated")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnOrder(204);

                    b.Property<string>("IpAddressModified")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnOrder(205);

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnOrder(201);

                    b.Property<short>("Order")
                        .HasColumnType("smallint")
                        .HasColumnOrder(5);

                    b.Property<string>("UserNameCreated")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnOrder(202);

                    b.Property<string>("UserNameModified")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnOrder(203);

                    b.HasKey("ApplicationFlagHeaderId");

                    b.HasIndex("ApplicationFlagTabId");

                    b.ToTable("ApplicationFlagHeaders");

                    b.HasData(
                        new
                        {
                            ApplicationFlagHeaderId = 1,
                            ApplicationFlagHeaderNameAr = "تقسيمات الأصناف",
                            ApplicationFlagHeaderNameEn = "Items Categories",
                            ApplicationFlagTabId = 1,
                            Order = (short)1
                        },
                        new
                        {
                            ApplicationFlagHeaderId = 2,
                            ApplicationFlagHeaderNameAr = "ترميز الدليل المحاسبي",
                            ApplicationFlagHeaderNameEn = "Charts of Account Encoding",
                            ApplicationFlagTabId = 2,
                            Order = (short)1
                        },
                        new
                        {
                            ApplicationFlagHeaderId = 3,
                            ApplicationFlagHeaderNameAr = "ترميز مراكز التكلفة",
                            ApplicationFlagHeaderNameEn = "Cost Centers Encoding",
                            ApplicationFlagTabId = 3,
                            Order = (short)1
                        },
                        new
                        {
                            ApplicationFlagHeaderId = 4,
                            ApplicationFlagHeaderNameAr = "أسعار التكلفة",
                            ApplicationFlagHeaderNameEn = "Item Cost",
                            ApplicationFlagTabId = 4,
                            Order = (short)1
                        },
                        new
                        {
                            ApplicationFlagHeaderId = 5,
                            ApplicationFlagHeaderNameAr = "الأصناف",
                            ApplicationFlagHeaderNameEn = "Items",
                            ApplicationFlagTabId = 5,
                            Order = (short)1
                        },
                        new
                        {
                            ApplicationFlagHeaderId = 6,
                            ApplicationFlagHeaderNameAr = "فاتورة المشتريات",
                            ApplicationFlagHeaderNameEn = "Purchase Invoice",
                            ApplicationFlagTabId = 6,
                            Order = (short)1
                        },
                        new
                        {
                            ApplicationFlagHeaderId = 7,
                            ApplicationFlagHeaderNameAr = "فاتورة مرتجع المشتريات",
                            ApplicationFlagHeaderNameEn = "Purchase Invoice Return",
                            ApplicationFlagTabId = 7,
                            Order = (short)1
                        },
                        new
                        {
                            ApplicationFlagHeaderId = 8,
                            ApplicationFlagHeaderNameAr = "عرض أسعار العميل",
                            ApplicationFlagHeaderNameEn = "Client Quotation",
                            ApplicationFlagTabId = 8,
                            Order = (short)1
                        },
                        new
                        {
                            ApplicationFlagHeaderId = 9,
                            ApplicationFlagHeaderNameAr = "فاتورة المبيعات",
                            ApplicationFlagHeaderNameEn = "Sales Invoice",
                            ApplicationFlagTabId = 9,
                            Order = (short)1
                        },
                        new
                        {
                            ApplicationFlagHeaderId = 10,
                            ApplicationFlagHeaderNameAr = "فاتورة مرتجع المبيعات",
                            ApplicationFlagHeaderNameEn = "Sales Invoice Return",
                            ApplicationFlagTabId = 10,
                            Order = (short)1
                        },
                        new
                        {
                            ApplicationFlagHeaderId = 11,
                            ApplicationFlagHeaderNameAr = "إعدادات عامة",
                            ApplicationFlagHeaderNameEn = "General Settings",
                            ApplicationFlagTabId = 11,
                            Order = (short)1
                        },
                        new
                        {
                            ApplicationFlagHeaderId = 12,
                            ApplicationFlagHeaderNameAr = "إعدادات أساسية",
                            ApplicationFlagHeaderNameEn = "Basic Settings",
                            ApplicationFlagTabId = 12,
                            Order = (short)1
                        },
                        new
                        {
                            ApplicationFlagHeaderId = 13,
                            ApplicationFlagHeaderNameAr = "ملاحظات إضافية",
                            ApplicationFlagHeaderNameEn = "Additional Notes",
                            ApplicationFlagTabId = 12,
                            Order = (short)2
                        },
                        new
                        {
                            ApplicationFlagHeaderId = 14,
                            ApplicationFlagHeaderNameAr = "إضافات أخري",
                            ApplicationFlagHeaderNameEn = "Other Additions",
                            ApplicationFlagTabId = 12,
                            Order = (short)3
                        },
                        new
                        {
                            ApplicationFlagHeaderId = 15,
                            ApplicationFlagHeaderNameAr = "حجم الخط",
                            ApplicationFlagHeaderNameEn = "Font Size",
                            ApplicationFlagTabId = 12,
                            Order = (short)4
                        },
                        new
                        {
                            ApplicationFlagHeaderId = 16,
                            ApplicationFlagHeaderNameAr = "تقريب الكسر العشري",
                            ApplicationFlagHeaderNameEn = "Rounding a decimal",
                            ApplicationFlagTabId = 12,
                            Order = (short)5
                        },
                        new
                        {
                            ApplicationFlagHeaderId = 17,
                            ApplicationFlagHeaderNameAr = "هيئة الطباعة",
                            ApplicationFlagHeaderNameEn = "Printing Form",
                            ApplicationFlagTabId = 12,
                            Order = (short)6
                        },
                        new
                        {
                            ApplicationFlagHeaderId = 18,
                            ApplicationFlagHeaderNameAr = "صور مرفقة",
                            ApplicationFlagHeaderNameEn = "Images",
                            ApplicationFlagTabId = 12,
                            Order = (short)7
                        },
                        new
                        {
                            ApplicationFlagHeaderId = 19,
                            ApplicationFlagHeaderNameAr = "حجم الهوامش",
                            ApplicationFlagHeaderNameEn = "margin Size",
                            ApplicationFlagTabId = 12,
                            Order = (short)8
                        },
                        new
                        {
                            ApplicationFlagHeaderId = 20,
                            ApplicationFlagHeaderNameAr = "إعدادات أساسية",
                            ApplicationFlagHeaderNameEn = "Basic Settings",
                            ApplicationFlagTabId = 13,
                            Order = (short)1
                        },
                        new
                        {
                            ApplicationFlagHeaderId = 21,
                            ApplicationFlagHeaderNameAr = "إضافات أخري",
                            ApplicationFlagHeaderNameEn = "Other Additions",
                            ApplicationFlagTabId = 13,
                            Order = (short)2
                        },
                        new
                        {
                            ApplicationFlagHeaderId = 22,
                            ApplicationFlagHeaderNameAr = "تقريب الكسر العشري",
                            ApplicationFlagHeaderNameEn = "Rounding a decimal",
                            ApplicationFlagTabId = 13,
                            Order = (short)3
                        },
                        new
                        {
                            ApplicationFlagHeaderId = 23,
                            ApplicationFlagHeaderNameAr = "صور مرفقة",
                            ApplicationFlagHeaderNameEn = "Images",
                            ApplicationFlagTabId = 13,
                            Order = (short)4
                        },
                        new
                        {
                            ApplicationFlagHeaderId = 24,
                            ApplicationFlagHeaderNameAr = "إضافة ملاحظات",
                            ApplicationFlagHeaderNameEn = "Notes Addition",
                            ApplicationFlagTabId = 13,
                            Order = (short)5
                        });
                });

            modelBuilder.Entity("Shared.CoreOne.Models.Domain.Settings.ApplicationFlagTab", b =>
                {
                    b.Property<int>("ApplicationFlagTabId")
                        .HasColumnType("int")
                        .HasColumnOrder(1);

                    b.Property<string>("ApplicationFlagTabNameAr")
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)")
                        .HasColumnOrder(2);

                    b.Property<string>("ApplicationFlagTabNameEn")
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)")
                        .HasColumnOrder(3);

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnOrder(200);

                    b.Property<bool?>("Hide")
                        .HasColumnType("tinyint(1)")
                        .HasColumnOrder(206);

                    b.Property<string>("IpAddressCreated")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnOrder(204);

                    b.Property<string>("IpAddressModified")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnOrder(205);

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnOrder(201);

                    b.Property<short>("Order")
                        .HasColumnType("smallint")
                        .HasColumnOrder(4);

                    b.Property<string>("UserNameCreated")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnOrder(202);

                    b.Property<string>("UserNameModified")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnOrder(203);

                    b.HasKey("ApplicationFlagTabId");

                    b.ToTable("ApplicationFlagTabs");

                    b.HasData(
                        new
                        {
                            ApplicationFlagTabId = 1,
                            ApplicationFlagTabNameAr = "تقسيمات الأصناف",
                            ApplicationFlagTabNameEn = "Items Categories",
                            Order = (short)5
                        },
                        new
                        {
                            ApplicationFlagTabId = 2,
                            ApplicationFlagTabNameAr = "ترميز الدليل المحاسبي",
                            ApplicationFlagTabNameEn = "Charts of Account Encoding",
                            Order = (short)6
                        },
                        new
                        {
                            ApplicationFlagTabId = 3,
                            ApplicationFlagTabNameAr = "ترميز مراكز التكلفة",
                            ApplicationFlagTabNameEn = "Cost Centers Encoding",
                            Order = (short)7
                        },
                        new
                        {
                            ApplicationFlagTabId = 4,
                            ApplicationFlagTabNameAr = "أسعار التكلفة",
                            ApplicationFlagTabNameEn = "Item Cost",
                            Order = (short)8
                        },
                        new
                        {
                            ApplicationFlagTabId = 5,
                            ApplicationFlagTabNameAr = "الأصناف",
                            ApplicationFlagTabNameEn = "Items",
                            Order = (short)4
                        },
                        new
                        {
                            ApplicationFlagTabId = 6,
                            ApplicationFlagTabNameAr = "فاتورة المشتريات",
                            ApplicationFlagTabNameEn = "Purchase Invoice",
                            Order = (short)9
                        },
                        new
                        {
                            ApplicationFlagTabId = 7,
                            ApplicationFlagTabNameAr = "فاتورة مرتجع المشتريات",
                            ApplicationFlagTabNameEn = "Purchase Invoice Return",
                            Order = (short)10
                        },
                        new
                        {
                            ApplicationFlagTabId = 8,
                            ApplicationFlagTabNameAr = "عرض أسعار العميل",
                            ApplicationFlagTabNameEn = "Client Quotation",
                            Order = (short)11
                        },
                        new
                        {
                            ApplicationFlagTabId = 9,
                            ApplicationFlagTabNameAr = "فاتورة المبيعات",
                            ApplicationFlagTabNameEn = "Sales Invoice",
                            Order = (short)12
                        },
                        new
                        {
                            ApplicationFlagTabId = 10,
                            ApplicationFlagTabNameAr = "فاتورة مرتجع المبيعات",
                            ApplicationFlagTabNameEn = "Sales Invoice Return",
                            Order = (short)13
                        },
                        new
                        {
                            ApplicationFlagTabId = 11,
                            ApplicationFlagTabNameAr = "إعدادات عامة",
                            ApplicationFlagTabNameEn = "General Settings",
                            Order = (short)1
                        },
                        new
                        {
                            ApplicationFlagTabId = 12,
                            ApplicationFlagTabNameAr = "طباعة التقارير",
                            ApplicationFlagTabNameEn = "Print Reports",
                            Order = (short)2
                        },
                        new
                        {
                            ApplicationFlagTabId = 13,
                            ApplicationFlagTabNameAr = "طباعة الفواتير",
                            ApplicationFlagTabNameEn = "Print Invoices",
                            Order = (short)3
                        });
                });

            modelBuilder.Entity("Shared.CoreOne.Models.Domain.Settings.ApplicationFlagType", b =>
                {
                    b.Property<byte>("ApplicationFlagTypeId")
                        .HasColumnType("tinyint unsigned")
                        .HasColumnOrder(1);

                    b.Property<string>("ApplicationFlagTypeNameAr")
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)")
                        .HasColumnOrder(2);

                    b.Property<string>("ApplicationFlagTypeNameEn")
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)")
                        .HasColumnOrder(3);

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnOrder(200);

                    b.Property<bool?>("Hide")
                        .HasColumnType("tinyint(1)")
                        .HasColumnOrder(206);

                    b.Property<string>("IpAddressCreated")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnOrder(204);

                    b.Property<string>("IpAddressModified")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnOrder(205);

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnOrder(201);

                    b.Property<string>("UserNameCreated")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnOrder(202);

                    b.Property<string>("UserNameModified")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnOrder(203);

                    b.HasKey("ApplicationFlagTypeId");

                    b.ToTable("ApplicationFlagTypes");

                    b.HasData(
                        new
                        {
                            ApplicationFlagTypeId = (byte)1,
                            ApplicationFlagTypeNameAr = "نص",
                            ApplicationFlagTypeNameEn = "Text"
                        },
                        new
                        {
                            ApplicationFlagTypeId = (byte)2,
                            ApplicationFlagTypeNameAr = "رقم",
                            ApplicationFlagTypeNameEn = "Number"
                        },
                        new
                        {
                            ApplicationFlagTypeId = (byte)3,
                            ApplicationFlagTypeNameAr = "تاريخ",
                            ApplicationFlagTypeNameEn = "Date"
                        },
                        new
                        {
                            ApplicationFlagTypeId = (byte)4,
                            ApplicationFlagTypeNameAr = "وقت",
                            ApplicationFlagTypeNameEn = "Time"
                        },
                        new
                        {
                            ApplicationFlagTypeId = (byte)5,
                            ApplicationFlagTypeNameAr = "تاريخ محدد بوقت",
                            ApplicationFlagTypeNameEn = "DateTime"
                        },
                        new
                        {
                            ApplicationFlagTypeId = (byte)6,
                            ApplicationFlagTypeNameAr = "نعم/لا",
                            ApplicationFlagTypeNameEn = "Boolean"
                        },
                        new
                        {
                            ApplicationFlagTypeId = (byte)7,
                            ApplicationFlagTypeNameAr = "اختيار",
                            ApplicationFlagTypeNameEn = "Select"
                        },
                        new
                        {
                            ApplicationFlagTypeId = (byte)8,
                            ApplicationFlagTypeNameAr = "رفع صورة",
                            ApplicationFlagTypeNameEn = "Upload Image"
                        });
                });

            modelBuilder.Entity("Shared.CoreOne.Models.Domain.Settings.ReportPrintForm", b =>
                {
                    b.Property<int>("ReportPrintFormId")
                        .HasColumnType("int")
                        .HasColumnOrder(1);

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnOrder(200);

                    b.Property<bool?>("Hide")
                        .HasColumnType("tinyint(1)")
                        .HasColumnOrder(206);

                    b.Property<string>("IpAddressCreated")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnOrder(204);

                    b.Property<string>("IpAddressModified")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnOrder(205);

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnOrder(201);

                    b.Property<string>("ReportPrintFormNameAr")
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)")
                        .HasColumnOrder(2);

                    b.Property<string>("ReportPrintFormNameEn")
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)")
                        .HasColumnOrder(3);

                    b.Property<string>("UserNameCreated")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnOrder(202);

                    b.Property<string>("UserNameModified")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnOrder(203);

                    b.HasKey("ReportPrintFormId");

                    b.ToTable("ReportPrintForms");

                    b.HasData(
                        new
                        {
                            ReportPrintFormId = 1,
                            ReportPrintFormNameAr = "رسمي",
                            ReportPrintFormNameEn = "Formal"
                        },
                        new
                        {
                            ReportPrintFormId = 2,
                            ReportPrintFormNameAr = "شبه رسمي",
                            ReportPrintFormNameEn = "Semi-Formal"
                        });
                });

            modelBuilder.Entity("Shared.CoreOne.Models.Domain.Settings.ReportPrintSetting", b =>
                {
                    b.Property<int>("ReportPrintSettingId")
                        .HasColumnType("int")
                        .HasColumnOrder(1);

                    b.Property<string>("Address1Ar")
                        .HasColumnType("longtext")
                        .HasColumnOrder(8);

                    b.Property<string>("Address1En")
                        .HasColumnType("longtext")
                        .HasColumnOrder(9);

                    b.Property<int>("Address1Font")
                        .HasColumnType("int")
                        .HasColumnOrder(28);

                    b.Property<string>("Address2Ar")
                        .HasColumnType("longtext")
                        .HasColumnOrder(10);

                    b.Property<string>("Address2En")
                        .HasColumnType("longtext")
                        .HasColumnOrder(11);

                    b.Property<int>("Address2Font")
                        .HasColumnType("int")
                        .HasColumnOrder(29);

                    b.Property<string>("Address3Ar")
                        .HasColumnType("longtext")
                        .HasColumnOrder(12);

                    b.Property<string>("Address3En")
                        .HasColumnType("longtext")
                        .HasColumnOrder(13);

                    b.Property<int>("Address3Font")
                        .HasColumnType("int")
                        .HasColumnOrder(30);

                    b.Property<int>("BottomMargin")
                        .HasColumnType("int")
                        .HasColumnOrder(44);

                    b.Property<string>("BottomNotesAllPagesAr")
                        .HasColumnType("longtext")
                        .HasColumnOrder(20);

                    b.Property<string>("BottomNotesAllPagesEn")
                        .HasColumnType("longtext")
                        .HasColumnOrder(21);

                    b.Property<int>("BottomNotesAllPagesFont")
                        .HasColumnType("int")
                        .HasColumnOrder(34);

                    b.Property<string>("BottomNotesLastPageOnlyAr")
                        .HasColumnType("longtext")
                        .HasColumnOrder(16);

                    b.Property<string>("BottomNotesLastPageOnlyEn")
                        .HasColumnType("longtext")
                        .HasColumnOrder(17);

                    b.Property<int>("BottomNotesLastPageOnlyFont")
                        .HasColumnType("int")
                        .HasColumnOrder(32);

                    b.Property<int>("BusinessFont")
                        .HasColumnType("int")
                        .HasColumnOrder(38);

                    b.Property<int>("CompanyId")
                        .HasColumnType("int")
                        .HasColumnOrder(2);

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnOrder(200);

                    b.Property<int>("DetailRounding")
                        .HasColumnType("int")
                        .HasColumnOrder(39);

                    b.Property<int>("GridFont")
                        .HasColumnType("int")
                        .HasColumnOrder(37);

                    b.Property<bool?>("Hide")
                        .HasColumnType("tinyint(1)")
                        .HasColumnOrder(206);

                    b.Property<string>("InstitutionNameAr")
                        .HasColumnType("longtext")
                        .HasColumnOrder(4);

                    b.Property<string>("InstitutionNameEn")
                        .HasColumnType("longtext")
                        .HasColumnOrder(5);

                    b.Property<int>("InstitutionNameFont")
                        .HasColumnType("int")
                        .HasColumnOrder(26);

                    b.Property<string>("InstitutionOtherNameAr")
                        .HasColumnType("longtext")
                        .HasColumnOrder(6);

                    b.Property<string>("InstitutionOtherNameEn")
                        .HasColumnType("longtext")
                        .HasColumnOrder(7);

                    b.Property<int>("InstitutionOtherNameFont")
                        .HasColumnType("int")
                        .HasColumnOrder(27);

                    b.Property<string>("IpAddressCreated")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnOrder(204);

                    b.Property<string>("IpAddressModified")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnOrder(205);

                    b.Property<int>("LeftMargin")
                        .HasColumnType("int")
                        .HasColumnOrder(45);

                    b.Property<short>("MenuCode")
                        .HasColumnType("smallint")
                        .HasColumnOrder(3);

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnOrder(201);

                    b.Property<bool>("PrintBusinessName")
                        .HasColumnType("tinyint(1)")
                        .HasColumnOrder(22);

                    b.Property<bool>("PrintDateTime")
                        .HasColumnType("tinyint(1)")
                        .HasColumnOrder(23);

                    b.Property<int>("PrintFormId")
                        .HasColumnType("int")
                        .HasColumnOrder(41);

                    b.Property<bool>("PrintInstitutionLogo")
                        .HasColumnType("tinyint(1)")
                        .HasColumnOrder(25);

                    b.Property<bool>("PrintUserName")
                        .HasColumnType("tinyint(1)")
                        .HasColumnOrder(24);

                    b.Property<int>("ReportNameFont")
                        .HasColumnType("int")
                        .HasColumnOrder(35);

                    b.Property<int>("ReportPeriodFont")
                        .HasColumnType("int")
                        .HasColumnOrder(36);

                    b.Property<int>("RightMargin")
                        .HasColumnType("int")
                        .HasColumnOrder(43);

                    b.Property<int>("SumRounding")
                        .HasColumnType("int")
                        .HasColumnOrder(40);

                    b.Property<int>("TopMargin")
                        .HasColumnType("int")
                        .HasColumnOrder(42);

                    b.Property<string>("TopNotesAllPagesAr")
                        .HasColumnType("longtext")
                        .HasColumnOrder(18);

                    b.Property<string>("TopNotesAllPagesEn")
                        .HasColumnType("longtext")
                        .HasColumnOrder(19);

                    b.Property<int>("TopNotesAllPagesFont")
                        .HasColumnType("int")
                        .HasColumnOrder(33);

                    b.Property<string>("TopNotesFirstPageOnlyAr")
                        .HasColumnType("longtext")
                        .HasColumnOrder(14);

                    b.Property<string>("TopNotesFirstPageOnlyEn")
                        .HasColumnType("longtext")
                        .HasColumnOrder(15);

                    b.Property<int>("TopNotesFirstPageOnlyFont")
                        .HasColumnType("int")
                        .HasColumnOrder(31);

                    b.Property<string>("UserNameCreated")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnOrder(202);

                    b.Property<string>("UserNameModified")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnOrder(203);

                    b.HasKey("ReportPrintSettingId");

                    b.HasIndex("CompanyId");

                    b.HasIndex("MenuCode");

                    b.HasIndex("PrintFormId");

                    b.ToTable("ReportPrintSettings");
                });

            modelBuilder.Entity("Shared.CoreOne.Models.Domain.Taxes.Tax", b =>
                {
                    b.Property<int>("TaxId")
                        .HasColumnType("int")
                        .HasColumnOrder(1);

                    b.Property<int>("CompanyId")
                        .HasColumnType("int")
                        .HasColumnOrder(5);

                    b.Property<int?>("CrAccount")
                        .HasColumnType("int")
                        .HasColumnOrder(8);

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnOrder(200);

                    b.Property<int?>("DrAccount")
                        .HasColumnType("int")
                        .HasColumnOrder(7);

                    b.Property<bool?>("Hide")
                        .HasColumnType("tinyint(1)")
                        .HasColumnOrder(206);

                    b.Property<string>("IpAddressCreated")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnOrder(204);

                    b.Property<string>("IpAddressModified")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnOrder(205);

                    b.Property<bool>("IsVatTax")
                        .HasColumnType("tinyint(1)")
                        .HasColumnOrder(9);

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnOrder(201);

                    b.Property<bool>("TaxAfterVatInclusive")
                        .HasColumnType("tinyint(1)")
                        .HasColumnOrder(10);

                    b.Property<int>("TaxCode")
                        .HasColumnType("int")
                        .HasColumnOrder(2);

                    b.Property<string>("TaxNameAr")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnOrder(3);

                    b.Property<string>("TaxNameEn")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnOrder(4);

                    b.Property<byte>("TaxTypeId")
                        .HasColumnType("tinyint unsigned")
                        .HasColumnOrder(6);

                    b.Property<string>("UserNameCreated")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnOrder(202);

                    b.Property<string>("UserNameModified")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnOrder(203);

                    b.HasKey("TaxId");

                    b.HasIndex("CompanyId");

                    b.HasIndex("CrAccount");

                    b.HasIndex("DrAccount");

                    b.HasIndex("TaxTypeId");

                    b.ToTable("Taxes");
                });

            modelBuilder.Entity("Shared.CoreOne.Models.Domain.Taxes.TaxPercent", b =>
                {
                    b.Property<int>("TaxPercentId")
                        .HasColumnType("int")
                        .HasColumnOrder(1);

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnOrder(200);

                    b.Property<DateTime>("FromDate")
                        .HasColumnType("Date")
                        .HasColumnOrder(3);

                    b.Property<bool?>("Hide")
                        .HasColumnType("tinyint(1)")
                        .HasColumnOrder(206);

                    b.Property<string>("IpAddressCreated")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnOrder(204);

                    b.Property<string>("IpAddressModified")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnOrder(205);

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnOrder(201);

                    b.Property<decimal>("Percent")
                        .HasColumnType("decimal(30,15)")
                        .HasColumnOrder(4);

                    b.Property<int>("TaxId")
                        .HasColumnType("int")
                        .HasColumnOrder(2);

                    b.Property<string>("UserNameCreated")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnOrder(202);

                    b.Property<string>("UserNameModified")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnOrder(203);

                    b.HasKey("TaxPercentId");

                    b.HasIndex("TaxId");

                    b.ToTable("TaxPercents");
                });

            modelBuilder.Entity("Shared.CoreOne.Models.Domain.Taxes.TaxType", b =>
                {
                    b.Property<byte>("TaxTypeId")
                        .HasColumnType("tinyint unsigned")
                        .HasColumnOrder(1);

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnOrder(200);

                    b.Property<bool?>("Hide")
                        .HasColumnType("tinyint(1)")
                        .HasColumnOrder(206);

                    b.Property<string>("IpAddressCreated")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnOrder(204);

                    b.Property<string>("IpAddressModified")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnOrder(205);

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnOrder(201);

                    b.Property<string>("TaxTypeNameAr")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnOrder(2);

                    b.Property<string>("TaxTypeNameEn")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnOrder(3);

                    b.Property<string>("UserNameCreated")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnOrder(202);

                    b.Property<string>("UserNameModified")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnOrder(203);

                    b.HasKey("TaxTypeId");

                    b.ToTable("TaxTypes");

                    b.HasData(
                        new
                        {
                            TaxTypeId = (byte)0,
                            TaxTypeNameAr = "غير محدد",
                            TaxTypeNameEn = "unknown"
                        },
                        new
                        {
                            TaxTypeId = (byte)1,
                            TaxTypeNameAr = "ضريبي",
                            TaxTypeNameEn = "Taxable"
                        },
                        new
                        {
                            TaxTypeId = (byte)2,
                            TaxTypeNameAr = "معفي",
                            TaxTypeNameEn = "Exempted"
                        },
                        new
                        {
                            TaxTypeId = (byte)3,
                            TaxTypeNameAr = "صفري",
                            TaxTypeNameEn = "Zero"
                        },
                        new
                        {
                            TaxTypeId = (byte)4,
                            TaxTypeNameAr = "اتفاقيات خاصة",
                            TaxTypeNameEn = "Private Contracts"
                        },
                        new
                        {
                            TaxTypeId = (byte)5,
                            TaxTypeNameAr = "صادرات",
                            TaxTypeNameEn = "Exports"
                        },
                        new
                        {
                            TaxTypeId = (byte)6,
                            TaxTypeNameAr = "استيراد من الخارج",
                            TaxTypeNameEn = "Imports"
                        },
                        new
                        {
                            TaxTypeId = (byte)7,
                            TaxTypeNameAr = "احتساب عكسي",
                            TaxTypeNameEn = "Reverse Calculation"
                        });
                });

            modelBuilder.Entity("Accounting.CoreOne.Models.Domain.FixedAssetMovementDetail", b =>
                {
                    b.HasOne("Shared.CoreOne.Models.Domain.FixedAssets.FixedAsset", "FixedAsset")
                        .WithMany()
                        .HasForeignKey("FixedAssetId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Accounting.CoreOne.Models.Domain.FixedAssetMovementHeader", "FixedAssetMovementHeader")
                        .WithMany()
                        .HasForeignKey("FixedAssetMovementHeaderId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("FixedAsset");

                    b.Navigation("FixedAssetMovementHeader");
                });

            modelBuilder.Entity("Accounting.CoreOne.Models.Domain.FixedAssetMovementHeader", b =>
                {
                    b.HasOne("Shared.CoreOne.Models.Domain.Archive.ArchiveHeader", "ArchiveHeader")
                        .WithMany()
                        .HasForeignKey("ArchiveHeaderId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Shared.CoreOne.Models.Domain.CostCenters.CostCenter", "CostCenterTo")
                        .WithMany()
                        .HasForeignKey("CostCenterToId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Shared.CoreOne.Models.Domain.Modules.Store", "Store")
                        .WithMany()
                        .HasForeignKey("StoreId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("ArchiveHeader");

                    b.Navigation("CostCenterTo");

                    b.Navigation("Store");
                });

            modelBuilder.Entity("Accounting.CoreOne.Models.Domain.FixedAssetVoucherDetail", b =>
                {
                    b.HasOne("Shared.CoreOne.Models.Domain.FixedAssets.FixedAsset", "FixedAsset")
                        .WithMany()
                        .HasForeignKey("FixedAssetId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Accounting.CoreOne.Models.Domain.FixedAssetVoucherHeader", "FixedAssetVoucherHeader")
                        .WithMany()
                        .HasForeignKey("FixedAssetVoucherHeaderId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("FixedAsset");

                    b.Navigation("FixedAssetVoucherHeader");
                });

            modelBuilder.Entity("Accounting.CoreOne.Models.Domain.FixedAssetVoucherDetailPayment", b =>
                {
                    b.HasOne("Shared.CoreOne.Models.Domain.Accounts.Account", "Account")
                        .WithMany()
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Shared.CoreOne.Models.Domain.Modules.Currency", "Currency")
                        .WithMany()
                        .HasForeignKey("CurrencyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Accounting.CoreOne.Models.Domain.FixedAssetVoucherDetail", "FixedAssetVoucherDetail")
                        .WithMany()
                        .HasForeignKey("FixedAssetVoucherDetailId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Shared.CoreOne.Models.Domain.Modules.PaymentMethod", "PaymentMethod")
                        .WithMany()
                        .HasForeignKey("PaymentMethodId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Account");

                    b.Navigation("Currency");

                    b.Navigation("FixedAssetVoucherDetail");

                    b.Navigation("PaymentMethod");
                });

            modelBuilder.Entity("Accounting.CoreOne.Models.Domain.FixedAssetVoucherHeader", b =>
                {
                    b.HasOne("Shared.CoreOne.Models.Domain.Archive.ArchiveHeader", "ArchiveHeader")
                        .WithMany()
                        .HasForeignKey("ArchiveHeaderId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Shared.CoreOne.Models.Domain.FixedAssets.FixedAssetVoucherType", "FixedAssetVoucherType")
                        .WithMany()
                        .HasForeignKey("FixedAssetVoucherTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Shared.CoreOne.Models.Domain.Journal.JournalHeader", "JournalHeader")
                        .WithMany()
                        .HasForeignKey("JournalHeaderId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Shared.CoreOne.Models.Domain.Modules.Seller", "Seller")
                        .WithMany()
                        .HasForeignKey("SellerId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Shared.CoreOne.Models.Domain.Modules.Store", "Store")
                        .WithMany()
                        .HasForeignKey("StoreId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("ArchiveHeader");

                    b.Navigation("FixedAssetVoucherType");

                    b.Navigation("JournalHeader");

                    b.Navigation("Seller");

                    b.Navigation("Store");
                });

            modelBuilder.Entity("Accounting.CoreOne.Models.Domain.PaymentVoucherDetail", b =>
                {
                    b.HasOne("Shared.CoreOne.Models.Domain.Accounts.Account", "Account")
                        .WithMany()
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Shared.CoreOne.Models.Domain.Modules.Currency", "Currency")
                        .WithMany()
                        .HasForeignKey("CurrencyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Shared.CoreOne.Models.Domain.Modules.PaymentMethod", "PaymentMethod")
                        .WithMany()
                        .HasForeignKey("PaymentMethodId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Accounting.CoreOne.Models.Domain.PaymentVoucherHeader", "PaymentVoucherHeader")
                        .WithMany()
                        .HasForeignKey("PaymentVoucherHeaderId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Account");

                    b.Navigation("Currency");

                    b.Navigation("PaymentMethod");

                    b.Navigation("PaymentVoucherHeader");
                });

            modelBuilder.Entity("Accounting.CoreOne.Models.Domain.PaymentVoucherHeader", b =>
                {
                    b.HasOne("Shared.CoreOne.Models.Domain.Archive.ArchiveHeader", "ArchiveHeader")
                        .WithMany()
                        .HasForeignKey("ArchiveHeaderId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Shared.CoreOne.Models.Domain.Journal.JournalHeader", "JournalHeader")
                        .WithMany()
                        .HasForeignKey("JournalHeaderId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Shared.CoreOne.Models.Domain.Modules.Seller", "Seller")
                        .WithMany()
                        .HasForeignKey("SellerId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Shared.CoreOne.Models.Domain.Modules.Store", "Store")
                        .WithMany()
                        .HasForeignKey("StoreId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Shared.CoreOne.Models.Domain.Modules.Supplier", "Supplier")
                        .WithMany()
                        .HasForeignKey("SupplierId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("ArchiveHeader");

                    b.Navigation("JournalHeader");

                    b.Navigation("Seller");

                    b.Navigation("Store");

                    b.Navigation("Supplier");
                });

            modelBuilder.Entity("Accounting.CoreOne.Models.Domain.PaymentVoucherInvoice", b =>
                {
                    b.HasOne("Accounting.CoreOne.Models.Domain.PaymentVoucherHeader", "PaymentVoucherHeader")
                        .WithMany()
                        .HasForeignKey("PaymentVoucherHeaderId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("PaymentVoucherHeader");
                });

            modelBuilder.Entity("Accounting.CoreOne.Models.Domain.ReceiptVoucherDetail", b =>
                {
                    b.HasOne("Shared.CoreOne.Models.Domain.Accounts.Account", "Account")
                        .WithMany()
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Shared.CoreOne.Models.Domain.Modules.Currency", "Currency")
                        .WithMany()
                        .HasForeignKey("CurrencyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Shared.CoreOne.Models.Domain.Modules.PaymentMethod", "PaymentMethod")
                        .WithMany()
                        .HasForeignKey("PaymentMethodId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Accounting.CoreOne.Models.Domain.ReceiptVoucherHeader", "ReceiptVoucherHeader")
                        .WithMany()
                        .HasForeignKey("ReceiptVoucherHeaderId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Account");

                    b.Navigation("Currency");

                    b.Navigation("PaymentMethod");

                    b.Navigation("ReceiptVoucherHeader");
                });

            modelBuilder.Entity("Accounting.CoreOne.Models.Domain.ReceiptVoucherHeader", b =>
                {
                    b.HasOne("Shared.CoreOne.Models.Domain.Archive.ArchiveHeader", "ArchiveHeader")
                        .WithMany()
                        .HasForeignKey("ArchiveHeaderId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Shared.CoreOne.Models.Domain.Modules.Client", "Client")
                        .WithMany()
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Shared.CoreOne.Models.Domain.Journal.JournalHeader", "JournalHeader")
                        .WithMany()
                        .HasForeignKey("JournalHeaderId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Shared.CoreOne.Models.Domain.Modules.Seller", "Seller")
                        .WithMany()
                        .HasForeignKey("SellerId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Shared.CoreOne.Models.Domain.Modules.Store", "Store")
                        .WithMany()
                        .HasForeignKey("StoreId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("ArchiveHeader");

                    b.Navigation("Client");

                    b.Navigation("JournalHeader");

                    b.Navigation("Seller");

                    b.Navigation("Store");
                });

            modelBuilder.Entity("Accounting.CoreOne.Models.Domain.ReceiptVoucherInvoice", b =>
                {
                    b.HasOne("Accounting.CoreOne.Models.Domain.ReceiptVoucherHeader", "ReceiptVoucherHeader")
                        .WithMany()
                        .HasForeignKey("ReceiptVoucherHeaderId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("ReceiptVoucherHeader");
                });

            modelBuilder.Entity("Compound.CoreOne.Models.Domain.InvoiceSettlement.PurchaseInvoiceSettlement", b =>
                {
                    b.HasOne("Accounting.CoreOne.Models.Domain.PaymentVoucherHeader", "PaymentVoucherHeader")
                        .WithMany()
                        .HasForeignKey("PaymentVoucherHeaderId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Purchases.CoreOne.Models.Domain.PurchaseInvoiceHeader", "PurchaseInvoiceHeader")
                        .WithMany()
                        .HasForeignKey("PurchaseInvoiceHeaderId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("PaymentVoucherHeader");

                    b.Navigation("PurchaseInvoiceHeader");
                });

            modelBuilder.Entity("Compound.CoreOne.Models.Domain.InvoiceSettlement.SalesInvoiceSettlement", b =>
                {
                    b.HasOne("Accounting.CoreOne.Models.Domain.ReceiptVoucherHeader", "ReceiptVoucherHeader")
                        .WithMany()
                        .HasForeignKey("ReceiptVoucherHeaderId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Sales.CoreOne.Models.Domain.SalesInvoiceHeader", "SalesInvoiceHeader")
                        .WithMany()
                        .HasForeignKey("SalesInvoiceHeaderId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("ReceiptVoucherHeader");

                    b.Navigation("SalesInvoiceHeader");
                });

            modelBuilder.Entity("Inventory.CoreOne.Models.Domain.InternalTransferDetail", b =>
                {
                    b.HasOne("Inventory.CoreOne.Models.Domain.InternalTransferHeader", "InternalTransferHeader")
                        .WithMany()
                        .HasForeignKey("InternalTransferHeaderId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Shared.CoreOne.Models.Domain.Items.Item", "Item")
                        .WithMany()
                        .HasForeignKey("ItemId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Shared.CoreOne.Models.Domain.Items.ItemPackage", "Package")
                        .WithMany()
                        .HasForeignKey("ItemPackageId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("InternalTransferHeader");

                    b.Navigation("Item");

                    b.Navigation("Package");
                });

            modelBuilder.Entity("Inventory.CoreOne.Models.Domain.InternalTransferHeader", b =>
                {
                    b.HasOne("Shared.CoreOne.Models.Domain.Archive.ArchiveHeader", "ArchiveHeader")
                        .WithMany()
                        .HasForeignKey("ArchiveHeaderId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Shared.CoreOne.Models.Domain.Modules.Store", "FromStore")
                        .WithMany()
                        .HasForeignKey("FromStoreId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Shared.CoreOne.Models.Domain.Menus.Menu", "Menu")
                        .WithMany()
                        .HasForeignKey("MenuCode")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Shared.CoreOne.Models.Domain.Modules.Store", "ToStore")
                        .WithMany()
                        .HasForeignKey("ToStoreId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("ArchiveHeader");

                    b.Navigation("FromStore");

                    b.Navigation("Menu");

                    b.Navigation("ToStore");
                });

            modelBuilder.Entity("Inventory.CoreOne.Models.Domain.InternalTransferReceiveDetail", b =>
                {
                    b.HasOne("Inventory.CoreOne.Models.Domain.InternalTransferReceiveHeader", "InternalTransferReceiveHeader")
                        .WithMany()
                        .HasForeignKey("InternalTransferReceiveHeaderId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Shared.CoreOne.Models.Domain.Items.Item", "Item")
                        .WithMany()
                        .HasForeignKey("ItemId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Shared.CoreOne.Models.Domain.Items.ItemPackage", "Package")
                        .WithMany()
                        .HasForeignKey("ItemPackageId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("InternalTransferReceiveHeader");

                    b.Navigation("Item");

                    b.Navigation("Package");
                });

            modelBuilder.Entity("Inventory.CoreOne.Models.Domain.InternalTransferReceiveHeader", b =>
                {
                    b.HasOne("Shared.CoreOne.Models.Domain.Archive.ArchiveHeader", "ArchiveHeader")
                        .WithMany()
                        .HasForeignKey("ArchiveHeaderId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Shared.CoreOne.Models.Domain.Modules.Store", "FromStore")
                        .WithMany()
                        .HasForeignKey("FromStoreId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Inventory.CoreOne.Models.Domain.InternalTransferHeader", "InternalTransferHeader")
                        .WithMany()
                        .HasForeignKey("InternalTransferHeaderId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Shared.CoreOne.Models.Domain.Menus.Menu", "Menu")
                        .WithMany()
                        .HasForeignKey("MenuCode")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Shared.CoreOne.Models.Domain.Modules.Store", "ToStore")
                        .WithMany()
                        .HasForeignKey("ToStoreId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("ArchiveHeader");

                    b.Navigation("FromStore");

                    b.Navigation("InternalTransferHeader");

                    b.Navigation("Menu");

                    b.Navigation("ToStore");
                });

            modelBuilder.Entity("Inventory.CoreOne.Models.Domain.InventoryInDetail", b =>
                {
                    b.HasOne("Inventory.CoreOne.Models.Domain.InventoryInHeader", "InventoryInHeader")
                        .WithMany()
                        .HasForeignKey("InventoryInHeaderId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Shared.CoreOne.Models.Domain.Items.Item", "Item")
                        .WithMany()
                        .HasForeignKey("ItemId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Shared.CoreOne.Models.Domain.Items.ItemPackage", "ItemPackage")
                        .WithMany()
                        .HasForeignKey("ItemPackageId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("InventoryInHeader");

                    b.Navigation("Item");

                    b.Navigation("ItemPackage");
                });

            modelBuilder.Entity("Inventory.CoreOne.Models.Domain.InventoryInHeader", b =>
                {
                    b.HasOne("Shared.CoreOne.Models.Domain.Archive.ArchiveHeader", "ArchiveHeader")
                        .WithMany()
                        .HasForeignKey("ArchiveHeaderId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Shared.CoreOne.Models.Domain.Modules.Store", "Store")
                        .WithMany()
                        .HasForeignKey("StoreId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("ArchiveHeader");

                    b.Navigation("Store");
                });

            modelBuilder.Entity("Inventory.CoreOne.Models.Domain.InventoryOutDetail", b =>
                {
                    b.HasOne("Inventory.CoreOne.Models.Domain.InventoryOutHeader", "InventoryOutHeader")
                        .WithMany()
                        .HasForeignKey("InventoryOutHeaderId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Shared.CoreOne.Models.Domain.Items.Item", "Item")
                        .WithMany()
                        .HasForeignKey("ItemId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Shared.CoreOne.Models.Domain.Items.ItemPackage", "ItemPackage")
                        .WithMany()
                        .HasForeignKey("ItemPackageId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("InventoryOutHeader");

                    b.Navigation("Item");

                    b.Navigation("ItemPackage");
                });

            modelBuilder.Entity("Inventory.CoreOne.Models.Domain.InventoryOutHeader", b =>
                {
                    b.HasOne("Shared.CoreOne.Models.Domain.Archive.ArchiveHeader", "ArchiveHeader")
                        .WithMany()
                        .HasForeignKey("ArchiveHeaderId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Shared.CoreOne.Models.Domain.Modules.Store", "Store")
                        .WithMany()
                        .HasForeignKey("StoreId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("ArchiveHeader");

                    b.Navigation("Store");
                });

            modelBuilder.Entity("Inventory.CoreOne.Models.Domain.ItemImportExcelHistory", b =>
                {
                    b.HasOne("Shared.CoreOne.Models.Domain.Archive.ArchiveHeader", "ArchiveHeader")
                        .WithMany()
                        .HasForeignKey("ArchiveHeaderId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("ArchiveHeader");
                });

            modelBuilder.Entity("Inventory.CoreOne.Models.Domain.StockTakingCarryOverDetail", b =>
                {
                    b.HasOne("Shared.CoreOne.Models.Domain.Items.Item", "Item")
                        .WithMany()
                        .HasForeignKey("ItemId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Shared.CoreOne.Models.Domain.Items.ItemPackage", "Package")
                        .WithMany()
                        .HasForeignKey("ItemPackageId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Inventory.CoreOne.Models.Domain.StockTakingCarryOverHeader", "StockTakingCarryOverHeader")
                        .WithMany()
                        .HasForeignKey("StockTakingCarryOverHeaderId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Item");

                    b.Navigation("Package");

                    b.Navigation("StockTakingCarryOverHeader");
                });

            modelBuilder.Entity("Inventory.CoreOne.Models.Domain.StockTakingCarryOverEffectDetail", b =>
                {
                    b.HasOne("Shared.CoreOne.Models.Domain.Items.Item", "Item")
                        .WithMany()
                        .HasForeignKey("ItemId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Shared.CoreOne.Models.Domain.Items.ItemPackage", "Package")
                        .WithMany()
                        .HasForeignKey("ItemPackageId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Inventory.CoreOne.Models.Domain.StockTakingCarryOverHeader", "StockTakingCarryOverHeader")
                        .WithMany()
                        .HasForeignKey("StockTakingCarryOverHeaderId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Item");

                    b.Navigation("Package");

                    b.Navigation("StockTakingCarryOverHeader");
                });

            modelBuilder.Entity("Inventory.CoreOne.Models.Domain.StockTakingCarryOverHeader", b =>
                {
                    b.HasOne("Shared.CoreOne.Models.Domain.Modules.Store", "Store")
                        .WithMany()
                        .HasForeignKey("StoreId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Store");
                });

            modelBuilder.Entity("Inventory.CoreOne.Models.Domain.StockTakingDetail", b =>
                {
                    b.HasOne("Shared.CoreOne.Models.Domain.Items.Item", "Item")
                        .WithMany()
                        .HasForeignKey("ItemId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Shared.CoreOne.Models.Domain.Items.ItemPackage", "Package")
                        .WithMany()
                        .HasForeignKey("ItemPackageId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Inventory.CoreOne.Models.Domain.StockTakingHeader", "StockTakingHeader")
                        .WithMany()
                        .HasForeignKey("StockTakingHeaderId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Item");

                    b.Navigation("Package");

                    b.Navigation("StockTakingHeader");
                });

            modelBuilder.Entity("Inventory.CoreOne.Models.Domain.StockTakingHeader", b =>
                {
                    b.HasOne("Shared.CoreOne.Models.Domain.Modules.Store", "Store")
                        .WithMany()
                        .HasForeignKey("StoreId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Store");
                });

            modelBuilder.Entity("Purchases.CoreOne.Models.Domain.InvoiceStockIn", b =>
                {
                    b.HasOne("Purchases.CoreOne.Models.Domain.PurchaseInvoiceHeader", "PurchaseInvoiceHeader")
                        .WithMany()
                        .HasForeignKey("PurchaseInvoiceHeaderId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Purchases.CoreOne.Models.Domain.StockInHeader", "StockInHeader")
                        .WithMany()
                        .HasForeignKey("StockInHeaderId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("PurchaseInvoiceHeader");

                    b.Navigation("StockInHeader");
                });

            modelBuilder.Entity("Purchases.CoreOne.Models.Domain.InvoiceStockInReturn", b =>
                {
                    b.HasOne("Purchases.CoreOne.Models.Domain.PurchaseInvoiceReturnHeader", "PurchaseInvoiceReturnHeader")
                        .WithMany()
                        .HasForeignKey("PurchaseInvoiceReturnHeaderId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Purchases.CoreOne.Models.Domain.StockInReturnHeader", "StockInReturnHeader")
                        .WithMany()
                        .HasForeignKey("StockInReturnHeaderId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("PurchaseInvoiceReturnHeader");

                    b.Navigation("StockInReturnHeader");
                });

            modelBuilder.Entity("Purchases.CoreOne.Models.Domain.ProductRequestDetail", b =>
                {
                    b.HasOne("Shared.CoreOne.Models.Domain.CostCenters.CostCenter", "CostCenter")
                        .WithMany()
                        .HasForeignKey("CostCenterId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Shared.CoreOne.Models.Domain.Items.Item", "Item")
                        .WithMany()
                        .HasForeignKey("ItemId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Shared.CoreOne.Models.Domain.Items.ItemPackage", "ItemPackage")
                        .WithMany()
                        .HasForeignKey("ItemPackageId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Purchases.CoreOne.Models.Domain.ProductRequestHeader", "ProductRequestHeader")
                        .WithMany()
                        .HasForeignKey("ProductRequestHeaderId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("CostCenter");

                    b.Navigation("Item");

                    b.Navigation("ItemPackage");

                    b.Navigation("ProductRequestHeader");
                });

            modelBuilder.Entity("Purchases.CoreOne.Models.Domain.ProductRequestHeader", b =>
                {
                    b.HasOne("Shared.CoreOne.Models.Domain.Archive.ArchiveHeader", "ArchiveHeader")
                        .WithMany()
                        .HasForeignKey("ArchiveHeaderId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Shared.CoreOne.Models.Domain.Modules.Store", "Store")
                        .WithMany()
                        .HasForeignKey("StoreId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("ArchiveHeader");

                    b.Navigation("Store");
                });

            modelBuilder.Entity("Purchases.CoreOne.Models.Domain.ProductRequestPriceDetail", b =>
                {
                    b.HasOne("Shared.CoreOne.Models.Domain.CostCenters.CostCenter", "CostCenter")
                        .WithMany()
                        .HasForeignKey("CostCenterId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Shared.CoreOne.Models.Domain.Items.Item", "Item")
                        .WithMany()
                        .HasForeignKey("ItemId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Shared.CoreOne.Models.Domain.Items.ItemPackage", "ItemPackage")
                        .WithMany()
                        .HasForeignKey("ItemPackageId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Purchases.CoreOne.Models.Domain.ProductRequestPriceHeader", "ProductRequestPriceHeader")
                        .WithMany()
                        .HasForeignKey("ProductRequestPriceHeaderId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("CostCenter");

                    b.Navigation("Item");

                    b.Navigation("ItemPackage");

                    b.Navigation("ProductRequestPriceHeader");
                });

            modelBuilder.Entity("Purchases.CoreOne.Models.Domain.ProductRequestPriceDetailTax", b =>
                {
                    b.HasOne("Shared.CoreOne.Models.Domain.Accounts.Account", "DebitAccount")
                        .WithMany()
                        .HasForeignKey("DebitAccountId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Purchases.CoreOne.Models.Domain.ProductRequestPriceDetail", "ProductRequestPriceDetail")
                        .WithMany()
                        .HasForeignKey("ProductRequestPriceDetailId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Shared.CoreOne.Models.Domain.Taxes.Tax", "Tax")
                        .WithMany()
                        .HasForeignKey("TaxId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("DebitAccount");

                    b.Navigation("ProductRequestPriceDetail");

                    b.Navigation("Tax");
                });

            modelBuilder.Entity("Purchases.CoreOne.Models.Domain.ProductRequestPriceHeader", b =>
                {
                    b.HasOne("Shared.CoreOne.Models.Domain.Archive.ArchiveHeader", "ArchiveHeader")
                        .WithMany()
                        .HasForeignKey("ArchiveHeaderId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Purchases.CoreOne.Models.Domain.ProductRequestHeader", "ProductRequestHeader")
                        .WithMany()
                        .HasForeignKey("ProductRequestHeaderId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Shared.CoreOne.Models.Domain.Modules.Store", "Store")
                        .WithMany()
                        .HasForeignKey("StoreId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Shared.CoreOne.Models.Domain.Modules.Supplier", "Supplier")
                        .WithMany()
                        .HasForeignKey("SupplierId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Shared.CoreOne.Models.Domain.Taxes.TaxType", "TaxType")
                        .WithMany()
                        .HasForeignKey("TaxTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("ArchiveHeader");

                    b.Navigation("ProductRequestHeader");

                    b.Navigation("Store");

                    b.Navigation("Supplier");

                    b.Navigation("TaxType");
                });

            modelBuilder.Entity("Purchases.CoreOne.Models.Domain.PurchaseInvoiceDetail", b =>
                {
                    b.HasOne("Shared.CoreOne.Models.Domain.Items.Item", "Item")
                        .WithMany()
                        .HasForeignKey("ItemId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Shared.CoreOne.Models.Domain.Items.ItemPackage", "ItemPackage")
                        .WithMany()
                        .HasForeignKey("ItemPackageId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Purchases.CoreOne.Models.Domain.PurchaseInvoiceHeader", "PurchaseInvoiceHeader")
                        .WithMany()
                        .HasForeignKey("PurchaseInvoiceHeaderId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Shared.CoreOne.Models.Domain.Taxes.Tax", "VatTax")
                        .WithMany()
                        .HasForeignKey("VatTaxId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Shared.CoreOne.Models.Domain.Taxes.TaxType", "VatTaxType")
                        .WithMany()
                        .HasForeignKey("VatTaxTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Item");

                    b.Navigation("ItemPackage");

                    b.Navigation("PurchaseInvoiceHeader");

                    b.Navigation("VatTax");

                    b.Navigation("VatTaxType");
                });

            modelBuilder.Entity("Purchases.CoreOne.Models.Domain.PurchaseInvoiceDetailTax", b =>
                {
                    b.HasOne("Shared.CoreOne.Models.Domain.Accounts.Account", "DebitAccount")
                        .WithMany()
                        .HasForeignKey("DebitAccountId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Purchases.CoreOne.Models.Domain.PurchaseInvoiceDetail", "PurchaseInvoiceDetail")
                        .WithMany()
                        .HasForeignKey("PurchaseInvoiceDetailId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Shared.CoreOne.Models.Domain.Taxes.Tax", "Tax")
                        .WithMany()
                        .HasForeignKey("TaxId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Shared.CoreOne.Models.Domain.Taxes.TaxType", "TaxType")
                        .WithMany()
                        .HasForeignKey("TaxTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("DebitAccount");

                    b.Navigation("PurchaseInvoiceDetail");

                    b.Navigation("Tax");

                    b.Navigation("TaxType");
                });

            modelBuilder.Entity("Purchases.CoreOne.Models.Domain.PurchaseInvoiceExpense", b =>
                {
                    b.HasOne("Shared.CoreOne.Models.Domain.Basics.InvoiceExpenseType", "InvoiceExpenseType")
                        .WithMany()
                        .HasForeignKey("InvoiceExpenseTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Purchases.CoreOne.Models.Domain.PurchaseInvoiceHeader", "PurchaseInvoiceHeader")
                        .WithMany()
                        .HasForeignKey("PurchaseInvoiceHeaderId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("InvoiceExpenseType");

                    b.Navigation("PurchaseInvoiceHeader");
                });

            modelBuilder.Entity("Purchases.CoreOne.Models.Domain.PurchaseInvoiceHeader", b =>
                {
                    b.HasOne("Shared.CoreOne.Models.Domain.Archive.ArchiveHeader", "ArchiveHeader")
                        .WithMany()
                        .HasForeignKey("ArchiveHeaderId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Shared.CoreOne.Models.Domain.Accounts.Account", "CreditAccount")
                        .WithMany()
                        .HasForeignKey("CreditAccountId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Shared.CoreOne.Models.Domain.Accounts.Account", "DebitAccount")
                        .WithMany()
                        .HasForeignKey("DebitAccountId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Shared.CoreOne.Models.Domain.Basics.InvoiceType", "InvoiceType")
                        .WithMany()
                        .HasForeignKey("InvoiceTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Shared.CoreOne.Models.Domain.Journal.JournalHeader", "JournalHeader")
                        .WithMany()
                        .HasForeignKey("JournalHeaderId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Shared.CoreOne.Models.Domain.Menus.Menu", "Menu")
                        .WithMany()
                        .HasForeignKey("MenuCode")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Purchases.CoreOne.Models.Domain.PurchaseOrderHeader", "PurchaseOrderHeader")
                        .WithMany()
                        .HasForeignKey("PurchaseOrderHeaderId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Shared.CoreOne.Models.Domain.Modules.Store", "Store")
                        .WithMany()
                        .HasForeignKey("StoreId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Shared.CoreOne.Models.Domain.Modules.Supplier", "Supplier")
                        .WithMany()
                        .HasForeignKey("SupplierId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Shared.CoreOne.Models.Domain.Taxes.TaxType", "TaxType")
                        .WithMany()
                        .HasForeignKey("TaxTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("ArchiveHeader");

                    b.Navigation("CreditAccount");

                    b.Navigation("DebitAccount");

                    b.Navigation("InvoiceType");

                    b.Navigation("JournalHeader");

                    b.Navigation("Menu");

                    b.Navigation("PurchaseOrderHeader");

                    b.Navigation("Store");

                    b.Navigation("Supplier");

                    b.Navigation("TaxType");
                });

            modelBuilder.Entity("Purchases.CoreOne.Models.Domain.PurchaseInvoiceReturnDetail", b =>
                {
                    b.HasOne("Shared.CoreOne.Models.Domain.Items.Item", "Item")
                        .WithMany()
                        .HasForeignKey("ItemId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Shared.CoreOne.Models.Domain.Items.ItemPackage", "ItemPackage")
                        .WithMany()
                        .HasForeignKey("ItemPackageId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Purchases.CoreOne.Models.Domain.PurchaseInvoiceReturnHeader", "PurchaseInvoiceReturnHeader")
                        .WithMany()
                        .HasForeignKey("PurchaseInvoiceReturnHeaderId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Shared.CoreOne.Models.Domain.Taxes.Tax", "VatTax")
                        .WithMany()
                        .HasForeignKey("VatTaxId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Shared.CoreOne.Models.Domain.Taxes.TaxType", "VatTaxType")
                        .WithMany()
                        .HasForeignKey("VatTaxTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Item");

                    b.Navigation("ItemPackage");

                    b.Navigation("PurchaseInvoiceReturnHeader");

                    b.Navigation("VatTax");

                    b.Navigation("VatTaxType");
                });

            modelBuilder.Entity("Purchases.CoreOne.Models.Domain.PurchaseInvoiceReturnDetailTax", b =>
                {
                    b.HasOne("Shared.CoreOne.Models.Domain.Accounts.Account", "CreditAccount")
                        .WithMany()
                        .HasForeignKey("CreditAccountId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Purchases.CoreOne.Models.Domain.PurchaseInvoiceReturnDetail", "PurchaseInvoiceReturnDetail")
                        .WithMany()
                        .HasForeignKey("PurchaseInvoiceReturnDetailId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Shared.CoreOne.Models.Domain.Taxes.Tax", "Tax")
                        .WithMany()
                        .HasForeignKey("TaxId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Shared.CoreOne.Models.Domain.Taxes.TaxType", "TaxType")
                        .WithMany()
                        .HasForeignKey("TaxTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("CreditAccount");

                    b.Navigation("PurchaseInvoiceReturnDetail");

                    b.Navigation("Tax");

                    b.Navigation("TaxType");
                });

            modelBuilder.Entity("Purchases.CoreOne.Models.Domain.PurchaseInvoiceReturnHeader", b =>
                {
                    b.HasOne("Shared.CoreOne.Models.Domain.Archive.ArchiveHeader", "ArchiveHeader")
                        .WithMany()
                        .HasForeignKey("ArchiveHeaderId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Shared.CoreOne.Models.Domain.Accounts.Account", "CreditAccount")
                        .WithMany()
                        .HasForeignKey("CreditAccountId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Shared.CoreOne.Models.Domain.Accounts.Account", "DebitAccount")
                        .WithMany()
                        .HasForeignKey("DebitAccountId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Shared.CoreOne.Models.Domain.Journal.JournalHeader", "JournalHeader")
                        .WithMany()
                        .HasForeignKey("JournalHeaderId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Shared.CoreOne.Models.Domain.Menus.Menu", "Menu")
                        .WithMany()
                        .HasForeignKey("MenuCode")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Purchases.CoreOne.Models.Domain.PurchaseInvoiceHeader", "PurchaseInvoiceHeader")
                        .WithMany()
                        .HasForeignKey("PurchaseInvoiceHeaderId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Shared.CoreOne.Models.Domain.Modules.Store", "Store")
                        .WithMany()
                        .HasForeignKey("StoreId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Shared.CoreOne.Models.Domain.Modules.Supplier", "Supplier")
                        .WithMany()
                        .HasForeignKey("SupplierId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Shared.CoreOne.Models.Domain.Taxes.TaxType", "TaxType")
                        .WithMany()
                        .HasForeignKey("TaxTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("ArchiveHeader");

                    b.Navigation("CreditAccount");

                    b.Navigation("DebitAccount");

                    b.Navigation("JournalHeader");

                    b.Navigation("Menu");

                    b.Navigation("PurchaseInvoiceHeader");

                    b.Navigation("Store");

                    b.Navigation("Supplier");

                    b.Navigation("TaxType");
                });

            modelBuilder.Entity("Purchases.CoreOne.Models.Domain.PurchaseOrderDetail", b =>
                {
                    b.HasOne("Shared.CoreOne.Models.Domain.CostCenters.CostCenter", "CostCenter")
                        .WithMany()
                        .HasForeignKey("CostCenterId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Shared.CoreOne.Models.Domain.Items.Item", "Item")
                        .WithMany()
                        .HasForeignKey("ItemId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Shared.CoreOne.Models.Domain.Items.ItemPackage", "ItemPackage")
                        .WithMany()
                        .HasForeignKey("ItemPackageId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Purchases.CoreOne.Models.Domain.PurchaseOrderHeader", "PurchaseOrderHeader")
                        .WithMany()
                        .HasForeignKey("PurchaseOrderHeaderId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("CostCenter");

                    b.Navigation("Item");

                    b.Navigation("ItemPackage");

                    b.Navigation("PurchaseOrderHeader");
                });

            modelBuilder.Entity("Purchases.CoreOne.Models.Domain.PurchaseOrderDetailTax", b =>
                {
                    b.HasOne("Shared.CoreOne.Models.Domain.Accounts.Account", "DebitAccount")
                        .WithMany()
                        .HasForeignKey("DebitAccountId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Purchases.CoreOne.Models.Domain.PurchaseOrderDetail", "PurchaseOrderDetail")
                        .WithMany()
                        .HasForeignKey("PurchaseOrderDetailId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Shared.CoreOne.Models.Domain.Taxes.Tax", "Tax")
                        .WithMany()
                        .HasForeignKey("TaxId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("DebitAccount");

                    b.Navigation("PurchaseOrderDetail");

                    b.Navigation("Tax");
                });

            modelBuilder.Entity("Purchases.CoreOne.Models.Domain.PurchaseOrderHeader", b =>
                {
                    b.HasOne("Shared.CoreOne.Models.Domain.Archive.ArchiveHeader", "ArchiveHeader")
                        .WithMany()
                        .HasForeignKey("ArchiveHeaderId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Shared.CoreOne.Models.Domain.Basics.DocumentStatus", "DocumentStatus")
                        .WithMany()
                        .HasForeignKey("DocumentStatusId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Shared.CoreOne.Models.Domain.Modules.ShipmentType", "ShipmentType")
                        .WithMany()
                        .HasForeignKey("ShipmentTypeId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Shared.CoreOne.Models.Domain.Modules.Store", "Store")
                        .WithMany()
                        .HasForeignKey("StoreId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Shared.CoreOne.Models.Domain.Modules.Supplier", "Supplier")
                        .WithMany()
                        .HasForeignKey("SupplierId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Purchases.CoreOne.Models.Domain.SupplierQuotationHeader", "SupplierQuotationHeader")
                        .WithMany()
                        .HasForeignKey("SupplierQuotationHeaderId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Shared.CoreOne.Models.Domain.Taxes.TaxType", "TaxType")
                        .WithMany()
                        .HasForeignKey("TaxTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("ArchiveHeader");

                    b.Navigation("DocumentStatus");

                    b.Navigation("ShipmentType");

                    b.Navigation("Store");

                    b.Navigation("Supplier");

                    b.Navigation("SupplierQuotationHeader");

                    b.Navigation("TaxType");
                });

            modelBuilder.Entity("Purchases.CoreOne.Models.Domain.StockInDetail", b =>
                {
                    b.HasOne("Shared.CoreOne.Models.Domain.Items.Item", "Item")
                        .WithMany()
                        .HasForeignKey("ItemId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Shared.CoreOne.Models.Domain.Items.ItemPackage", "ItemPackage")
                        .WithMany()
                        .HasForeignKey("ItemPackageId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Purchases.CoreOne.Models.Domain.StockInHeader", "StockInHeader")
                        .WithMany()
                        .HasForeignKey("StockInHeaderId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Item");

                    b.Navigation("ItemPackage");

                    b.Navigation("StockInHeader");
                });

            modelBuilder.Entity("Purchases.CoreOne.Models.Domain.StockInDetailTax", b =>
                {
                    b.HasOne("Shared.CoreOne.Models.Domain.Accounts.Account", "DebitAccount")
                        .WithMany()
                        .HasForeignKey("DebitAccountId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Purchases.CoreOne.Models.Domain.StockInDetail", "StockInDetail")
                        .WithMany()
                        .HasForeignKey("StockInDetailId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Shared.CoreOne.Models.Domain.Taxes.Tax", "Tax")
                        .WithMany()
                        .HasForeignKey("TaxId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("DebitAccount");

                    b.Navigation("StockInDetail");

                    b.Navigation("Tax");
                });

            modelBuilder.Entity("Purchases.CoreOne.Models.Domain.StockInHeader", b =>
                {
                    b.HasOne("Shared.CoreOne.Models.Domain.Archive.ArchiveHeader", "ArchiveHeader")
                        .WithMany()
                        .HasForeignKey("ArchiveHeaderId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Shared.CoreOne.Models.Domain.Menus.Menu", "Menu")
                        .WithMany()
                        .HasForeignKey("MenuCode")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Purchases.CoreOne.Models.Domain.PurchaseInvoiceHeader", "PurchaseInvoiceHeader")
                        .WithMany()
                        .HasForeignKey("PurchaseInvoiceHeaderId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Purchases.CoreOne.Models.Domain.PurchaseOrderHeader", "PurchaseOrderHeader")
                        .WithMany()
                        .HasForeignKey("PurchaseOrderHeaderId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Shared.CoreOne.Models.Domain.Inventory.StockType", "StockType")
                        .WithMany()
                        .HasForeignKey("StockTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Shared.CoreOne.Models.Domain.Modules.Store", "Store")
                        .WithMany()
                        .HasForeignKey("StoreId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Shared.CoreOne.Models.Domain.Modules.Supplier", "Supplier")
                        .WithMany()
                        .HasForeignKey("SupplierId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("ArchiveHeader");

                    b.Navigation("Menu");

                    b.Navigation("PurchaseInvoiceHeader");

                    b.Navigation("PurchaseOrderHeader");

                    b.Navigation("StockType");

                    b.Navigation("Store");

                    b.Navigation("Supplier");
                });

            modelBuilder.Entity("Purchases.CoreOne.Models.Domain.StockInReturnDetail", b =>
                {
                    b.HasOne("Shared.CoreOne.Models.Domain.Items.Item", "Item")
                        .WithMany()
                        .HasForeignKey("ItemId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Shared.CoreOne.Models.Domain.Items.ItemPackage", "ItemPackage")
                        .WithMany()
                        .HasForeignKey("ItemPackageId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Purchases.CoreOne.Models.Domain.StockInReturnHeader", "StockInReturnHeader")
                        .WithMany()
                        .HasForeignKey("StockInReturnHeaderId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Item");

                    b.Navigation("ItemPackage");

                    b.Navigation("StockInReturnHeader");
                });

            modelBuilder.Entity("Purchases.CoreOne.Models.Domain.StockInReturnDetailTax", b =>
                {
                    b.HasOne("Shared.CoreOne.Models.Domain.Accounts.Account", "CreditAccount")
                        .WithMany()
                        .HasForeignKey("CreditAccountId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Purchases.CoreOne.Models.Domain.StockInReturnDetail", "StockInReturnDetail")
                        .WithMany()
                        .HasForeignKey("StockInReturnDetailId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Shared.CoreOne.Models.Domain.Taxes.Tax", "Tax")
                        .WithMany()
                        .HasForeignKey("TaxId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("CreditAccount");

                    b.Navigation("StockInReturnDetail");

                    b.Navigation("Tax");
                });

            modelBuilder.Entity("Purchases.CoreOne.Models.Domain.StockInReturnHeader", b =>
                {
                    b.HasOne("Shared.CoreOne.Models.Domain.Archive.ArchiveHeader", "ArchiveHeader")
                        .WithMany()
                        .HasForeignKey("ArchiveHeaderId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Shared.CoreOne.Models.Domain.Menus.Menu", "Menu")
                        .WithMany()
                        .HasForeignKey("MenuCode")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Purchases.CoreOne.Models.Domain.PurchaseInvoiceHeader", "PurchaseInvoiceHeader")
                        .WithMany()
                        .HasForeignKey("PurchaseInvoiceHeaderId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Purchases.CoreOne.Models.Domain.StockInHeader", "StockInHeader")
                        .WithMany()
                        .HasForeignKey("StockInHeaderId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Shared.CoreOne.Models.Domain.Inventory.StockType", "StockType")
                        .WithMany()
                        .HasForeignKey("StockTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Shared.CoreOne.Models.Domain.Modules.Store", "Store")
                        .WithMany()
                        .HasForeignKey("StoreId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Shared.CoreOne.Models.Domain.Modules.Supplier", "Supplier")
                        .WithMany()
                        .HasForeignKey("SupplierId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("ArchiveHeader");

                    b.Navigation("Menu");

                    b.Navigation("PurchaseInvoiceHeader");

                    b.Navigation("StockInHeader");

                    b.Navigation("StockType");

                    b.Navigation("Store");

                    b.Navigation("Supplier");
                });

            modelBuilder.Entity("Purchases.CoreOne.Models.Domain.SupplierCreditMemo", b =>
                {
                    b.HasOne("Shared.CoreOne.Models.Domain.Archive.ArchiveHeader", "ArchiveHeader")
                        .WithMany()
                        .HasForeignKey("ArchiveHeaderId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Shared.CoreOne.Models.Domain.Accounts.Account", "CreditAccount")
                        .WithMany()
                        .HasForeignKey("CreditAccountId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Shared.CoreOne.Models.Domain.Accounts.Account", "DebitAccount")
                        .WithMany()
                        .HasForeignKey("DebitAccountId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Shared.CoreOne.Models.Domain.Journal.JournalHeader", "JournalHeader")
                        .WithMany()
                        .HasForeignKey("JournalHeaderId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Purchases.CoreOne.Models.Domain.PurchaseInvoiceHeader", "PurchaseInvoiceHeader")
                        .WithMany()
                        .HasForeignKey("PurchaseInvoiceHeaderId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Shared.CoreOne.Models.Domain.Modules.Store", "Store")
                        .WithMany()
                        .HasForeignKey("StoreId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Shared.CoreOne.Models.Domain.Modules.Supplier", "Supplier")
                        .WithMany()
                        .HasForeignKey("SupplierId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("ArchiveHeader");

                    b.Navigation("CreditAccount");

                    b.Navigation("DebitAccount");

                    b.Navigation("JournalHeader");

                    b.Navigation("PurchaseInvoiceHeader");

                    b.Navigation("Store");

                    b.Navigation("Supplier");
                });

            modelBuilder.Entity("Purchases.CoreOne.Models.Domain.SupplierDebitMemo", b =>
                {
                    b.HasOne("Shared.CoreOne.Models.Domain.Archive.ArchiveHeader", "ArchiveHeader")
                        .WithMany()
                        .HasForeignKey("ArchiveHeaderId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Shared.CoreOne.Models.Domain.Accounts.Account", "CreditAccount")
                        .WithMany()
                        .HasForeignKey("CreditAccountId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Shared.CoreOne.Models.Domain.Accounts.Account", "DebitAccount")
                        .WithMany()
                        .HasForeignKey("DebitAccountId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Shared.CoreOne.Models.Domain.Journal.JournalHeader", "JournalHeader")
                        .WithMany()
                        .HasForeignKey("JournalHeaderId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Purchases.CoreOne.Models.Domain.PurchaseInvoiceHeader", "PurchaseInvoiceHeader")
                        .WithMany()
                        .HasForeignKey("PurchaseInvoiceHeaderId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Shared.CoreOne.Models.Domain.Modules.Store", "Store")
                        .WithMany()
                        .HasForeignKey("StoreId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Shared.CoreOne.Models.Domain.Modules.Supplier", "Supplier")
                        .WithMany()
                        .HasForeignKey("SupplierId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("ArchiveHeader");

                    b.Navigation("CreditAccount");

                    b.Navigation("DebitAccount");

                    b.Navigation("JournalHeader");

                    b.Navigation("PurchaseInvoiceHeader");

                    b.Navigation("Store");

                    b.Navigation("Supplier");
                });

            modelBuilder.Entity("Purchases.CoreOne.Models.Domain.SupplierQuotationDetail", b =>
                {
                    b.HasOne("Shared.CoreOne.Models.Domain.CostCenters.CostCenter", "CostCenter")
                        .WithMany()
                        .HasForeignKey("CostCenterId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Shared.CoreOne.Models.Domain.Items.Item", "Item")
                        .WithMany()
                        .HasForeignKey("ItemId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Shared.CoreOne.Models.Domain.Items.ItemPackage", "ItemPackage")
                        .WithMany()
                        .HasForeignKey("ItemPackageId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Purchases.CoreOne.Models.Domain.SupplierQuotationHeader", "SupplierQuotationHeader")
                        .WithMany()
                        .HasForeignKey("SupplierQuotationHeaderId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("CostCenter");

                    b.Navigation("Item");

                    b.Navigation("ItemPackage");

                    b.Navigation("SupplierQuotationHeader");
                });

            modelBuilder.Entity("Purchases.CoreOne.Models.Domain.SupplierQuotationDetailTax", b =>
                {
                    b.HasOne("Shared.CoreOne.Models.Domain.Accounts.Account", "DebitAccount")
                        .WithMany()
                        .HasForeignKey("DebitAccountId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Purchases.CoreOne.Models.Domain.SupplierQuotationDetail", "SupplierQuotationDetail")
                        .WithMany()
                        .HasForeignKey("SupplierQuotationDetailId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Shared.CoreOne.Models.Domain.Taxes.Tax", "Tax")
                        .WithMany()
                        .HasForeignKey("TaxId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("DebitAccount");

                    b.Navigation("SupplierQuotationDetail");

                    b.Navigation("Tax");
                });

            modelBuilder.Entity("Purchases.CoreOne.Models.Domain.SupplierQuotationHeader", b =>
                {
                    b.HasOne("Shared.CoreOne.Models.Domain.Archive.ArchiveHeader", "ArchiveHeader")
                        .WithMany()
                        .HasForeignKey("ArchiveHeaderId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Purchases.CoreOne.Models.Domain.ProductRequestPriceHeader", "ProductRequestPriceHeader")
                        .WithMany()
                        .HasForeignKey("ProductRequestPriceHeaderId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Shared.CoreOne.Models.Domain.Modules.Store", "Store")
                        .WithMany()
                        .HasForeignKey("StoreId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Shared.CoreOne.Models.Domain.Modules.Supplier", "Supplier")
                        .WithMany()
                        .HasForeignKey("SupplierId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Shared.CoreOne.Models.Domain.Taxes.TaxType", "TaxType")
                        .WithMany()
                        .HasForeignKey("TaxTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("ArchiveHeader");

                    b.Navigation("ProductRequestPriceHeader");

                    b.Navigation("Store");

                    b.Navigation("Supplier");

                    b.Navigation("TaxType");
                });

            modelBuilder.Entity("Sales.CoreOne.Models.Domain.ClientCreditMemo", b =>
                {
                    b.HasOne("Shared.CoreOne.Models.Domain.Archive.ArchiveHeader", "ArchiveHeader")
                        .WithMany()
                        .HasForeignKey("ArchiveHeaderId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Shared.CoreOne.Models.Domain.Modules.Client", "Client")
                        .WithMany()
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Shared.CoreOne.Models.Domain.Accounts.Account", "CreditAccount")
                        .WithMany()
                        .HasForeignKey("CreditAccountId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Shared.CoreOne.Models.Domain.Accounts.Account", "DebitAccount")
                        .WithMany()
                        .HasForeignKey("DebitAccountId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Shared.CoreOne.Models.Domain.Journal.JournalHeader", "JournalHeader")
                        .WithMany()
                        .HasForeignKey("JournalHeaderId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Sales.CoreOne.Models.Domain.SalesInvoiceHeader", "SalesInvoiceHeader")
                        .WithMany()
                        .HasForeignKey("SalesInvoiceHeaderId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Shared.CoreOne.Models.Domain.Modules.Seller", "Seller")
                        .WithMany()
                        .HasForeignKey("SellerId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Shared.CoreOne.Models.Domain.Modules.Store", "Store")
                        .WithMany()
                        .HasForeignKey("StoreId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("ArchiveHeader");

                    b.Navigation("Client");

                    b.Navigation("CreditAccount");

                    b.Navigation("DebitAccount");

                    b.Navigation("JournalHeader");

                    b.Navigation("SalesInvoiceHeader");

                    b.Navigation("Seller");

                    b.Navigation("Store");
                });

            modelBuilder.Entity("Sales.CoreOne.Models.Domain.ClientDebitMemo", b =>
                {
                    b.HasOne("Shared.CoreOne.Models.Domain.Archive.ArchiveHeader", "ArchiveHeader")
                        .WithMany()
                        .HasForeignKey("ArchiveHeaderId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Shared.CoreOne.Models.Domain.Modules.Client", "Client")
                        .WithMany()
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Shared.CoreOne.Models.Domain.Accounts.Account", "CreditAccount")
                        .WithMany()
                        .HasForeignKey("CreditAccountId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Shared.CoreOne.Models.Domain.Accounts.Account", "DebitAccount")
                        .WithMany()
                        .HasForeignKey("DebitAccountId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Shared.CoreOne.Models.Domain.Journal.JournalHeader", "JournalHeader")
                        .WithMany()
                        .HasForeignKey("JournalHeaderId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Sales.CoreOne.Models.Domain.SalesInvoiceHeader", "SalesInvoiceHeader")
                        .WithMany()
                        .HasForeignKey("SalesInvoiceHeaderId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Shared.CoreOne.Models.Domain.Modules.Seller", "Seller")
                        .WithMany()
                        .HasForeignKey("SellerId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Shared.CoreOne.Models.Domain.Modules.Store", "Store")
                        .WithMany()
                        .HasForeignKey("StoreId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("ArchiveHeader");

                    b.Navigation("Client");

                    b.Navigation("CreditAccount");

                    b.Navigation("DebitAccount");

                    b.Navigation("JournalHeader");

                    b.Navigation("SalesInvoiceHeader");

                    b.Navigation("Seller");

                    b.Navigation("Store");
                });

            modelBuilder.Entity("Sales.CoreOne.Models.Domain.ClientPriceRequestDetail", b =>
                {
                    b.HasOne("Sales.CoreOne.Models.Domain.ClientPriceRequestHeader", "ClientPriceRequestHeader")
                        .WithMany()
                        .HasForeignKey("ClientPriceRequestHeaderId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Shared.CoreOne.Models.Domain.CostCenters.CostCenter", "CostCenter")
                        .WithMany()
                        .HasForeignKey("CostCenterId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Shared.CoreOne.Models.Domain.Items.Item", "Item")
                        .WithMany()
                        .HasForeignKey("ItemId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Shared.CoreOne.Models.Domain.Items.ItemPackage", "ItemPackage")
                        .WithMany()
                        .HasForeignKey("ItemPackageId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("ClientPriceRequestHeader");

                    b.Navigation("CostCenter");

                    b.Navigation("Item");

                    b.Navigation("ItemPackage");
                });

            modelBuilder.Entity("Sales.CoreOne.Models.Domain.ClientPriceRequestHeader", b =>
                {
                    b.HasOne("Shared.CoreOne.Models.Domain.Archive.ArchiveHeader", "ArchiveHeader")
                        .WithMany()
                        .HasForeignKey("ArchiveHeaderId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Shared.CoreOne.Models.Domain.Modules.Client", "Client")
                        .WithMany()
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Shared.CoreOne.Models.Domain.Modules.Seller", "Seller")
                        .WithMany()
                        .HasForeignKey("SellerId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Shared.CoreOne.Models.Domain.Modules.Store", "Store")
                        .WithMany()
                        .HasForeignKey("StoreId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("ArchiveHeader");

                    b.Navigation("Client");

                    b.Navigation("Seller");

                    b.Navigation("Store");
                });

            modelBuilder.Entity("Sales.CoreOne.Models.Domain.ClientQuotationApprovalDetail", b =>
                {
                    b.HasOne("Sales.CoreOne.Models.Domain.ClientQuotationApprovalHeader", "ClientQuotationApprovalHeader")
                        .WithMany()
                        .HasForeignKey("ClientQuotationApprovalHeaderId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Shared.CoreOne.Models.Domain.CostCenters.CostCenter", "CostCenter")
                        .WithMany()
                        .HasForeignKey("CostCenterId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Shared.CoreOne.Models.Domain.Items.Item", "Item")
                        .WithMany()
                        .HasForeignKey("ItemId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Shared.CoreOne.Models.Domain.Items.ItemPackage", "ItemPackage")
                        .WithMany()
                        .HasForeignKey("ItemPackageId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("ClientQuotationApprovalHeader");

                    b.Navigation("CostCenter");

                    b.Navigation("Item");

                    b.Navigation("ItemPackage");
                });

            modelBuilder.Entity("Sales.CoreOne.Models.Domain.ClientQuotationApprovalDetailTax", b =>
                {
                    b.HasOne("Sales.CoreOne.Models.Domain.ClientQuotationApprovalDetail", "ClientQuotationApprovalDetail")
                        .WithMany()
                        .HasForeignKey("ClientQuotationApprovalDetailId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Shared.CoreOne.Models.Domain.Accounts.Account", "CreditAccount")
                        .WithMany()
                        .HasForeignKey("CreditAccountId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Shared.CoreOne.Models.Domain.Taxes.Tax", "Tax")
                        .WithMany()
                        .HasForeignKey("TaxId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("ClientQuotationApprovalDetail");

                    b.Navigation("CreditAccount");

                    b.Navigation("Tax");
                });

            modelBuilder.Entity("Sales.CoreOne.Models.Domain.ClientQuotationApprovalHeader", b =>
                {
                    b.HasOne("Shared.CoreOne.Models.Domain.Archive.ArchiveHeader", "ArchiveHeader")
                        .WithMany()
                        .HasForeignKey("ArchiveHeaderId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Shared.CoreOne.Models.Domain.Modules.Client", "Client")
                        .WithMany()
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Sales.CoreOne.Models.Domain.ClientQuotationHeader", "ClientQuotationHeader")
                        .WithMany()
                        .HasForeignKey("ClientQuotationHeaderId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Shared.CoreOne.Models.Domain.Modules.Seller", "Seller")
                        .WithMany()
                        .HasForeignKey("SellerId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Shared.CoreOne.Models.Domain.Modules.Store", "Store")
                        .WithMany()
                        .HasForeignKey("StoreId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Shared.CoreOne.Models.Domain.Taxes.TaxType", "TaxType")
                        .WithMany()
                        .HasForeignKey("TaxTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("ArchiveHeader");

                    b.Navigation("Client");

                    b.Navigation("ClientQuotationHeader");

                    b.Navigation("Seller");

                    b.Navigation("Store");

                    b.Navigation("TaxType");
                });

            modelBuilder.Entity("Sales.CoreOne.Models.Domain.ClientQuotationDetail", b =>
                {
                    b.HasOne("Sales.CoreOne.Models.Domain.ClientQuotationHeader", "ClientQuotationHeader")
                        .WithMany()
                        .HasForeignKey("ClientQuotationHeaderId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Shared.CoreOne.Models.Domain.CostCenters.CostCenter", "CostCenter")
                        .WithMany()
                        .HasForeignKey("CostCenterId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Shared.CoreOne.Models.Domain.Items.Item", "Item")
                        .WithMany()
                        .HasForeignKey("ItemId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Shared.CoreOne.Models.Domain.Items.ItemPackage", "ItemPackage")
                        .WithMany()
                        .HasForeignKey("ItemPackageId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("ClientQuotationHeader");

                    b.Navigation("CostCenter");

                    b.Navigation("Item");

                    b.Navigation("ItemPackage");
                });

            modelBuilder.Entity("Sales.CoreOne.Models.Domain.ClientQuotationDetailTax", b =>
                {
                    b.HasOne("Sales.CoreOne.Models.Domain.ClientQuotationDetail", "ClientQuotationDetail")
                        .WithMany()
                        .HasForeignKey("ClientQuotationDetailId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Shared.CoreOne.Models.Domain.Accounts.Account", "CreditAccount")
                        .WithMany()
                        .HasForeignKey("CreditAccountId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Shared.CoreOne.Models.Domain.Taxes.Tax", "Tax")
                        .WithMany()
                        .HasForeignKey("TaxId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("ClientQuotationDetail");

                    b.Navigation("CreditAccount");

                    b.Navigation("Tax");
                });

            modelBuilder.Entity("Sales.CoreOne.Models.Domain.ClientQuotationHeader", b =>
                {
                    b.HasOne("Shared.CoreOne.Models.Domain.Archive.ArchiveHeader", "ArchiveHeader")
                        .WithMany()
                        .HasForeignKey("ArchiveHeaderId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Shared.CoreOne.Models.Domain.Modules.Client", "Client")
                        .WithMany()
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Sales.CoreOne.Models.Domain.ClientPriceRequestHeader", "ClientPriceRequestHeader")
                        .WithMany()
                        .HasForeignKey("ClientPriceRequestHeaderId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Shared.CoreOne.Models.Domain.Modules.Seller", "Seller")
                        .WithMany()
                        .HasForeignKey("SellerId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Shared.CoreOne.Models.Domain.Modules.Store", "Store")
                        .WithMany()
                        .HasForeignKey("StoreId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Shared.CoreOne.Models.Domain.Taxes.TaxType", "TaxType")
                        .WithMany()
                        .HasForeignKey("TaxTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("ArchiveHeader");

                    b.Navigation("Client");

                    b.Navigation("ClientPriceRequestHeader");

                    b.Navigation("Seller");

                    b.Navigation("Store");

                    b.Navigation("TaxType");
                });

            modelBuilder.Entity("Sales.CoreOne.Models.Domain.InvoiceStockOut", b =>
                {
                    b.HasOne("Sales.CoreOne.Models.Domain.SalesInvoiceHeader", "SalesInvoiceHeader")
                        .WithMany()
                        .HasForeignKey("SalesInvoiceHeaderId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Sales.CoreOne.Models.Domain.StockOutHeader", "StockOutHeader")
                        .WithMany()
                        .HasForeignKey("StockOutHeaderId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("SalesInvoiceHeader");

                    b.Navigation("StockOutHeader");
                });

            modelBuilder.Entity("Sales.CoreOne.Models.Domain.InvoiceStockOutReturn", b =>
                {
                    b.HasOne("Sales.CoreOne.Models.Domain.SalesInvoiceReturnHeader", "SalesInvoiceReturnHeader")
                        .WithMany()
                        .HasForeignKey("SalesInvoiceReturnHeaderId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Sales.CoreOne.Models.Domain.StockOutReturnHeader", "StockOutReturnHeader")
                        .WithMany()
                        .HasForeignKey("StockOutReturnHeaderId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("SalesInvoiceReturnHeader");

                    b.Navigation("StockOutReturnHeader");
                });

            modelBuilder.Entity("Sales.CoreOne.Models.Domain.ProformaInvoiceDetail", b =>
                {
                    b.HasOne("Shared.CoreOne.Models.Domain.CostCenters.CostCenter", "CostCenter")
                        .WithMany()
                        .HasForeignKey("CostCenterId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Shared.CoreOne.Models.Domain.Items.Item", "Item")
                        .WithMany()
                        .HasForeignKey("ItemId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Shared.CoreOne.Models.Domain.Items.ItemPackage", "ItemPackage")
                        .WithMany()
                        .HasForeignKey("ItemPackageId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Sales.CoreOne.Models.Domain.ProformaInvoiceHeader", "ProformaInvoiceHeader")
                        .WithMany()
                        .HasForeignKey("ProformaInvoiceHeaderId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("CostCenter");

                    b.Navigation("Item");

                    b.Navigation("ItemPackage");

                    b.Navigation("ProformaInvoiceHeader");
                });

            modelBuilder.Entity("Sales.CoreOne.Models.Domain.ProformaInvoiceDetailTax", b =>
                {
                    b.HasOne("Shared.CoreOne.Models.Domain.Accounts.Account", "CreditAccount")
                        .WithMany()
                        .HasForeignKey("CreditAccountId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Sales.CoreOne.Models.Domain.ProformaInvoiceDetail", "ProformaInvoiceDetail")
                        .WithMany()
                        .HasForeignKey("ProformaInvoiceDetailId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Shared.CoreOne.Models.Domain.Taxes.Tax", "Tax")
                        .WithMany()
                        .HasForeignKey("TaxId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("CreditAccount");

                    b.Navigation("ProformaInvoiceDetail");

                    b.Navigation("Tax");
                });

            modelBuilder.Entity("Sales.CoreOne.Models.Domain.ProformaInvoiceHeader", b =>
                {
                    b.HasOne("Shared.CoreOne.Models.Domain.Archive.ArchiveHeader", "ArchiveHeader")
                        .WithMany()
                        .HasForeignKey("ArchiveHeaderId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Shared.CoreOne.Models.Domain.Modules.Client", "Client")
                        .WithMany()
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Sales.CoreOne.Models.Domain.ClientQuotationApprovalHeader", "ClientQuotationApprovalHeader")
                        .WithMany()
                        .HasForeignKey("ClientQuotationApprovalHeaderId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Shared.CoreOne.Models.Domain.Basics.DocumentStatus", "DocumentStatus")
                        .WithMany()
                        .HasForeignKey("DocumentStatusId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Shared.CoreOne.Models.Domain.Modules.Seller", "Seller")
                        .WithMany()
                        .HasForeignKey("SellerId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Shared.CoreOne.Models.Domain.Modules.ShipmentType", "ShipmentType")
                        .WithMany()
                        .HasForeignKey("ShipmentTypeId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Shared.CoreOne.Models.Domain.Basics.ShippingStatus", "ShippingStatus")
                        .WithMany()
                        .HasForeignKey("ShippingStatusId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Shared.CoreOne.Models.Domain.Modules.Store", "Store")
                        .WithMany()
                        .HasForeignKey("StoreId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Shared.CoreOne.Models.Domain.Taxes.TaxType", "TaxType")
                        .WithMany()
                        .HasForeignKey("TaxTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("ArchiveHeader");

                    b.Navigation("Client");

                    b.Navigation("ClientQuotationApprovalHeader");

                    b.Navigation("DocumentStatus");

                    b.Navigation("Seller");

                    b.Navigation("ShipmentType");

                    b.Navigation("ShippingStatus");

                    b.Navigation("Store");

                    b.Navigation("TaxType");
                });

            modelBuilder.Entity("Sales.CoreOne.Models.Domain.SalesInvoiceCollection", b =>
                {
                    b.HasOne("Shared.CoreOne.Models.Domain.Accounts.Account", "Account")
                        .WithMany()
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Shared.CoreOne.Models.Domain.Modules.Currency", "Currency")
                        .WithMany()
                        .HasForeignKey("CurrencyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Shared.CoreOne.Models.Domain.Modules.PaymentMethod", "PaymentMethod")
                        .WithMany()
                        .HasForeignKey("PaymentMethodId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Sales.CoreOne.Models.Domain.SalesInvoiceHeader", "SalesInvoiceHeader")
                        .WithMany()
                        .HasForeignKey("SalesInvoiceHeaderId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Account");

                    b.Navigation("Currency");

                    b.Navigation("PaymentMethod");

                    b.Navigation("SalesInvoiceHeader");
                });

            modelBuilder.Entity("Sales.CoreOne.Models.Domain.SalesInvoiceDetail", b =>
                {
                    b.HasOne("Shared.CoreOne.Models.Domain.Items.Item", "Item")
                        .WithMany()
                        .HasForeignKey("ItemId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Shared.CoreOne.Models.Domain.Items.ItemPackage", "ItemPackage")
                        .WithMany()
                        .HasForeignKey("ItemPackageId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Sales.CoreOne.Models.Domain.SalesInvoiceHeader", "SalesInvoiceHeader")
                        .WithMany()
                        .HasForeignKey("SalesInvoiceHeaderId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Shared.CoreOne.Models.Domain.Taxes.Tax", "VatTax")
                        .WithMany()
                        .HasForeignKey("VatTaxId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Shared.CoreOne.Models.Domain.Taxes.TaxType", "VatTaxType")
                        .WithMany()
                        .HasForeignKey("VatTaxTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Item");

                    b.Navigation("ItemPackage");

                    b.Navigation("SalesInvoiceHeader");

                    b.Navigation("VatTax");

                    b.Navigation("VatTaxType");
                });

            modelBuilder.Entity("Sales.CoreOne.Models.Domain.SalesInvoiceDetailTax", b =>
                {
                    b.HasOne("Sales.CoreOne.Models.Domain.SalesInvoiceDetail", "SalesInvoiceDetail")
                        .WithMany()
                        .HasForeignKey("SalesInvoiceDetailId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Shared.CoreOne.Models.Domain.Taxes.Tax", "Tax")
                        .WithMany()
                        .HasForeignKey("TaxId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Shared.CoreOne.Models.Domain.Taxes.TaxType", "TaxType")
                        .WithMany()
                        .HasForeignKey("TaxTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("SalesInvoiceDetail");

                    b.Navigation("Tax");

                    b.Navigation("TaxType");
                });

            modelBuilder.Entity("Sales.CoreOne.Models.Domain.SalesInvoiceHeader", b =>
                {
                    b.HasOne("Shared.CoreOne.Models.Domain.Archive.ArchiveHeader", "ArchiveHeader")
                        .WithMany()
                        .HasForeignKey("ArchiveHeaderId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Shared.CoreOne.Models.Domain.Modules.Client", "Client")
                        .WithMany()
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Shared.CoreOne.Models.Domain.Accounts.Account", "CreditAccount")
                        .WithMany()
                        .HasForeignKey("CreditAccountId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Shared.CoreOne.Models.Domain.Accounts.Account", "DebitAccount")
                        .WithMany()
                        .HasForeignKey("DebitAccountId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Shared.CoreOne.Models.Domain.Basics.InvoiceType", "InvoiceType")
                        .WithMany()
                        .HasForeignKey("InvoiceTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Shared.CoreOne.Models.Domain.Journal.JournalHeader", "JournalHeader")
                        .WithMany()
                        .HasForeignKey("JournalHeaderId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Shared.CoreOne.Models.Domain.Menus.Menu", "Menu")
                        .WithMany()
                        .HasForeignKey("MenuCode")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Sales.CoreOne.Models.Domain.ProformaInvoiceHeader", "ProformaInvoiceHeader")
                        .WithMany()
                        .HasForeignKey("ProformaInvoiceHeaderId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Shared.CoreOne.Models.Domain.Modules.Seller", "Seller")
                        .WithMany()
                        .HasForeignKey("SellerId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Shared.CoreOne.Models.Domain.Modules.ShipmentType", "ShipmentType")
                        .WithMany()
                        .HasForeignKey("ShipmentTypeId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Shared.CoreOne.Models.Domain.Modules.Store", "Store")
                        .WithMany()
                        .HasForeignKey("StoreId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Shared.CoreOne.Models.Domain.Taxes.TaxType", "TaxType")
                        .WithMany()
                        .HasForeignKey("TaxTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("ArchiveHeader");

                    b.Navigation("Client");

                    b.Navigation("CreditAccount");

                    b.Navigation("DebitAccount");

                    b.Navigation("InvoiceType");

                    b.Navigation("JournalHeader");

                    b.Navigation("Menu");

                    b.Navigation("ProformaInvoiceHeader");

                    b.Navigation("Seller");

                    b.Navigation("ShipmentType");

                    b.Navigation("Store");

                    b.Navigation("TaxType");
                });

            modelBuilder.Entity("Sales.CoreOne.Models.Domain.SalesInvoiceReturnDetail", b =>
                {
                    b.HasOne("Shared.CoreOne.Models.Domain.Items.Item", "Item")
                        .WithMany()
                        .HasForeignKey("ItemId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Shared.CoreOne.Models.Domain.Items.ItemPackage", "ItemPackage")
                        .WithMany()
                        .HasForeignKey("ItemPackageId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Sales.CoreOne.Models.Domain.SalesInvoiceReturnHeader", "SalesInvoiceReturnHeader")
                        .WithMany()
                        .HasForeignKey("SalesInvoiceReturnHeaderId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Shared.CoreOne.Models.Domain.Taxes.Tax", "VatTax")
                        .WithMany()
                        .HasForeignKey("VatTaxId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Shared.CoreOne.Models.Domain.Taxes.TaxType", "VatTaxType")
                        .WithMany()
                        .HasForeignKey("VatTaxTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Item");

                    b.Navigation("ItemPackage");

                    b.Navigation("SalesInvoiceReturnHeader");

                    b.Navigation("VatTax");

                    b.Navigation("VatTaxType");
                });

            modelBuilder.Entity("Sales.CoreOne.Models.Domain.SalesInvoiceReturnDetailTax", b =>
                {
                    b.HasOne("Shared.CoreOne.Models.Domain.Accounts.Account", "DebitAccount")
                        .WithMany()
                        .HasForeignKey("DebitAccountId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Sales.CoreOne.Models.Domain.SalesInvoiceReturnDetail", "SalesInvoiceReturnDetail")
                        .WithMany()
                        .HasForeignKey("SalesInvoiceReturnDetailId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Shared.CoreOne.Models.Domain.Taxes.Tax", "Tax")
                        .WithMany()
                        .HasForeignKey("TaxId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Shared.CoreOne.Models.Domain.Taxes.TaxType", "TaxType")
                        .WithMany()
                        .HasForeignKey("TaxTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("DebitAccount");

                    b.Navigation("SalesInvoiceReturnDetail");

                    b.Navigation("Tax");

                    b.Navigation("TaxType");
                });

            modelBuilder.Entity("Sales.CoreOne.Models.Domain.SalesInvoiceReturnHeader", b =>
                {
                    b.HasOne("Shared.CoreOne.Models.Domain.Archive.ArchiveHeader", "ArchiveHeader")
                        .WithMany()
                        .HasForeignKey("ArchiveHeaderId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Shared.CoreOne.Models.Domain.Modules.Client", "Client")
                        .WithMany()
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Shared.CoreOne.Models.Domain.Accounts.Account", "CreditAccount")
                        .WithMany()
                        .HasForeignKey("CreditAccountId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Shared.CoreOne.Models.Domain.Accounts.Account", "DebitAccount")
                        .WithMany()
                        .HasForeignKey("DebitAccountId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Shared.CoreOne.Models.Domain.Journal.JournalHeader", "JournalHeader")
                        .WithMany()
                        .HasForeignKey("JournalHeaderId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Shared.CoreOne.Models.Domain.Menus.Menu", "Menu")
                        .WithMany()
                        .HasForeignKey("MenuCode")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Sales.CoreOne.Models.Domain.SalesInvoiceHeader", "SalesInvoiceHeader")
                        .WithMany()
                        .HasForeignKey("SalesInvoiceHeaderId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Shared.CoreOne.Models.Domain.Modules.Seller", "Seller")
                        .WithMany()
                        .HasForeignKey("SellerId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Shared.CoreOne.Models.Domain.Modules.ShipmentType", "ShipmentType")
                        .WithMany()
                        .HasForeignKey("ShipmentTypeId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Shared.CoreOne.Models.Domain.Modules.Store", "Store")
                        .WithMany()
                        .HasForeignKey("StoreId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Shared.CoreOne.Models.Domain.Taxes.TaxType", "TaxType")
                        .WithMany()
                        .HasForeignKey("TaxTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("ArchiveHeader");

                    b.Navigation("Client");

                    b.Navigation("CreditAccount");

                    b.Navigation("DebitAccount");

                    b.Navigation("JournalHeader");

                    b.Navigation("Menu");

                    b.Navigation("SalesInvoiceHeader");

                    b.Navigation("Seller");

                    b.Navigation("ShipmentType");

                    b.Navigation("Store");

                    b.Navigation("TaxType");
                });

            modelBuilder.Entity("Sales.CoreOne.Models.Domain.SalesInvoiceReturnPayment", b =>
                {
                    b.HasOne("Shared.CoreOne.Models.Domain.Accounts.Account", "Account")
                        .WithMany()
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Shared.CoreOne.Models.Domain.Modules.Currency", "Currency")
                        .WithMany()
                        .HasForeignKey("CurrencyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Shared.CoreOne.Models.Domain.Modules.PaymentMethod", "PaymentMethod")
                        .WithMany()
                        .HasForeignKey("PaymentMethodId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Sales.CoreOne.Models.Domain.SalesInvoiceReturnHeader", "SalesInvoiceReturnHeader")
                        .WithMany()
                        .HasForeignKey("SalesInvoiceReturnHeaderId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Account");

                    b.Navigation("Currency");

                    b.Navigation("PaymentMethod");

                    b.Navigation("SalesInvoiceReturnHeader");
                });

            modelBuilder.Entity("Sales.CoreOne.Models.Domain.StockOutDetail", b =>
                {
                    b.HasOne("Shared.CoreOne.Models.Domain.Items.Item", "Item")
                        .WithMany()
                        .HasForeignKey("ItemId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Shared.CoreOne.Models.Domain.Items.ItemPackage", "ItemPackage")
                        .WithMany()
                        .HasForeignKey("ItemPackageId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Sales.CoreOne.Models.Domain.StockOutHeader", "StockOutHeader")
                        .WithMany()
                        .HasForeignKey("StockOutHeaderId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Item");

                    b.Navigation("ItemPackage");

                    b.Navigation("StockOutHeader");
                });

            modelBuilder.Entity("Sales.CoreOne.Models.Domain.StockOutDetailTax", b =>
                {
                    b.HasOne("Sales.CoreOne.Models.Domain.StockOutDetail", "StockOutDetail")
                        .WithMany()
                        .HasForeignKey("StockOutDetailId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Shared.CoreOne.Models.Domain.Taxes.Tax", "Tax")
                        .WithMany()
                        .HasForeignKey("TaxId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("StockOutDetail");

                    b.Navigation("Tax");
                });

            modelBuilder.Entity("Sales.CoreOne.Models.Domain.StockOutHeader", b =>
                {
                    b.HasOne("Shared.CoreOne.Models.Domain.Archive.ArchiveHeader", "ArchiveHeader")
                        .WithMany()
                        .HasForeignKey("ArchiveHeaderId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Shared.CoreOne.Models.Domain.Modules.Client", "Client")
                        .WithMany()
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Shared.CoreOne.Models.Domain.Menus.Menu", "Menu")
                        .WithMany()
                        .HasForeignKey("MenuCode")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Sales.CoreOne.Models.Domain.ProformaInvoiceHeader", "ProformaInvoiceHeader")
                        .WithMany()
                        .HasForeignKey("ProformaInvoiceHeaderId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Sales.CoreOne.Models.Domain.SalesInvoiceHeader", "SalesInvoiceHeader")
                        .WithMany()
                        .HasForeignKey("SalesInvoiceHeaderId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Shared.CoreOne.Models.Domain.Inventory.StockType", "StockType")
                        .WithMany()
                        .HasForeignKey("StockTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Shared.CoreOne.Models.Domain.Modules.Store", "Store")
                        .WithMany()
                        .HasForeignKey("StoreId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("ArchiveHeader");

                    b.Navigation("Client");

                    b.Navigation("Menu");

                    b.Navigation("ProformaInvoiceHeader");

                    b.Navigation("SalesInvoiceHeader");

                    b.Navigation("StockType");

                    b.Navigation("Store");
                });

            modelBuilder.Entity("Sales.CoreOne.Models.Domain.StockOutReturnDetail", b =>
                {
                    b.HasOne("Shared.CoreOne.Models.Domain.Items.Item", "Item")
                        .WithMany()
                        .HasForeignKey("ItemId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Shared.CoreOne.Models.Domain.Items.ItemPackage", "ItemPackage")
                        .WithMany()
                        .HasForeignKey("ItemPackageId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Sales.CoreOne.Models.Domain.StockOutReturnHeader", "StockOutReturnHeader")
                        .WithMany()
                        .HasForeignKey("StockOutReturnHeaderId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Item");

                    b.Navigation("ItemPackage");

                    b.Navigation("StockOutReturnHeader");
                });

            modelBuilder.Entity("Sales.CoreOne.Models.Domain.StockOutReturnDetailTax", b =>
                {
                    b.HasOne("Sales.CoreOne.Models.Domain.StockOutReturnDetail", "StockOutReturnDetail")
                        .WithMany()
                        .HasForeignKey("StockOutReturnDetailId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Shared.CoreOne.Models.Domain.Taxes.Tax", "Tax")
                        .WithMany()
                        .HasForeignKey("TaxId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("StockOutReturnDetail");

                    b.Navigation("Tax");
                });

            modelBuilder.Entity("Sales.CoreOne.Models.Domain.StockOutReturnHeader", b =>
                {
                    b.HasOne("Shared.CoreOne.Models.Domain.Archive.ArchiveHeader", "ArchiveHeader")
                        .WithMany()
                        .HasForeignKey("ArchiveHeaderId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Shared.CoreOne.Models.Domain.Modules.Client", "Client")
                        .WithMany()
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Shared.CoreOne.Models.Domain.Menus.Menu", "Menu")
                        .WithMany()
                        .HasForeignKey("MenuCode")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Sales.CoreOne.Models.Domain.SalesInvoiceHeader", "SalesInvoiceHeader")
                        .WithMany()
                        .HasForeignKey("SalesInvoiceHeaderId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Shared.CoreOne.Models.Domain.Modules.Seller", "Seller")
                        .WithMany()
                        .HasForeignKey("SellerId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Sales.CoreOne.Models.Domain.StockOutHeader", "StockOutHeader")
                        .WithMany()
                        .HasForeignKey("StockOutHeaderId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Shared.CoreOne.Models.Domain.Inventory.StockType", "StockType")
                        .WithMany()
                        .HasForeignKey("StockTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Shared.CoreOne.Models.Domain.Modules.Store", "Store")
                        .WithMany()
                        .HasForeignKey("StoreId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("ArchiveHeader");

                    b.Navigation("Client");

                    b.Navigation("Menu");

                    b.Navigation("SalesInvoiceHeader");

                    b.Navigation("Seller");

                    b.Navigation("StockOutHeader");

                    b.Navigation("StockType");

                    b.Navigation("Store");
                });

            modelBuilder.Entity("Shared.CoreOne.Models.Domain.Accounts.Account", b =>
                {
                    b.HasOne("Shared.CoreOne.Models.Domain.Accounts.AccountCategory", "AccountCategory")
                        .WithMany()
                        .HasForeignKey("AccountCategoryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Shared.CoreOne.Models.Domain.Accounts.AccountType", "AccountType")
                        .WithMany()
                        .HasForeignKey("AccountTypeId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Shared.CoreOne.Models.Domain.Archive.ArchiveHeader", "ArchiveHeader")
                        .WithMany()
                        .HasForeignKey("ArchiveHeaderId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Shared.CoreOne.Models.Domain.Modules.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Shared.CoreOne.Models.Domain.CostCenters.CostCenter", "CostCenter")
                        .WithMany()
                        .HasForeignKey("CostCenterId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Shared.CoreOne.Models.Domain.Modules.Currency", "Currency")
                        .WithMany()
                        .HasForeignKey("CurrencyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("AccountCategory");

                    b.Navigation("AccountType");

                    b.Navigation("ArchiveHeader");

                    b.Navigation("Company");

                    b.Navigation("CostCenter");

                    b.Navigation("Currency");
                });

            modelBuilder.Entity("Shared.CoreOne.Models.Domain.Accounts.AccountCategory", b =>
                {
                    b.HasOne("Shared.CoreOne.Models.Domain.Accounts.AccountLedger", "AccountLedger")
                        .WithMany()
                        .HasForeignKey("AccountLedgerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("AccountLedger");
                });

            modelBuilder.Entity("Shared.CoreOne.Models.Domain.Accounts.AccountStore", b =>
                {
                    b.HasOne("Shared.CoreOne.Models.Domain.Accounts.AccountStoreType", "AccountStoreType")
                        .WithMany()
                        .HasForeignKey("AccountStoreTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Shared.CoreOne.Models.Domain.Accounts.Account", "Account")
                        .WithMany()
                        .HasForeignKey("StoreId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Shared.CoreOne.Models.Domain.Modules.Store", "Store")
                        .WithMany()
                        .HasForeignKey("StoreId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Account");

                    b.Navigation("AccountStoreType");

                    b.Navigation("Store");
                });

            modelBuilder.Entity("Shared.CoreOne.Models.Domain.Approval.Approve", b =>
                {
                    b.HasOne("Shared.CoreOne.Models.Domain.Modules.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Shared.CoreOne.Models.Domain.Menus.Menu", "Menu")
                        .WithMany()
                        .HasForeignKey("MenuCode")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Company");

                    b.Navigation("Menu");
                });

            modelBuilder.Entity("Shared.CoreOne.Models.Domain.Approval.ApproveRequest", b =>
                {
                    b.HasOne("Shared.CoreOne.Models.Domain.Approval.Approve", "Approve")
                        .WithMany()
                        .HasForeignKey("ApproveId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Shared.CoreOne.Models.Domain.Approval.ApproveRequestType", "ApproveRequestType")
                        .WithMany()
                        .HasForeignKey("ApproveRequestTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Shared.CoreOne.Models.Domain.Modules.Branch", "Branch")
                        .WithMany()
                        .HasForeignKey("BranchId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Shared.CoreOne.Models.Domain.Modules.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Shared.CoreOne.Models.Domain.Approval.ApproveStatus", "CurrentApproveStatus")
                        .WithMany()
                        .HasForeignKey("CurrentStatusId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Shared.CoreOne.Models.Domain.Approval.ApproveStep", "CurrentApproveStep")
                        .WithMany()
                        .HasForeignKey("CurrentStepId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Shared.CoreOne.Models.Domain.Approval.ApproveStatus", "LastApproveStatus")
                        .WithMany()
                        .HasForeignKey("LastStatusId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Shared.CoreOne.Models.Domain.Approval.ApproveStep", "LastApproveStep")
                        .WithMany()
                        .HasForeignKey("LastStepId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Shared.CoreOne.Models.Domain.Menus.Menu", "Menu")
                        .WithMany()
                        .HasForeignKey("MenuCode")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Shared.CoreOne.Models.Domain.Modules.Store", "Store")
                        .WithMany()
                        .HasForeignKey("StoreId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Approve");

                    b.Navigation("ApproveRequestType");

                    b.Navigation("Branch");

                    b.Navigation("Company");

                    b.Navigation("CurrentApproveStatus");

                    b.Navigation("CurrentApproveStep");

                    b.Navigation("LastApproveStatus");

                    b.Navigation("LastApproveStep");

                    b.Navigation("Menu");

                    b.Navigation("Store");
                });

            modelBuilder.Entity("Shared.CoreOne.Models.Domain.Approval.ApproveRequestDetail", b =>
                {
                    b.HasOne("Shared.CoreOne.Models.Domain.Approval.ApproveRequest", "ApproveRequest")
                        .WithMany()
                        .HasForeignKey("ApproveRequestId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("ApproveRequest");
                });

            modelBuilder.Entity("Shared.CoreOne.Models.Domain.Approval.ApproveRequestUser", b =>
                {
                    b.HasOne("Shared.CoreOne.Models.Domain.Approval.ApproveRequest", "ApproveRequest")
                        .WithMany()
                        .HasForeignKey("RequestId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Shared.CoreOne.Models.Domain.Approval.ApproveStatus", "ApproveStatus")
                        .WithMany()
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Shared.CoreOne.Models.Domain.Approval.ApproveStep", "ApproveStep")
                        .WithMany()
                        .HasForeignKey("StepId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("ApproveRequest");

                    b.Navigation("ApproveStatus");

                    b.Navigation("ApproveStep");
                });

            modelBuilder.Entity("Shared.CoreOne.Models.Domain.Approval.ApproveStatus", b =>
                {
                    b.HasOne("Shared.CoreOne.Models.Domain.Approval.ApproveStep", "ApproveStep")
                        .WithMany()
                        .HasForeignKey("ApproveStepId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("ApproveStep");
                });

            modelBuilder.Entity("Shared.CoreOne.Models.Domain.Approval.ApproveStep", b =>
                {
                    b.HasOne("Shared.CoreOne.Models.Domain.Approval.Approve", "Approve")
                        .WithMany()
                        .HasForeignKey("ApproveId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Approve");
                });

            modelBuilder.Entity("Shared.CoreOne.Models.Domain.Archive.ArchiveDetail", b =>
                {
                    b.HasOne("Shared.CoreOne.Models.Domain.Archive.ArchiveHeader", "ArchiveHeader")
                        .WithMany()
                        .HasForeignKey("ArchiveHeaderId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("ArchiveHeader");
                });

            modelBuilder.Entity("Shared.CoreOne.Models.Domain.Archive.ArchiveHeader", b =>
                {
                    b.HasOne("Shared.CoreOne.Models.Domain.Menus.Menu", "Menu")
                        .WithMany()
                        .HasForeignKey("MenuCode")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Menu");
                });

            modelBuilder.Entity("Shared.CoreOne.Models.Domain.Basics.City", b =>
                {
                    b.HasOne("Shared.CoreOne.Models.Domain.Basics.State", "State")
                        .WithMany()
                        .HasForeignKey("StateId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("State");
                });

            modelBuilder.Entity("Shared.CoreOne.Models.Domain.Basics.Country", b =>
                {
                    b.HasOne("Shared.CoreOne.Models.Domain.Modules.Currency", "Currency")
                        .WithMany()
                        .HasForeignKey("CurrencyId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Currency");
                });

            modelBuilder.Entity("Shared.CoreOne.Models.Domain.Basics.District", b =>
                {
                    b.HasOne("Shared.CoreOne.Models.Domain.Basics.City", "City")
                        .WithMany()
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("City");
                });

            modelBuilder.Entity("Shared.CoreOne.Models.Domain.Basics.InvoiceExpenseType", b =>
                {
                    b.HasOne("Shared.CoreOne.Models.Domain.Modules.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Company");
                });

            modelBuilder.Entity("Shared.CoreOne.Models.Domain.Basics.ShippingStatus", b =>
                {
                    b.HasOne("Shared.CoreOne.Models.Domain.Modules.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Shared.CoreOne.Models.Domain.Menus.Menu", "Menu")
                        .WithMany()
                        .HasForeignKey("MenuCode")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Company");

                    b.Navigation("Menu");
                });

            modelBuilder.Entity("Shared.CoreOne.Models.Domain.Basics.State", b =>
                {
                    b.HasOne("Shared.CoreOne.Models.Domain.Basics.Country", "Country")
                        .WithMany()
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Country");
                });

            modelBuilder.Entity("Shared.CoreOne.Models.Domain.CostCenters.CostCenter", b =>
                {
                    b.HasOne("Shared.CoreOne.Models.Domain.Archive.ArchiveHeader", "ArchiveHeader")
                        .WithMany()
                        .HasForeignKey("ArchiveHeaderId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Shared.CoreOne.Models.Domain.Modules.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("ArchiveHeader");

                    b.Navigation("Company");
                });

            modelBuilder.Entity("Shared.CoreOne.Models.Domain.FixedAssets.FixedAsset", b =>
                {
                    b.HasOne("Shared.CoreOne.Models.Domain.Accounts.Account", "Account")
                        .WithMany()
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Shared.CoreOne.Models.Domain.Archive.ArchiveHeader", "ArchiveHeader")
                        .WithMany()
                        .HasForeignKey("ArchiveHeaderId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Shared.CoreOne.Models.Domain.Modules.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Shared.CoreOne.Models.Domain.Accounts.Account", "CumulativeDepreciationAccount")
                        .WithMany()
                        .HasForeignKey("CumulativeDepreciationAccountId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Shared.CoreOne.Models.Domain.Accounts.Account", "DepreciationAccount")
                        .WithMany()
                        .HasForeignKey("DepreciationAccountId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Account");

                    b.Navigation("ArchiveHeader");

                    b.Navigation("Company");

                    b.Navigation("CumulativeDepreciationAccount");

                    b.Navigation("DepreciationAccount");
                });

            modelBuilder.Entity("Shared.CoreOne.Models.Domain.Inventory.ItemCost", b =>
                {
                    b.HasOne("Shared.CoreOne.Models.Domain.Items.Item", "Item")
                        .WithMany()
                        .HasForeignKey("ItemId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Shared.CoreOne.Models.Domain.Items.ItemPackage", "ItemPackage")
                        .WithMany()
                        .HasForeignKey("ItemPackageId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Shared.CoreOne.Models.Domain.Modules.Store", "Store")
                        .WithMany()
                        .HasForeignKey("StoreId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Item");

                    b.Navigation("ItemPackage");

                    b.Navigation("Store");
                });

            modelBuilder.Entity("Shared.CoreOne.Models.Domain.Inventory.ItemCostUpdateDetail", b =>
                {
                    b.HasOne("Shared.CoreOne.Models.Domain.Inventory.ItemCostUpdateHeader", "ItemCostUpdateHeader")
                        .WithMany()
                        .HasForeignKey("ItemCostUpdateHeaderId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Shared.CoreOne.Models.Domain.Items.Item", "Item")
                        .WithMany()
                        .HasForeignKey("ItemId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Shared.CoreOne.Models.Domain.Items.ItemPackage", "ItemPackage")
                        .WithMany()
                        .HasForeignKey("ItemPackageId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Item");

                    b.Navigation("ItemCostUpdateHeader");

                    b.Navigation("ItemPackage");
                });

            modelBuilder.Entity("Shared.CoreOne.Models.Domain.Inventory.ItemCostUpdateHeader", b =>
                {
                    b.HasOne("Shared.CoreOne.Models.Domain.Modules.Store", "Store")
                        .WithMany()
                        .HasForeignKey("StoreId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Store");
                });

            modelBuilder.Entity("Shared.CoreOne.Models.Domain.Inventory.ItemCurrentBalance", b =>
                {
                    b.HasOne("Shared.CoreOne.Models.Domain.Items.Item", "Item")
                        .WithMany()
                        .HasForeignKey("ItemId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Shared.CoreOne.Models.Domain.Items.ItemPackage", "ItemPackage")
                        .WithMany()
                        .HasForeignKey("ItemPackageId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Shared.CoreOne.Models.Domain.Modules.Store", "Store")
                        .WithMany()
                        .HasForeignKey("StoreId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Item");

                    b.Navigation("ItemPackage");

                    b.Navigation("Store");
                });

            modelBuilder.Entity("Shared.CoreOne.Models.Domain.Inventory.ItemDisassemble", b =>
                {
                    b.HasOne("Shared.CoreOne.Models.Domain.Inventory.ItemDisassembleHeader", "ItemDisassembleHeader")
                        .WithMany()
                        .HasForeignKey("ItemDisassembleHeaderId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Shared.CoreOne.Models.Domain.Items.Item", "Item")
                        .WithMany()
                        .HasForeignKey("ItemId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Shared.CoreOne.Models.Domain.Items.ItemPackage", "ItemPackage")
                        .WithMany()
                        .HasForeignKey("ItemPackageId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Shared.CoreOne.Models.Domain.Modules.Store", "Store")
                        .WithMany()
                        .HasForeignKey("StoreId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Item");

                    b.Navigation("ItemDisassembleHeader");

                    b.Navigation("ItemPackage");

                    b.Navigation("Store");
                });

            modelBuilder.Entity("Shared.CoreOne.Models.Domain.Inventory.ItemDisassembleDetail", b =>
                {
                    b.HasOne("Shared.CoreOne.Models.Domain.Items.ItemPackage", "FromPackage")
                        .WithMany()
                        .HasForeignKey("FromPackageId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Shared.CoreOne.Models.Domain.Inventory.ItemDisassembleHeader", "ItemDisassembleHeader")
                        .WithMany()
                        .HasForeignKey("ItemDisassembleHeaderId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Shared.CoreOne.Models.Domain.Items.Item", "Item")
                        .WithMany()
                        .HasForeignKey("ItemId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Shared.CoreOne.Models.Domain.Items.ItemPackage", "ToPackage")
                        .WithMany()
                        .HasForeignKey("ToPackageId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("FromPackage");

                    b.Navigation("Item");

                    b.Navigation("ItemDisassembleHeader");

                    b.Navigation("ToPackage");
                });

            modelBuilder.Entity("Shared.CoreOne.Models.Domain.Inventory.ItemDisassembleHeader", b =>
                {
                    b.HasOne("Shared.CoreOne.Models.Domain.Menus.Menu", "Menu")
                        .WithMany()
                        .HasForeignKey("MenuCode")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Shared.CoreOne.Models.Domain.Modules.Store", "Store")
                        .WithMany()
                        .HasForeignKey("StoreId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Menu");

                    b.Navigation("Store");
                });

            modelBuilder.Entity("Shared.CoreOne.Models.Domain.Inventory.ItemDisassembleSerial", b =>
                {
                    b.HasOne("Shared.CoreOne.Models.Domain.Inventory.ItemDisassembleHeader", "ItemDisassembleHeader")
                        .WithMany()
                        .HasForeignKey("ItemDisassembleHeaderId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Shared.CoreOne.Models.Domain.Items.Item", "Item")
                        .WithMany()
                        .HasForeignKey("ItemId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Shared.CoreOne.Models.Domain.Items.ItemPackage", "ItemPackage")
                        .WithMany()
                        .HasForeignKey("ItemPackageId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Shared.CoreOne.Models.Domain.Items.ItemPackage", "MainItemPackage")
                        .WithMany()
                        .HasForeignKey("MainItemPackageId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Item");

                    b.Navigation("ItemDisassembleHeader");

                    b.Navigation("ItemPackage");

                    b.Navigation("MainItemPackage");
                });

            modelBuilder.Entity("Shared.CoreOne.Models.Domain.Inventory.ItemNegativeSalesDetail", b =>
                {
                    b.HasOne("Shared.CoreOne.Models.Domain.Inventory.ItemNegativeSalesHeader", "ItemNegativeSalesHeader")
                        .WithMany()
                        .HasForeignKey("ItemNegativeSalesHeaderId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Shared.CoreOne.Models.Domain.Menus.Menu", "Menu")
                        .WithMany()
                        .HasForeignKey("MenuCode")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("ItemNegativeSalesHeader");

                    b.Navigation("Menu");
                });

            modelBuilder.Entity("Shared.CoreOne.Models.Domain.Inventory.ItemNegativeSalesHeader", b =>
                {
                    b.HasOne("Shared.CoreOne.Models.Domain.Items.Item", "Item")
                        .WithMany()
                        .HasForeignKey("ItemId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Shared.CoreOne.Models.Domain.Items.ItemPackage", "ItemPackage")
                        .WithMany()
                        .HasForeignKey("ItemPackageId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Shared.CoreOne.Models.Domain.Modules.Store", "Store")
                        .WithMany()
                        .HasForeignKey("StoreId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Item");

                    b.Navigation("ItemPackage");

                    b.Navigation("Store");
                });

            modelBuilder.Entity("Shared.CoreOne.Models.Domain.Items.Item", b =>
                {
                    b.HasOne("Shared.CoreOne.Models.Domain.Archive.ArchiveHeader", "ArchiveHeader")
                        .WithMany()
                        .HasForeignKey("ArchiveHeaderId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Shared.CoreOne.Models.Domain.Modules.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Shared.CoreOne.Models.Domain.Items.ItemCategory", "ItemCategory")
                        .WithMany()
                        .HasForeignKey("ItemCategoryId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Shared.CoreOne.Models.Domain.Items.ItemSection", "ItemSection")
                        .WithMany()
                        .HasForeignKey("ItemSectionId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Shared.CoreOne.Models.Domain.Items.ItemSubCategory", "ItemSubCategory")
                        .WithMany()
                        .HasForeignKey("ItemSubCategoryId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Shared.CoreOne.Models.Domain.Items.ItemSubSection", "ItemSubSection")
                        .WithMany()
                        .HasForeignKey("ItemSubSectionId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Shared.CoreOne.Models.Domain.Items.ItemType", "ItemType")
                        .WithMany()
                        .HasForeignKey("ItemTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Shared.CoreOne.Models.Domain.Items.MainItem", "MainItem")
                        .WithMany()
                        .HasForeignKey("MainItemId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Shared.CoreOne.Models.Domain.Accounts.Account", "PurchaseAccount")
                        .WithMany()
                        .HasForeignKey("PurchaseAccountId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Shared.CoreOne.Models.Domain.Accounts.Account", "SalesAccount")
                        .WithMany()
                        .HasForeignKey("SalesAccountId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Shared.CoreOne.Models.Domain.Items.ItemPackage", "SingularPackage")
                        .WithMany()
                        .HasForeignKey("SingularPackageId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Shared.CoreOne.Models.Domain.Taxes.TaxType", "TaxType")
                        .WithMany()
                        .HasForeignKey("TaxTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Shared.CoreOne.Models.Domain.Modules.Vendor", "Vendor")
                        .WithMany()
                        .HasForeignKey("VendorId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("ArchiveHeader");

                    b.Navigation("Company");

                    b.Navigation("ItemCategory");

                    b.Navigation("ItemSection");

                    b.Navigation("ItemSubCategory");

                    b.Navigation("ItemSubSection");

                    b.Navigation("ItemType");

                    b.Navigation("MainItem");

                    b.Navigation("PurchaseAccount");

                    b.Navigation("SalesAccount");

                    b.Navigation("SingularPackage");

                    b.Navigation("TaxType");

                    b.Navigation("Vendor");
                });

            modelBuilder.Entity("Shared.CoreOne.Models.Domain.Items.ItemAttribute", b =>
                {
                    b.HasOne("Shared.CoreOne.Models.Domain.Items.ItemAttributeType", "ItemAttributeType")
                        .WithMany()
                        .HasForeignKey("ItemAttributeTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Shared.CoreOne.Models.Domain.Items.Item", "Item")
                        .WithMany()
                        .HasForeignKey("ItemId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Item");

                    b.Navigation("ItemAttributeType");
                });

            modelBuilder.Entity("Shared.CoreOne.Models.Domain.Items.ItemAttributeType", b =>
                {
                    b.HasOne("Shared.CoreOne.Models.Domain.Modules.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Company");
                });

            modelBuilder.Entity("Shared.CoreOne.Models.Domain.Items.ItemBarCode", b =>
                {
                    b.HasOne("Shared.CoreOne.Models.Domain.Items.ItemPackage", "FromPackage")
                        .WithMany()
                        .HasForeignKey("FromPackageId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Shared.CoreOne.Models.Domain.Items.Item", "Item")
                        .WithMany()
                        .HasForeignKey("ItemId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Shared.CoreOne.Models.Domain.Items.ItemPackage", "ToPackage")
                        .WithMany()
                        .HasForeignKey("ToPackageId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("FromPackage");

                    b.Navigation("Item");

                    b.Navigation("ToPackage");
                });

            modelBuilder.Entity("Shared.CoreOne.Models.Domain.Items.ItemBarCodeDetail", b =>
                {
                    b.HasOne("Shared.CoreOne.Models.Domain.Items.ItemBarCode", "ItemBarCode")
                        .WithMany()
                        .HasForeignKey("ItemBarCodeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("ItemBarCode");
                });

            modelBuilder.Entity("Shared.CoreOne.Models.Domain.Items.ItemCategory", b =>
                {
                    b.HasOne("Shared.CoreOne.Models.Domain.Modules.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Company");
                });

            modelBuilder.Entity("Shared.CoreOne.Models.Domain.Items.ItemPackage", b =>
                {
                    b.HasOne("Shared.CoreOne.Models.Domain.Modules.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Company");
                });

            modelBuilder.Entity("Shared.CoreOne.Models.Domain.Items.ItemPacking", b =>
                {
                    b.HasOne("Shared.CoreOne.Models.Domain.Items.ItemPackage", "FromPackage")
                        .WithMany()
                        .HasForeignKey("FromPackageId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Shared.CoreOne.Models.Domain.Items.Item", "Item")
                        .WithMany()
                        .HasForeignKey("ItemId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Shared.CoreOne.Models.Domain.Items.ItemPackage", "ToPackage")
                        .WithMany()
                        .HasForeignKey("ToPackageId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("FromPackage");

                    b.Navigation("Item");

                    b.Navigation("ToPackage");
                });

            modelBuilder.Entity("Shared.CoreOne.Models.Domain.Items.ItemSection", b =>
                {
                    b.HasOne("Shared.CoreOne.Models.Domain.Modules.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Shared.CoreOne.Models.Domain.Items.ItemSubCategory", "ItemSubCategory")
                        .WithMany()
                        .HasForeignKey("ItemSubCategoryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Company");

                    b.Navigation("ItemSubCategory");
                });

            modelBuilder.Entity("Shared.CoreOne.Models.Domain.Items.ItemSubCategory", b =>
                {
                    b.HasOne("Shared.CoreOne.Models.Domain.Modules.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Shared.CoreOne.Models.Domain.Items.ItemCategory", "ItemCategory")
                        .WithMany()
                        .HasForeignKey("ItemCategoryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Company");

                    b.Navigation("ItemCategory");
                });

            modelBuilder.Entity("Shared.CoreOne.Models.Domain.Items.ItemSubSection", b =>
                {
                    b.HasOne("Shared.CoreOne.Models.Domain.Modules.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Shared.CoreOne.Models.Domain.Items.ItemSection", "ItemSection")
                        .WithMany()
                        .HasForeignKey("ItemSectionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Company");

                    b.Navigation("ItemSection");
                });

            modelBuilder.Entity("Shared.CoreOne.Models.Domain.Items.ItemTax", b =>
                {
                    b.HasOne("Shared.CoreOne.Models.Domain.Items.Item", "Item")
                        .WithMany()
                        .HasForeignKey("ItemId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Shared.CoreOne.Models.Domain.Taxes.Tax", "Tax")
                        .WithMany()
                        .HasForeignKey("TaxId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Item");

                    b.Navigation("Tax");
                });

            modelBuilder.Entity("Shared.CoreOne.Models.Domain.Items.MainItem", b =>
                {
                    b.HasOne("Shared.CoreOne.Models.Domain.Modules.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Shared.CoreOne.Models.Domain.Items.ItemSubSection", "ItemSubSection")
                        .WithMany()
                        .HasForeignKey("ItemSubSectionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Company");

                    b.Navigation("ItemSubSection");
                });

            modelBuilder.Entity("Shared.CoreOne.Models.Domain.Journal.CostCenterJournalDetail", b =>
                {
                    b.HasOne("Shared.CoreOne.Models.Domain.CostCenters.CostCenter", "CostCenter")
                        .WithMany()
                        .HasForeignKey("CostCenterId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Shared.CoreOne.Models.Domain.Items.Item", "Item")
                        .WithMany()
                        .HasForeignKey("ItemId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Shared.CoreOne.Models.Domain.Journal.JournalDetail", "JournalDetail")
                        .WithMany()
                        .HasForeignKey("JournalDetailId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Shared.CoreOne.Models.Domain.Menus.Menu", "Menu")
                        .WithMany()
                        .HasForeignKey("MenuCode")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("CostCenter");

                    b.Navigation("Item");

                    b.Navigation("JournalDetail");

                    b.Navigation("Menu");
                });

            modelBuilder.Entity("Shared.CoreOne.Models.Domain.Journal.JournalDetail", b =>
                {
                    b.HasOne("Shared.CoreOne.Models.Domain.Accounts.Account", "Account")
                        .WithMany()
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Shared.CoreOne.Models.Domain.Modules.Currency", "Currency")
                        .WithMany()
                        .HasForeignKey("CurrencyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Shared.CoreOne.Models.Domain.Modules.EntityType", "EntityType")
                        .WithMany()
                        .HasForeignKey("EntityTypeId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Shared.CoreOne.Models.Domain.Journal.JournalHeader", "JournalHeader")
                        .WithMany()
                        .HasForeignKey("JournalHeaderId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Shared.CoreOne.Models.Domain.Taxes.Tax", "Tax")
                        .WithMany()
                        .HasForeignKey("TaxId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Shared.CoreOne.Models.Domain.Taxes.TaxType", "TaxType")
                        .WithMany()
                        .HasForeignKey("TaxTypeId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Account");

                    b.Navigation("Currency");

                    b.Navigation("EntityType");

                    b.Navigation("JournalHeader");

                    b.Navigation("Tax");

                    b.Navigation("TaxType");
                });

            modelBuilder.Entity("Shared.CoreOne.Models.Domain.Journal.JournalHeader", b =>
                {
                    b.HasOne("Shared.CoreOne.Models.Domain.Archive.ArchiveHeader", "ArchiveHeader")
                        .WithMany()
                        .HasForeignKey("ArchiveHeaderId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Shared.CoreOne.Models.Domain.Journal.JournalType", "JournalType")
                        .WithMany()
                        .HasForeignKey("JournalTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Shared.CoreOne.Models.Domain.Menus.Menu", "Menu")
                        .WithMany()
                        .HasForeignKey("MenuCode")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Shared.CoreOne.Models.Domain.Modules.Store", "Store")
                        .WithMany()
                        .HasForeignKey("StoreId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("ArchiveHeader");

                    b.Navigation("JournalType");

                    b.Navigation("Menu");

                    b.Navigation("Store");
                });

            modelBuilder.Entity("Shared.CoreOne.Models.Domain.Menus.MenuCompany", b =>
                {
                    b.HasOne("Shared.CoreOne.Models.Domain.Modules.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Shared.CoreOne.Models.Domain.Menus.Menu", "Menu")
                        .WithMany()
                        .HasForeignKey("MenuCode")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Company");

                    b.Navigation("Menu");
                });

            modelBuilder.Entity("Shared.CoreOne.Models.Domain.Menus.MenuEncoding", b =>
                {
                    b.HasOne("Shared.CoreOne.Models.Domain.Menus.Menu", "Menu")
                        .WithMany()
                        .HasForeignKey("MenuCode")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Shared.CoreOne.Models.Domain.Modules.Store", "Store")
                        .WithMany()
                        .HasForeignKey("StoreId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Menu");

                    b.Navigation("Store");
                });

            modelBuilder.Entity("Shared.CoreOne.Models.Domain.Menus.MenuNote", b =>
                {
                    b.HasOne("Shared.CoreOne.Models.Domain.Menus.Menu", "Menu")
                        .WithMany()
                        .HasForeignKey("MenuCode")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Shared.CoreOne.Models.Domain.Menus.MenuNoteIdentifier", "MenuNoteIdentifier")
                        .WithMany()
                        .HasForeignKey("MenuNoteIdentifierId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Menu");

                    b.Navigation("MenuNoteIdentifier");
                });

            modelBuilder.Entity("Shared.CoreOne.Models.Domain.Menus.MenuNoteIdentifier", b =>
                {
                    b.HasOne("Shared.CoreOne.Models.Domain.Basics.ColumnIdentifier", "ColumnIdentifier")
                        .WithMany()
                        .HasForeignKey("ColumnIdentifierId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Shared.CoreOne.Models.Domain.Modules.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Shared.CoreOne.Models.Domain.Menus.Menu", "Menu")
                        .WithMany()
                        .HasForeignKey("MenuCode")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("ColumnIdentifier");

                    b.Navigation("Company");

                    b.Navigation("Menu");
                });

            modelBuilder.Entity("Shared.CoreOne.Models.Domain.Modules.Bank", b =>
                {
                    b.HasOne("Shared.CoreOne.Models.Domain.Accounts.Account", "Account")
                        .WithMany()
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Shared.CoreOne.Models.Domain.Archive.ArchiveHeader", "ArchiveHeader")
                        .WithMany()
                        .HasForeignKey("ArchiveHeaderId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Shared.CoreOne.Models.Domain.Modules.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Account");

                    b.Navigation("ArchiveHeader");

                    b.Navigation("Company");
                });

            modelBuilder.Entity("Shared.CoreOne.Models.Domain.Modules.Branch", b =>
                {
                    b.HasOne("Shared.CoreOne.Models.Domain.Modules.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Company");
                });

            modelBuilder.Entity("Shared.CoreOne.Models.Domain.Modules.Client", b =>
                {
                    b.HasOne("Shared.CoreOne.Models.Domain.Accounts.Account", "Account")
                        .WithMany()
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Shared.CoreOne.Models.Domain.Archive.ArchiveHeader", "ArchiveHeader")
                        .WithMany()
                        .HasForeignKey("ArchiveHeaderId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Shared.CoreOne.Models.Domain.Modules.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Shared.CoreOne.Models.Domain.Modules.Seller", "Seller")
                        .WithMany()
                        .HasForeignKey("SellerId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Account");

                    b.Navigation("ArchiveHeader");

                    b.Navigation("Company");

                    b.Navigation("Seller");
                });

            modelBuilder.Entity("Shared.CoreOne.Models.Domain.Modules.Company", b =>
                {
                    b.HasOne("Shared.CoreOne.Models.Domain.Modules.Currency", "Currency")
                        .WithMany()
                        .HasForeignKey("CurrencyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Currency");
                });

            modelBuilder.Entity("Shared.CoreOne.Models.Domain.Modules.CurrencyRate", b =>
                {
                    b.HasOne("Shared.CoreOne.Models.Domain.Modules.Currency", "FromCurrency")
                        .WithMany()
                        .HasForeignKey("FromCurrencyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Shared.CoreOne.Models.Domain.Modules.Currency", "ToCurrency")
                        .WithMany()
                        .HasForeignKey("ToCurrencyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("FromCurrency");

                    b.Navigation("ToCurrency");
                });

            modelBuilder.Entity("Shared.CoreOne.Models.Domain.Modules.PaymentMethod", b =>
                {
                    b.HasOne("Shared.CoreOne.Models.Domain.Accounts.Account", "CommissionAccount")
                        .WithMany()
                        .HasForeignKey("CommissionAccountId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Shared.CoreOne.Models.Domain.Accounts.Account", "CommissionTaxAccount")
                        .WithMany()
                        .HasForeignKey("CommissionTaxAccountId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Shared.CoreOne.Models.Domain.Modules.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Shared.CoreOne.Models.Domain.Accounts.Account", "PaymentAccount")
                        .WithMany()
                        .HasForeignKey("PaymentAccountId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Shared.CoreOne.Models.Domain.Modules.PaymentType", "PaymentType")
                        .WithMany()
                        .HasForeignKey("PaymentTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Shared.CoreOne.Models.Domain.Taxes.Tax", "Tax")
                        .WithMany()
                        .HasForeignKey("TaxId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("CommissionAccount");

                    b.Navigation("CommissionTaxAccount");

                    b.Navigation("Company");

                    b.Navigation("PaymentAccount");

                    b.Navigation("PaymentType");

                    b.Navigation("Tax");
                });

            modelBuilder.Entity("Shared.CoreOne.Models.Domain.Modules.Seller", b =>
                {
                    b.HasOne("Shared.CoreOne.Models.Domain.Archive.ArchiveHeader", "ArchiveHeader")
                        .WithMany()
                        .HasForeignKey("ArchiveHeaderId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Shared.CoreOne.Models.Domain.Modules.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Shared.CoreOne.Models.Domain.Modules.SellerCommissionMethod", "SellerCommissionMethod")
                        .WithMany()
                        .HasForeignKey("SellerCommissionMethodId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Shared.CoreOne.Models.Domain.Modules.SellerType", "SellerType")
                        .WithMany()
                        .HasForeignKey("SellerTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("ArchiveHeader");

                    b.Navigation("Company");

                    b.Navigation("SellerCommissionMethod");

                    b.Navigation("SellerType");
                });

            modelBuilder.Entity("Shared.CoreOne.Models.Domain.Modules.SellerCommission", b =>
                {
                    b.HasOne("Shared.CoreOne.Models.Domain.Modules.SellerCommissionMethod", "SellerCommissionMethod")
                        .WithMany()
                        .HasForeignKey("SellerCommissionMethodId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("SellerCommissionMethod");
                });

            modelBuilder.Entity("Shared.CoreOne.Models.Domain.Modules.SellerCommissionMethod", b =>
                {
                    b.HasOne("Shared.CoreOne.Models.Domain.Modules.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Shared.CoreOne.Models.Domain.Modules.SellerCommissionType", "SellerCommissionType")
                        .WithMany()
                        .HasForeignKey("SellerCommissionTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Company");

                    b.Navigation("SellerCommissionType");
                });

            modelBuilder.Entity("Shared.CoreOne.Models.Domain.Modules.ShipmentType", b =>
                {
                    b.HasOne("Shared.CoreOne.Models.Domain.Modules.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Company");
                });

            modelBuilder.Entity("Shared.CoreOne.Models.Domain.Modules.Store", b =>
                {
                    b.HasOne("Shared.CoreOne.Models.Domain.Modules.Branch", "Branch")
                        .WithMany()
                        .HasForeignKey("BranchId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Shared.CoreOne.Models.Domain.Basics.City", "City")
                        .WithMany()
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Shared.CoreOne.Models.Domain.Basics.Country", "Country")
                        .WithMany()
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Shared.CoreOne.Models.Domain.Basics.District", "District")
                        .WithMany()
                        .HasForeignKey("DistrictId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Shared.CoreOne.Models.Domain.Basics.State", "State")
                        .WithMany()
                        .HasForeignKey("StateId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Shared.CoreOne.Models.Domain.Modules.StoreClassification", "StoreClassification")
                        .WithMany()
                        .HasForeignKey("StoreClassificationId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Branch");

                    b.Navigation("City");

                    b.Navigation("Country");

                    b.Navigation("District");

                    b.Navigation("State");

                    b.Navigation("StoreClassification");
                });

            modelBuilder.Entity("Shared.CoreOne.Models.Domain.Modules.Supplier", b =>
                {
                    b.HasOne("Shared.CoreOne.Models.Domain.Accounts.Account", "Account")
                        .WithMany()
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Shared.CoreOne.Models.Domain.Archive.ArchiveHeader", "ArchiveHeader")
                        .WithMany()
                        .HasForeignKey("ArchiveHeaderId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Shared.CoreOne.Models.Domain.Modules.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Shared.CoreOne.Models.Domain.Modules.ShipmentType", "ShipmentType")
                        .WithMany()
                        .HasForeignKey("ShipmentTypeId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Account");

                    b.Navigation("ArchiveHeader");

                    b.Navigation("Company");

                    b.Navigation("ShipmentType");
                });

            modelBuilder.Entity("Shared.CoreOne.Models.Domain.Modules.Vendor", b =>
                {
                    b.HasOne("Shared.CoreOne.Models.Domain.Modules.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Company");
                });

            modelBuilder.Entity("Shared.CoreOne.Models.Domain.Notifications.NotificationDetail", b =>
                {
                    b.HasOne("Shared.CoreOne.Models.Domain.Notifications.NotificationHeader", "NotificationHeader")
                        .WithMany()
                        .HasForeignKey("NotificationHeaderId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("NotificationHeader");
                });

            modelBuilder.Entity("Shared.CoreOne.Models.Domain.Notifications.NotificationHeader", b =>
                {
                    b.HasOne("Shared.CoreOne.Models.Domain.Notifications.NotificationType", "NotificationType")
                        .WithMany()
                        .HasForeignKey("NotificationTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("NotificationType");
                });

            modelBuilder.Entity("Shared.CoreOne.Models.Domain.Settings.ApplicationFlagDetail", b =>
                {
                    b.HasOne("Shared.CoreOne.Models.Domain.Settings.ApplicationFlagHeader", "CompanyFlagHeader")
                        .WithMany()
                        .HasForeignKey("ApplicationFlagHeaderId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Shared.CoreOne.Models.Domain.Settings.ApplicationFlagType", "CompanyFlagType")
                        .WithMany()
                        .HasForeignKey("ApplicationFlagTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("CompanyFlagHeader");

                    b.Navigation("CompanyFlagType");
                });

            modelBuilder.Entity("Shared.CoreOne.Models.Domain.Settings.ApplicationFlagDetailCompany", b =>
                {
                    b.HasOne("Shared.CoreOne.Models.Domain.Settings.ApplicationFlagDetail", "ApplicationFlagDetail")
                        .WithMany()
                        .HasForeignKey("ApplicationFlagDetailId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Shared.CoreOne.Models.Domain.Modules.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("ApplicationFlagDetail");

                    b.Navigation("Company");
                });

            modelBuilder.Entity("Shared.CoreOne.Models.Domain.Settings.ApplicationFlagDetailImage", b =>
                {
                    b.HasOne("Shared.CoreOne.Models.Domain.Settings.ApplicationFlagDetailCompany", "ApplicationFlagDetailCompany")
                        .WithMany()
                        .HasForeignKey("ApplicationFlagDetailCompanyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("ApplicationFlagDetailCompany");
                });

            modelBuilder.Entity("Shared.CoreOne.Models.Domain.Settings.ApplicationFlagDetailSelect", b =>
                {
                    b.HasOne("Shared.CoreOne.Models.Domain.Settings.ApplicationFlagDetail", "ApplicationFlagDetail")
                        .WithMany()
                        .HasForeignKey("ApplicationFlagDetailId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("ApplicationFlagDetail");
                });

            modelBuilder.Entity("Shared.CoreOne.Models.Domain.Settings.ApplicationFlagHeader", b =>
                {
                    b.HasOne("Shared.CoreOne.Models.Domain.Settings.ApplicationFlagTab", "ApplicationFlagTab")
                        .WithMany()
                        .HasForeignKey("ApplicationFlagTabId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("ApplicationFlagTab");
                });

            modelBuilder.Entity("Shared.CoreOne.Models.Domain.Settings.ReportPrintSetting", b =>
                {
                    b.HasOne("Shared.CoreOne.Models.Domain.Modules.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Shared.CoreOne.Models.Domain.Menus.Menu", "Menu")
                        .WithMany()
                        .HasForeignKey("MenuCode")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Shared.CoreOne.Models.Domain.Settings.ReportPrintForm", "PrintForm")
                        .WithMany()
                        .HasForeignKey("PrintFormId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Company");

                    b.Navigation("Menu");

                    b.Navigation("PrintForm");
                });

            modelBuilder.Entity("Shared.CoreOne.Models.Domain.Taxes.Tax", b =>
                {
                    b.HasOne("Shared.CoreOne.Models.Domain.Modules.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Shared.CoreOne.Models.Domain.Accounts.Account", "CreditAccount")
                        .WithMany()
                        .HasForeignKey("CrAccount")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Shared.CoreOne.Models.Domain.Accounts.Account", "DebitAccount")
                        .WithMany()
                        .HasForeignKey("DrAccount")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Shared.CoreOne.Models.Domain.Taxes.TaxType", "TaxType")
                        .WithMany()
                        .HasForeignKey("TaxTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Company");

                    b.Navigation("CreditAccount");

                    b.Navigation("DebitAccount");

                    b.Navigation("TaxType");
                });

            modelBuilder.Entity("Shared.CoreOne.Models.Domain.Taxes.TaxPercent", b =>
                {
                    b.HasOne("Shared.CoreOne.Models.Domain.Taxes.Tax", "Tax")
                        .WithMany()
                        .HasForeignKey("TaxId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Tax");
                });
#pragma warning restore 612, 618
        }
    }
}
